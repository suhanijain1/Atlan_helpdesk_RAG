[
  {
    "title": "SSO Integration | Atlan Documentation",
    "url": "https://docs.atlan.com/product/integrations/identity-management/sso",
    "content": "Configure Atlan Integrations Identity Management SSO On this page SSO Integration Overview: Connect Atlan with SSO to enable secure authentication, streamline user access, and enhance identity management. Get started ​ How to enable Azure AD for SSO How to enable Google for SSO How to enable JumpCloud for SSO How to enable Okta for SSO How to enable OneLogin for SSO How to enable SAML 2.0 for SSO Guides ​ Authenticate SSO credentials to query data Authenticate SSO credentials to view sample data How to enable associated terms How to limit SSO automatically creating users when they log in How to set default user roles for SSO References ​ SSO integration with PingFederate using SAML Troubleshooting ​ Troubleshooting SSO Troubleshooting connector-specific SSO authentication Why do I get a 404 error when using PingFederate SSO? Why do I get an authentication error when logging in via Okta for the first time? Why do I get an error while logging in via Google dashboard? Unable to log into Atlan via SSO due to an internal error from Microsoft Defender FAQ ​ Can Atlan integrate with multiple Azure AD tenants within a single instance? Can we use a Microsoft SSO login? What type of user provisioning does Atlan support for SSO integrations? When does Atlan become a personal data processor or subprocessor? Why did my users not receive an invite email from Atlan? Tags: integrations identity management sso Previous Troubleshooting SCIM provisioning Next How to enable Azure AD for SSO Get started Guides References Troubleshooting FAQ",
    "topic": "SSO",
    "scraped_at": "2025-09-15 00:27:04"
  },
  {
    "title": "Enable  Azure AD for SSO | Atlan Documentation",
    "url": "https://docs.atlan.com/product/integrations/identity-management/sso/how-tos/enable-azure-ad-for-sso",
    "content": "Configure Atlan Integrations Identity Management SSO Get Started How to enable Azure AD for SSO On this page Enable Azure AD for SSO Who can do this? You will need to be an admin user within Atlan to configure SSO. You will also need to work with your Azure AD administrator to carry out the tasks below in Azure AD. danger SSO group mappings are triggered every time a user authenticates in Atlan. A user may need to log out and then log into Atlan again to view the changes. If a user is added to a new group or removed from an existing one in Azure AD, the updates will also be reflected in Atlan. To ensure that the sync is successful, the groups that the user belongs to should be mapped in Atlan, and if a group name has changed in Azure AD, you will need to update the group name in Atlan as well. For any questions about group mapping sync, head over here . To integrate Azure AD SSO for Atlan, complete the following steps. Choose SSO provider (in Atlan) ​ To choose Azure AD as your SSO provider, within Atlan: From the left menu on any screen, navigate to Admin . Under the Workspace heading, click SSO . Under Choose SAML provider , select Azure AD and then click Configure . Under Service provider metadata , copy the Identifier (Entity ID) , Reply URL (Assert Consumer Service URL) , and Logout Url . Set up SAML app (in Azure AD) ​ To set up a SAML app, within Azure's portal : From the menu on the left, open Azure Active Directory . Under Azure Active Directory | Overview click the Add button and then Enterprise application . Under Browser Azure AD Gallery click the Create your own application button: For What's the name of your app? enter a name, such as Atlan . For What are you looking to do with your application? select Integrate any other application you don't find in the gallery (Non-gallery) . At the bottom of the Create your own application dialog, click the Create button. Wait for the application details to be shown - this can take around 1 minute. Under Getting Started and within the Set up single sign on tile, click the Get started link. Under Select a single sign-on method click the SAML tile. In the upper-right of the Basic SAML Configuration card, click the Edit button and enter: For Identifier (Entity ID) click Add identifier and enter the value you copied from Atlan above. For Reply URL (Assertion Consumer Service URL) click Add reply URL (twice) and enter the two values you copied from Atlan above. The longer URL should be enabled under the Default column. For Logout Url (Optional) enter the value you copied from Atlan above. At the top of the page, under Basic SAML Configuration , click the Save button. Close the Basic SAML Configuration dialog by clicking X in the upper-right. In the upper-right of the Attributes & Claims card, click the Edit button: Navigate to the Additional claims section, click each of the following claims to modify their Name exactly as suggested below and remove the Namespace value: email - > user.mail firstName - > user.givenname lastName - > user.surname (Optional) username - > ExtractMailPrefix(user.mail) info 💪 Did you know? For users assigned to Atlan through SSO, the username will be populated from the username mapping. Otherwise, the username will be the email prefix by default, which users can update while registering on Atlan for the first time. To configure group claims: From the options along the top, click + Add a group claim . In the popover, under Which groups associated with the user should be returned in the claim? , select Groups assigned to the application . From the Source attribute dropdown, select Cloud-only group display names (Preview) . If you have a hybrid setup , select sAMAccountName instead and then check the Emit group name for cloud-only groups checkbox. danger Please ensure that the Cloud-only group display names attribute contains the actual group display names. If not, you will need to update the source attribute with the relevant one that contains group display names. Click Advanced options to expand the dropdown menu: Check the Customize the name of the group claim box. For Name , enter memberOf . This is required if you want to retain group membership in Atlan. Click Save and close the popover by clicking X in the upper-right. Download Azure AD's metadata file (in Azure AD) ​ To download Azure AD's metadata file, within the same Azure AD app's SAML-based Sign-on page: Within the SAML Signing Certificate card, to the right of Federation Metadata XML , click the Download link. Within the Set up <application> card, copy the Logout URL . Assign users or groups to the app (in Azure AD) ​ To assign users or groups to the app, within the Azure AD application's page: Under Manage, click Users and groups . At the top of the table, click the Add user/group button. In the resulting Add Assignment dialog, under the Users or Groups heading, click the None Selected link. In the resulting Users or Groups dialog, search for users or groups to add and click to select them. When finished, at the bottom of the Users or Groups dialog, click the Select button. At the bottom of the Add Assignment dialog, click the Assign button. Upload Azure AD's metadata file (in Atlan) ​ To complete the configuration of Azure AD SSO, within Atlan: From the left menu on any screen, navigate to Admin . Under the Workspace heading, click SSO . Under Choose SAML provider , select Azure AD and then click Configure . To the right of Identity provider metadata click the Import from XML button. Select the XML file downloaded from Azure AD above. Under Single Logout Service URL , enter the logout URL copied from Azure AD above. At the bottom of the screen, click Save . Congratulations - you have successfully set up Azure AD SSO in Atlan! 🎉 Did you know? By default, users can now log into Atlan with either Azure AD SSO or a local Atlan account (via email). To only allow logins via SSO, enable the Enforce SSO option in Atlan. Once SSO is enforced, we recommend asking your Azure AD administrator to provision access to users through the Azure portal and not directly from Atlan . When access has been provided, a user will be able to log into Atlan directly and their profile will be generated automatically. (Optional) Configure group mappings ​ danger Before you can configure group mapping, you will first need to create groups in Atlan that correspond to the groups you want to map from Azure AD to Atlan. In addition, you must configure the memberOf attribute and group mapping to retain group membership in Atlan - irrespective of whether or not you enable SCIM . To automatically assign Azure AD users to Atlan groups based on their Azure AD groups, within Atlan: From the left menu on any screen, navigate to Admin . Under the Workspace heading, click SSO . Change to the Groups Mapping tab. To the right of each Atlan group listed: Under the SSO Groups column, type the name of the corresponding group in Azure AD to map to the Atlan group on that row - for example, Data Engineering , Business Analysts , and so on. You will need to provide each Azure AD group with access to Atlan. Click the Save button on that row. As each user signs up to Atlan, they will be automatically assigned groups in Atlan based on these mappings! 🎉 Did you know? You can configure SCIM provisioning in Azure AD to manage your users and groups in Atlan. Plus, once you've configured group mapping, you can add the mapped groups to a persona or purpose to auto-assign relevant permissions to users as they sign up in Atlan. Tags: integration connectors Previous SSO Integration Next How to enable Google for SSO Choose SSO provider (in Atlan) Set up SAML app (in Azure AD) Download Azure AD's metadata file (in Azure AD) Assign users or groups to the app (in Azure AD) Upload Azure AD's metadata file (in Atlan) (Optional) Configure group mappings",
    "topic": "SSO",
    "scraped_at": "2025-09-15 00:27:05"
  },
  {
    "title": "Enable  Google for SSO | Atlan Documentation",
    "url": "https://docs.atlan.com/product/integrations/identity-management/sso/how-tos/enable-google-for-sso",
    "content": "Configure Atlan Integrations Identity Management SSO Get Started How to enable Google for SSO On this page Enable Google for SSO Who can do this? You will need to be an admin user within Atlan to configure SSO. You will also need to work with your Google domain administrator to carry out the tasks below in the Google Admin Center. danger SSO group mappings are triggered every time a user authenticates in Atlan. A user may need to log out and then log into Atlan again to view the changes. If a user is added to a new group or removed from an existing one in Google, the updates will also be reflected in Atlan. To ensure that the sync is successful, the groups that the user belongs to should be mapped in Atlan, and if a group name has changed in Google, you will need to update the group name in Atlan as well. For any questions about group mapping sync, head over here . To integrate Google SSO for Atlan, complete the fo llowing steps. Choose SSO provider (in Atlan) ​ To choose Google as your SSO provider, within Atlan: From the left menu on any screen, navigate to Admin . Under the Workspace heading, click SSO . Under Choose SAML provider , select Google and then click Configure . Under Service provider metadata , copy the ACS URL and Entity ID . Set up SAML app (in Google Admin Center) ​ To set up a SAML app, within Google Admin Center : From the menu on the left, expand Apps and then click on Web and mobile apps . At the top of the table, click the Add app link and then click Add custom SAML app . Enter a name for your app, such as Atlan and then click the Continue button. Under Option 1: Download IdP metadata click the Download metadata button, save the file, and then click the Continue button. Under Service provider details , enter your Atlan SAML settings: For ACS URL , enter the value you copied from Atlan above. For Entity ID , enter the value you copied from Atlan above. Click the Continue button. Under Attributes , define the following mappings from Google Directory attributes on the left to App attributes on the right: Primary email - > email First name - > firstName Last name - > lastName (Optional) To configure group mapping in Atlan , under Group membership (optional) , enter the following details: For Google Groups , select all the Google groups you want to map to Atlan. You can select up to 75 groups in total. For App attribute , enter memberOf . This is required if you want to retain group membership in Atlan. At the end of the form, click the Finish button. Assign users to the app (in Google Admin Center) ​ To assign users to the app, within Google Admin Center : From the app page, expand User access . Under Service status change to ON for everyone and then click Save . Upload Google's metadata file (in Atlan) ​ To complete the configuration of Google SSO, within Atlan: From the left menu on any screen, navigate to Admin . Under the Workspace heading, click SSO . Under Choose SAML provider , select Google and then click Configure . To the right of Identity provider metadata click the Import from XML button. Select the GoogleIDPMetadata.xml file downloaded from Google above. At the bottom of the screen, click Save . Congratulations - you have successfully set up Google SSO in Atlan! 🎉 Did you know? By default, users can now log into Atlan with either Google SSO or a local Atlan account (via email). To only allow logins via SSO, enable the Enforce SSO option in Atlan. Once SSO is enforced, we recommend asking your Google domain administrator to provision access to users through the Google Admin Center and not directly from Atlan . When access has been provided, a user will be able to log into Atlan directly and their profile will be generated automatically. (Optional) Configure group mappings ​ danger Before you can configure group mapping, you will first need to create groups in Atlan that correspond to the groups you want to map from Google to Atlan. In addition, you must configure the memberOf attribute and group mapping to retain group membership in Atlan. To automatically assign Google users to Atlan groups based on their Google groups, within Atlan: From the left menu on any screen, navigate to Admin . Under the Workspace heading, click SSO . Change to the Groups Mapping tab. To the right of each Atlan group listed: Under the SSO Groups column, type the name of the corresponding group in Google to map to the Atlan group on that row - for example, Data Engineering , Business Analysts , and so on. You will need to provide each Google group with access to Atlan. Click the Save button on that row. As each user signs up to Atlan, they will be automatically assigned groups in Atlan based on these mappings! 🎉 Did you know? Once you've configured group mapping, you can add the mapped groups to a persona or purpose to auto-assign relevant permissions to users as they sign up in Atlan. Tags: integration connectors Previous How to enable Azure AD for SSO Next How to enable JumpCloud for SSO Choose SSO provider (in Atlan) Set up SAML app (in Google Admin Center) Assign users to the app (in Google Admin Center) Upload Google's metadata file (in Atlan) (Optional) Configure group mappings",
    "topic": "SSO",
    "scraped_at": "2025-09-15 00:27:06"
  },
  {
    "title": "Enable  Okta for SSO | Atlan Documentation",
    "url": "https://docs.atlan.com/product/integrations/identity-management/sso/how-tos/enable-okta-for-sso",
    "content": "Configure Atlan Integrations Identity Management SSO Get Started How to enable Okta for SSO On this page Enable Okta for SSO Who can do this? You will need to be an admin user within Atlan to configure SSO. You will also need to work with your Okta administrator to carry out the tasks below in Okta. danger SSO group mappings are triggered every time a user authenticates in Atlan. A user may need to log out and then log into Atlan again to view the changes. If a user is added to a new group or removed from an existing one in Okta, the updates will also be reflected in Atlan. To ensure that the sync is successful, the groups that the user belongs to should be mapped in Atlan, and if a group name has changed in Okta, you will need to update the group name in Atlan as well. For any questions about group mapping sync, head over here . To integrate Okta SSO for Atlan, complete the foll owing steps. Choose SSO provider (in Atlan) ​ To choose Okta as your SSO provider, within Atlan: From the left menu on any screen, navigate to Admin . Under the Workspace heading, click SSO . Under Choose SAML provider , select Okta and then click Configure . Under Service provider metadata , copy the Single sign on URL and Audience URI (SP Entity ID) . Set up SAML app (in Okta) ​ To set up a SAML app, within Okta's administration console: From the menu on the left, expand Applications and then click on Applications . At the top of the table, click the Create App Integration button. In the Create a new app integration dialog, select SAML 2.0 and then click Next . Under General Settings enter: For App name , enter a name for the application, such as Atlan . Click the Next button. Under SAML Settings - General enter: For Single sign on URL enter the value you copied from the field of the same name in Atlan above. Ensure Use this for Recipient URL and Destination URL is enabled. For Audience URI (SP Entity ID) enter the value you copied from the field of the same name in Atlan above. Under Attribute Statements (optional) define the following mappings from Name (Name format) on the left to Value on the right: firstName (Basic) - > user.firstName lastName (Basic) - > user.lastName email (Basic) - > user.email group (Basic) - > user.group info 💪 Did you know? For users assigned to Atlan through SSO, the username will be populated from the username mapping. Otherwise, the username will be the email prefix by default, which users can update while registering on Atlan for the first time. Under Group Attribute Statements (optional for SSO login, required for group sync) define the following mappings from Name (Name format) on the left to Filter on the right: memberOf (Unspecified) - > Matches regex [\\s\\S]+ - for examples of how to filter groups with regex in Okta, refer to Okta documentation . This is required if you want to retain group membership in Atlan. While this step is optional for basic SSO authentication, you must configure the memberOf attribute if you want to sync Okta groups to Atlan and use group-based access control At the bottom of the form, click the Next button. Under Help Okta Support understand how you configured this application select I'm an Okta customer adding an internal app and for App type enable This is an internal app that we have created . Click the Finish button. Download Okta's metadata file (in Okta) ​ To download Okta's metadata file, within the Okta app's page: Open the Sign On tab. Under the SAML Signing Certificates heading, in the table, click the Actions link under the Actions column. From the drop-down, click View IdP metadata . Save the XML file, if it appears in plain text in your browser. Assign users to the app (in Okta) ​ To assign users to the app, within the Okta app's page: Open the Assignments tab. At the top of the table, click the Assign button and select Assign to People to add individual users or Assign to Groups to add groups. To the right of each user to whom you want to assign the application, click Assign . To assign the application to a group, you may have to locate it first. For individual users, confirm that the data is correct in the Assign Atlan to People dialog. For groups, complete the fields in the Assign Atlan to Groups dialog if it appears. Click Save and Go Back . Repeat steps 3 to 5 for each user or group to which you want to assign the application. When finished, in the respective dialog box, click Done . Upload Okta's metadata file (in Atlan) ​ To complete the configuration of Okta SSO, within Atlan: From the left menu on any screen, navigate to Admin . Under the Workspace heading, click SSO . Under Choose SAML provider , select Okta and then click Configure . To the right of Identity provider metadata click the Import from XML button. Select the XML file saved from Okta above. At the bottom of the screen, click Save . Congratulations - you have successfully set up Okta SSO in Atlan! 🎉 Did you know? By default, users can now log into Atlan with either Okta SSO or a local Atlan account (via email). To only allow logins via SSO, enable the Enforce SSO option in Atlan. Once SSO is enforced, we recommend asking your Okta administrator to provision access to users through Okta and not directly from Atlan . When access has been provided, a user will be able to log into Atlan directly and their profile will be generated automatically. (Optional) Configure group mappings ​ danger Before you can configure group mapping, you will first need to create groups in Atlan that correspond to the groups you want to map from Okta to Atlan. In addition, you must configure the memberOf attribute and group mapping to retain group membership in Atlan - irrespective of whether or not you enable SCIM . To automatically assign Okta users to Atlan groups based on their Okta groups, within Atlan: From the left menu on any screen, navigate to Admin . Under the Workspace heading, click SSO . Change to the Groups Mapping tab. To the right of each Atlan group listed: Under the SSO Groups column, type the name of the corresponding group in Okta to map to the Atlan group on that row - for example, Data Engineering , Business Analysts , and so on. You will need to provide each Okta group with access to Atlan. Click the Save button on that row. As each user signs up to Atlan, they will be automatically assigned groups in Atlan based on these mappings! 🎉 Did you know? You can configure SCIM provisioning in Okta to manage your users and groups in Atlan. Plus, once you've configured group mapping, you can add the mapped groups to a persona or purpose to auto-assign relevant permissions to users as they sign up in Atlan. Tags: integration connectors Previous How to enable JumpCloud for SSO Next How to enable OneLogin for SSO Choose SSO provider (in Atlan) Set up SAML app (in Okta) Download Okta's metadata file (in Okta) Assign users to the app (in Okta) Upload Okta's metadata file (in Atlan) (Optional) Configure group mappings",
    "topic": "SSO",
    "scraped_at": "2025-09-15 00:27:06"
  },
  {
    "title": "Enable  OneLogin for SSO | Atlan Documentation",
    "url": "https://docs.atlan.com/product/integrations/identity-management/sso/how-tos/enable-onelogin-for-sso",
    "content": "Configure Atlan Integrations Identity Management SSO Get Started How to enable OneLogin for SSO On this page Enable OneLogin for SSO Who can do this? You will need to be an admin user within Atlan to configure SSO. You will also need to work with your OneLogin administrator to carry out the tasks below in OneLogin. danger SSO group mappings are triggered every time a user authenticates in Atlan. A user may need to log out and then log into Atlan again to view the changes. If a user is added to a new group or removed from an existing one in OneLogin, the updates will also be reflected in Atlan. To ensure that the sync is successful, the groups that the user belongs to should be mapped in Atlan, and if a group name has changed in OneLogin, you will need to update the group name in Atlan as well. For any questions about group mapping sync, head over here . To integrate OneLogin SSO for Atlan, complete the following steps. Choose SSO provider (in Atlan) ​ To choose OneLogin as your SSO provider, within Atlan: From the left menu on any screen, navigate to Admin . Under the Workspace heading, click SSO . Under Choose SAML provider , select OneLogin and then click Configure . Under Service provider metadata , copy the Audience (EntityID) , Recipient , ACS (Consumer) URL Validator , and ACS (Consumer) URL . Set up SAML application (in OneLogin) ​ To set up a SAML application, within OneLogin admin console: From the menu along the top, navigate to Applications and then click on Applications . In the upper right, click the Add App button. In the search box, enter saml custom and then click SAML Custom Connector (Advanced) . Under Display Name enter a name for your app, such as Atlan and then click the Save button. Change to the Configuration tab and under Application details enter your Atlan SAML settings: For Audience (EntityID) enter the value you copied from Atlan above. For Recipient enter the value you copied from Atlan above. For ACS (Consumer) URL Validator enter the value you copied from Atlan above. For ACS (Consumer) URL enter the value you copied from Atlan above. For Login URL enter the same value used for the fields above. Change to the SSO tab and change the following: For SAML Signature Algorithm set SHA-512 . Under Login Hint ensure Enable login hint is checked. Change to the Parameters tab and use the circular + icon to add mappings for the following: email - > Email firstName - > First Name lastName - > Last Name In the upper right, click the Save button. Download OneLogin's metadata file (in OneLogin) ​ To download the metadata file for the application, within OneLogin: From the application page, in the upper right navigate to More Actions and click SAML Metadata . (Optional) Map groups to the app (in OneLogin) ​ To map OneLogin groups to the app, within the OneLogin application: In the top left, click the Users tab, and from the dropdown, select Mappings . Under Mappings , click New Mapping to create a new group mapping for Atlan. In the New Mapping dialog, enter the following details: For Name , enter a meaningful name for your group mapping - for example, SSOGroupA . Under Conditions , click the + button and enter the following details: From the attributes dropdown, select Group to map all your OneLogin groups to Atlan. From the operators dropdown, select is . From the values dropdown, select the group name. Under Actions , enter the following details: From the Set role dropdown, select Set memberOf . This is required if you want to retain group membership in Atlan. From the Set memberOf to dropdown, enter the group name. Click Save to confirm your selections. Under Mappings , click New Mapping to remove any group mappings if none are selected. In the New Mapping dialog, enter the following details: For Name , enter a meaningful name for your group mapping - for example, clearMemberOf . Under Conditions , click the + button and enter the following details: From the attributes dropdown, select Group . From the operators dropdown, select is . From the values dropdown, keep the default selection None . Under Actions , enter the following details: From the Set role dropdown, select Set memberOf . From the Set memberOf to dropdown, leave as blank. Click Save to confirm your selections. Under Mappings , click the Reapply All Mappings tab, and in the corresponding screen, click Continue to confirm. In the top left, click the Applications tab, and from the dropdown, click Applications . Under Applications , select your SAML application. From the left menu of SAML Custom Connector (Advanced) , click Parameters . In the upper right of the parameters page, click the + button to add a new parameter. In the New Field dialog, enter the following details: For Field name , enter memberOf . For Flags , check the Include in SAML assertion box. Click Save to proceed to the next step. In the corresponding Edit Field memberOf dialog, from the Value dropdown, select MemberOf . Click Save to confirm your selections. If any of your OneLogin users do not belong to any groups, you can either add them to an existing group or create a new one. Once you have configured group mapping in Atlan , they will be able to log in to Atlan and assigned the same permissions as their OneLogin group. Upload OneLogin's metadata file (in Atlan) ​ To complete the configuration of OneLogin SSO, within Atlan: From the left menu on any screen, navigate to Admin . Under the Workspace heading, click SSO . Under Choose SAML provider , select OneLogin and then click Configure . To the right of Identity provider metadata click the Import from XML button. Select the onelogin_metadata_1234567.xml file downloaded from OneLogin above. At the bottom of the screen, click Save . Congratulations - you have successfully set up OneLogin SSO in Atlan! 🎉 Did you know? By default, users can now log into Atlan with either OneLogin SSO or a local Atlan account (via email). To only allow logins via SSO, enable the Enforce SSO option in Atlan. Once SSO is enforced, we recommend asking your OneLogin administrator to provision access to users through OneLogin and not directly from Atlan . When access has been provided, a user will be able to log into Atlan directly and their profile will be generated automatically. (Optional) Configure group mappings ​ danger Before you can configure group mapping, you will first need to create groups in Atlan that correspond to the groups you want to map from OneLogin to Atlan. In addition, you must configure the memberOf attribute and group mapping to retain group membership in Atlan. To automatically assign OneLogin users to Atlan groups based on their OneLogin groups, within Atlan: From the left menu on any screen, navigate to Admin . Under the Workspace heading, click SSO . Change to the Groups Mapping tab. To the right of each Atlan group listed: Under the SSO Groups column, type the name of the corresponding group in OneLogin to map to the Atlan group on that row - for example, Data Engineering , Business Analysts , and so on. You will need to provide each OneLogin group with access to Atlan. Click the Save button on that row. As each user signs up to Atlan, they will be automatically assigned groups in Atlan based on these mappings! 🎉 Did you know? Once you've configured group mapping, you can add the mapped groups to a persona or purpose to auto-assign relevant permissions to users as they sign up in Atlan. Tags: integration connectors Previous How to enable Okta for SSO Next How to enable SAML 2.0 for SSO Choose SSO provider (in Atlan) Set up SAML application (in OneLogin) Download OneLogin's metadata file (in OneLogin) (Optional) Map groups to the app (in OneLogin) Upload OneLogin's metadata file (in Atlan) (Optional) Configure group mappings",
    "topic": "SSO",
    "scraped_at": "2025-09-15 00:27:07"
  },
  {
    "title": "Enable  SAML 2.0 for SSO | Atlan Documentation",
    "url": "https://docs.atlan.com/product/integrations/identity-management/sso/how-tos/enable-saml-2-0-for-sso",
    "content": "Configure Atlan Integrations Identity Management SSO Get Started How to enable SAML 2.0 for SSO On this page Enable SAML 2.0 for SSO Who can do this? You will need to be an admin user within Atlan to configure SSO. You will also need to work with your SAML 2.0 administrator to carry out the tasks below in your custom IdP. danger SSO group mappings are triggered every time a user authenticates in Atlan. A user may need to log out and then log into Atlan again to view the changes. If a user is added to a new group or removed from an existing one in SAML 2.0, the updates will also be reflected in Atlan. To ensure that the sync is successful, the groups that the user belongs to should be mapped in Atlan, and if a group name has changed in SAML 2.0, you will need to update the group name in Atlan as well. For any questions about group mapping sync, head over here . To integrate SAML 2.0 SSO for Atlan, complete the following steps. Choose SSO provider (in Atlan) ​ To choose SAML 2.0 as your SSO provider, within Atlan: From the left menu on any screen, navigate to Admin . Under the Workspace heading, click SSO . Under Choose SAML provider , select SAML 2.0 and then click Configure . For Alias , type in an alias for the SAML 2.0 connection and then click Next . Under Service provider metadata , copy the Atlan SAML Assertion URL and Atlan Audience URI (SP Entity ID) . Set up SAML app (in custom IdP) ​ If you have PingFederate as your IdP, refer to SSO integration with PingFederate using SAML for the SAML assertion URL to use. To set up a SAML app within your custom IdP: Create a new SAML application in your IdP with the name Atlan . For Entity/Issuer ID , enter the Atlan Audience URI (SP Entity ID) value you copied from above. For Assertion Consumer Service (ACS) URL , enter the Atlan SAML Assertion URL value you copied from above. Add the required users and groups to the application. Configure the IdP to return the following attributes in the SAML response: firstName lastName email memberOf (listing the user's group memberships, which will be required for group mapping in Atlan) Save the SAML metadata XML file for the SSO URL and X.509 public certificate file of the IdP. danger The SSO URL must be accessible from Atlan via an internet connection. Configure IdP details (in Atlan) ​ To complete the configuration of SAML 2.0 SSO, within Atlan: From the left menu on any screen, navigate to Admin . Under the Workspace heading, click SSO . Under Choose SAML provider , select SAML 2.0 and then click Configure . For Alias , type in an alias for the SAML 2.0 connection and then click Next . To the right of Identity provider metadata, click the Import from XML button. Select the XML file saved from the IdP above. For Attribute Mapper , modify the IdP attribute names for email, first name, and last name if these will be different in the IdP SAML response. (Optional) For Customize , under Sign in button text , type any custom message you'd like your users to see on the Atlan login screen. At the bottom of the screen, click Save . Congratulations - you have successfully set up SSO for your custom IdP in Atlan! 🎉 Did you know? By default, users can now log into Atlan with either SAML 2.0 SSO or a local Atlan account (via email). To only allow logins via SSO, enable the Enforce SSO option in Atlan. Once SSO is enforced, we recommend asking your SAML 2.0 administrator to provision access to users through your custom IdP and not directly from Atlan . When access has been provided, a user will be able to log into Atlan directly and their profile will be generated automatically. (Optional) Configure group mappings ​ danger Before you can configure group mapping, you will first need to create groups in Atlan that correspond to the groups you want to map from your custom IdP to Atlan. In addition, you must configure the memberOf attribute and group mapping to retain group membership in Atlan. To automatically assign SSO users to Atlan groups based on their custom IdP groups, within Atlan: From the left menu on any screen, navigate to Admin . Under the Workspace heading, click SSO . Change to the Groups Mapping tab. To the right of each Atlan group listed: Under the SSO Groups column, type the name of the corresponding group in your custom IdP to map to the Atlan group on that row - for example, Data Engineering , Business Analysts , and so on. You will need to provide each custom IdP group with access to Atlan. Click the Save button on that row. As each user signs up to Atlan, they will be automatically assigned groups in Atlan based on these mappings! 🎉 Did you know? Once you've configured group mapping, you can add the mapped groups to a persona or purpose to auto-assign relevant permissions to users as they sign up in Atlan. Tags: integration connectors Previous How to enable OneLogin for SSO Next Authenticate SSO credentials to query data Choose SSO provider (in Atlan) Set up SAML app (in custom IdP) Configure IdP details (in Atlan) (Optional) Configure group mappings",
    "topic": "SSO",
    "scraped_at": "2025-09-15 00:27:08"
  },
  {
    "title": "Okta first-time login authentication error | Atlan Documentation",
    "url": "https://docs.atlan.com/product/integrations/identity-management/sso/faq/okta-first-time-login-error",
    "content": "Configure Atlan Integrations Identity Management SSO Troubleshooting Okta first-time login authentication error On this page Okta first-time login authentication error Why do I get an authentication error when logging in via Okta for the first time? ​ It is possible that your Okta account is not yet linked with your Atlan account. Here are two ways to troubleshoot: Ensure that the service provider metadata details are copied accurately. If you're logged into Atlan, please log out from Atlan. Once you've logged out of Atlan, clear your browser cache and then continue. Tags: integration connectors faq-integrations Previous PingFederate SSO 404 error Next Google Dashboard login error",
    "topic": "SSO",
    "scraped_at": "2025-09-15 00:27:08"
  },
  {
    "title": "Authentication and authorization | Atlan Documentation",
    "url": "https://docs.atlan.com/platform/concepts/authentication-and-authorization",
    "content": "Get Started Core Concepts Authentication and authorization On this page Authentication and authorization Atlan supports the following authentication methods: Basic authentication ​ Atlan initially comes with basic or username-password authentication. Admins can invite new users to log into Atlan. When a new user opens the invitation link, they will be able to set up their user profile, including username and password. However, Atlan does not recommend using basic authentication. Instead, admins should configure and enforce SSO authentication . SSO authentication ​ SSO using SAML 2.0 ​ Atlan supports single sign-on (SSO), allowing admins to configure SSO authentication. Atlan currently supports the following SSO providers: Azure AD Google JumpCloud Okta OneLogin Custom IdP SSO using SCIM ​ System for Cross-domain Identity Management (SCIM) provisioning works in combination with SSO. Atlan currently supports SCIM provisioning for the following SSO providers: Azure AD Okta Authorization ​ Role-based access control (RBAC) ​ Atlan implements role-based access control (RBAC) to ensure that users have the minimum level of access required to perform their tasks. Access rights are assigned based on roles, and users are granted permissions according to their responsibilities. A system owner or an authorized party must approve any additional permissions. Atlan adheres to the principle of least privilege, ensuring that users are only granted the level of access necessary to perform their job functions. User access review (UAR) ​ Atlan recommends that admins perform access reviews of users, admins, and service accounts on a quarterly basis to ensure that appropriate access levels are maintained. Access reviews should also be documented. Identity and access management ​ For centralized management of groups and users, Atlan uses granular access policies . Admins can define policies to control both which actions a user can take and against which assets. These can be as broad as entire databases down to individual columns. Organizations can even build policies based on asset classification. This opens up the ability to restrict access to sensitive data like Personally Identifiable Information (PII) - an essential feature in the GDPR era. Atlan denies access by default , and explicit denials override any grants . You can even deny admin users access to assets, if you want. Roles ​ You must assign every user in Atlan a user role . These control basic levels of access. Groups ​ You can also add users to groups . Groups provide a more maintainable mechanism for applying access controls. Policies ​ You can define access policies for both users and groups. Through these policies you can restrict which users can take which actions on which assets. For example, you can set up tags such as PII and apply this to data assets like tables. You can also configure the tag to propagate downstream to any columns or tables created from them. You can then define access controls based on these tags to restrict access to tagged assets. If Atlan propagates tags for you to derived assets, the access control is automatically applied to those derived assets as well. Tags: atlan documentation Previous Atlan's open API Next Data and metadata persistence Basic authentication SSO authentication Authorization Identity and access management",
    "topic": "SSO",
    "scraped_at": "2025-09-15 00:27:09"
  },
  {
    "title": "Introductory walkthrough - Developer",
    "url": "https://developer.atlan.com/getting-started/",
    "content": "Developer Toolkits Toolkits Packages Packages Running example Define via template Render your package Develop your logic Test your logic Release (GA) Widget reference Typedefs Typedefs Running example Define via template Render your model Test your model Bind the SDKs Write integration test Test baseline UX Release (GA) Testing Testing Overview Getting started Getting started Other important concepts Documentation conventions Integration options Integration options CLI dbt Java Python Kotlin Scala Clojure Go Events Raw REST API Site map Common tasks Common tasks Common asset actions Common asset actions Certify assets Manage announcements Change description Change owners Tag (classify) assets Change custom metadata Link terms to assets Link domains to assets Manage asset READMEs Add asset resources Manage asset relationships with attributes Asset CRUD operations Asset CRUD operations Create an asset Retrieve an asset Update an asset Delete an asset Find and apply suggestions Restore an asset Review changes to an asset Review accesses of an asset Get all assets that... Get all assets that... Search for assets Search examples Lineage Lineage Manage lineage Traverse lineage Bulk updates Bulk updates Combine multiple operations Update multiple assets End-to-end bulk update Event handling Event handling Webhook <> Lambda Webhook <> Lambda Set up Lambda Code your logic Deploy your code Set up webhook Manage your webhook Asset-specific Asset-specific Glossary operations Glossary operations Create objects Retrieval by name Create a hierarchy Categorize terms Traverse category hierarchy Creating assets Creating assets Manage relational assets Manage cube assets Manage object store assets Manage object store assets Manage AWS S3 assets Manage Azure Data Lake Storage assets Manage Google Cloud Storage assets Manage BI assets Manage BI assets Manage Google Data Studio assets Manage Preset assets Manage Superset assets Manage API assets Manage file assets Manage Airflow assets Manage Kafka assets Manage Azure Event Hub assets Manage App assets Manage AI assets Manage Insights assets Manage QuickSight assets Manage DocumentDB assets Manage Data Quality assets Manage Data Quality assets Manage Data Quality rules Connector types and icons Data mesh Data mesh Manage data domains Manage data products Data contracts Data contracts Manage data contracts (via CLI) Manage data contracts (via SDK) Profiling and popularity Profiling and popularity Manage column profiling Manage popularity Governance structures Governance structures Custom metadata Custom metadata Create custom metadata Retrieve custom metadata Update custom metadata Delete custom metadata Manage badges Manage options (enumerations) Tag management Tag management Manage Atlan tags Monitor propagation Access control Access control Manage personas Manage purposes Manage policies Access events API token management Run queries on an asset Users and groups Users and groups Create users and groups Retrieve users and groups Update users and groups Delete users and groups Manage SSO group mapping Packages and workflows Packages and workflows Manage workflows Manage workflow schedules Supported packages Supported packages Athena assets Asset import Asset export (basic) API token connection admin BigQuery assets Connection delete Confluent Kafka assets dbt assets DynamoDB assets Databricks assets Databricks miner Fivetran enrichment Glue assets Looker assets Lineage builder Lineage generator (no transformation) MongoDB assets Oracle assets Postgres assets PowerBI assets Redshift assets Relational assets builder Snowflake assets Snowflake miner Sigma assets SQL Server assets Tableau assets File management File management Reference Reference Searching Searching Querying Querying Term-level queries Full text queries Rank feature queries Compound queries Searchable fields Searchable fields Common search fields Glossary-specific search fields Limiting details Sorting search results Paging search results Aggregating search results Events Events Event triggers Event triggers Asset is created Asset is updated Asset is deleted Custom metadata is added Custom metadata is removed Asset is tagged Asset is untagged Lineage is created Event types Event types ENTITY_CREATE ENTITY_UPDATE ENTITY_DELETE BUSINESS_ATTRIBUTE_UPDATE CLASSIFICATION_ADD CLASSIFICATION_DELETE Specifications Specifications Data contract spec OpenLineage spec Types Types Core Core Referenceable Asset Connection Catalog Tag TagAttachment Access control Access control Persona Purpose AuthPolicy AuthService BusinessPolicy BusinessPolicyException BusinessPolicyIncident BusinessPolicyLog Incident Lineage Lineage ColumnProcess BIProcess Resources Resources Link File Readme ReadmeTemplate Badge Workflows Workflows Workflow WorkflowRun Task Structs Structs Action AuthPolicyCondition AuthPolicyValiditySchedule AwsCloudWatchMetric AwsTag AzureTag BadgeCondition BusinessPolicyRule ByocSsoConfig ColumnValueFrequencyMap DbtMetricFilter DbtJobRun GoogleLabel GoogleTag Histogram KafkaTopicConsumption MCRuleComparison MCRuleSchedule PopularityInsights SourceTagAttachment SourceTagAttachmentValue SourceTagAttribute StarredDetails Enumerations Enumerations AdfActivityState ADLSAccessTier ADLSAccountStatus ADLSEncryptionTypes ADLSLeaseState ADLSLeaseStatus ADLSObjectArchiveStatus ADLSObjectType ADLSPerformance ADLSProvisionState ADLSReplicationType ADLSStorageKind APIQueryParamTypeEnum atlas_operation AtlasGlossaryCategoryType AtlasGlossaryTermType AtlasGlossaryType AtlasGlossaryTermAssignmentStatus AtlasGlossaryTermRelationshipStatus AuthPolicyCategory AuthPolicyResourceCategory AuthPolicyType certificate_status DataGlossary DataProductCriticality DataProductSensitivity DataProductStatus DataProductVisibility DomoCardType DynamoDBSecondaryIndexProjectionType DynamoDBStatus file_type FivetranConnectorStatus FivetranProcessStatus google_datastudio_asset_type icon_type incident_severity kafka_topic_cleanup_policy kafka_topic_compression_type matillion_job_type ModelCardinalityType MongoDBCollectionValidationAction MongoDBCollectionValidationLevel OpenLineageRunState powerbi_endorsement query_username_strategy quick_sight_analysis_status quick_sight_dataset_field_type quick_sight_dataset_import_mode quick_sight_folder_type SchemaRegistrySchemaCompatibility SchemaRegistrySchemaType SourceCostUnitType table_type WorkflowRunStatus WorkflowRunType WorkflowStatus WorkflowType Abstractions Abstractions BI Cloud Insight ObjectStore EventStore DataQuality Metric NoSQL SchemaRegistry Glossary Glossary AtlasGlossary AtlasGlossaryCategory AtlasGlossaryTerm Data mesh Data mesh DataDomain DataProduct DataContract Stakeholder StakeholderTitle Relational databases Relational databases Database Schema Table View MaterialisedView Column Query TablePartition CalculationView BigqueryTag DatabricksUnityCatalogTag SnowflakeDynamicTable SnowflakePipe SnowflakeStream SnowflakeTag Procedure Function SQL Query organization Query organization Namespace Collection Folder Cubes Cubes Cube CubeDimension CubeHierarchy CubeField APIs APIs APIPath APISpec APIObject APIQuery APIField Airflow Airflow AirflowDag AirflowTask Amazon Amazon Amazon DynamoDB Amazon DynamoDB DynamoDBTable DynamoDBSecondaryIndex DynamoDBGlobalSecondaryIndex DynamoDBLocalSecondaryIndex AWS S3 AWS S3 S3Bucket S3Object Amazon QuickSight Amazon QuickSight QuickSightAnalysis QuickSightAnalysisVisual QuickSightDashboard QuickSightDashboardVisual QuickSightDataset QuickSightDatasetField QuickSightFolder Anaplan Anaplan AnaplanWorkspace AnaplanApp AnaplanPage AnaplanModel AnaplanModule AnaplanList AnaplanSystemDimension AnaplanDimension AnaplanLineItem AnaplanView Anomalo Anomalo AnomaloCheck App App Application ApplicationField Microsoft Azure Microsoft Azure Azure Data Factory Azure Data Factory AdfActivity AdfDataflow AdfDataset AdfLinkedservice AdfPipeline Azure Data Lake Storage Azure Data Lake Storage ADLSAccount ADLSContainer ADLSObject Azure Event Hub Azure Event Hub AzureEventHub AzureEventHubConsumerGroup Azure Service Bus Azure Service Bus AzureServiceBusNamespace AzureServiceBusSchema AzureServiceBusTopic Cosmos DB Cosmos DB CosmosMongoDBAccount CosmosMongoDBCollection CosmosMongoDBDatabase Cognite Cognite Cognite3DModel CogniteAsset CogniteEvent CogniteFile CogniteSequence CogniteTimeseries Custom Custom CustomEntity Dataverse Dataverse DataverseEntity DataverseAttribute dbt dbt DbtColumnProcess DbtMetric DbtModel DbtModelColumn DbtProcess DbtSource DbtTag DbtTest Domo Domo DomoCard DomoDashboard DomoDataset DomoDatasetColumn DocumentDB DocumentDB DocumentDBCollection DocumentDBDatabase Fivetran Fivetran FivetranConnector Google Google Google Cloud Storage Google Cloud Storage GCSBucket GCSObject Google Data Studio Google Data Studio DataStudioAsset IBM IBM IBM Cognos Cognos CognosDashboard CognosDatasource CognosExploration CognosFile CognosFolder CognosModule CognosPackage CognosReport Kafka Kafka KafkaConsumerGroup KafkaTopic Looker Looker LookerDashboard LookerExplore LookerField LookerFolder LookerLook LookerModel LookerProject LookerQuery LookerTile LookerView Matillion Matillion MatillionComponent MatillionGroup MatillionJob MatillionProject Metabase Metabase MetabaseCollection MetabaseDashboard MetabaseQuestion MicroStrategy MicroStrategy MicroStrategyAttribute MicroStrategyCube MicroStrategyDocument MicroStrategyDossier MicroStrategyFact MicroStrategyMetric MicroStrategyProject MicroStrategyReport MicroStrategyVisualization Mode Mode ModeChart ModeCollection ModeQuery ModeReport ModeWorkspace Models Models ModelAttribute ModelAttributeAssociation ModelDataModel ModelEntity ModelEntityAssociation ModelVersion MongoDB MongoDB MongoDBCollection MongDBDatabase Monte Carlo Monte Carlo MCIncident MCMonitor Power BI Power BI Power BI PowerBIColumn PowerBIDashboard PowerBIDataflow PowerBIDataflowEntityColumn PowerBIDataset PowerBIDatasource PowerBIMeasure PowerBIPage PowerBIReport PowerBITable PowerBITile PowerBIWorkspace Preset Preset PresetChart PresetDashboard PresetDataset PresetWorkspace Qlik Qlik QlikApp QlikChart QlikDataset QlikSheet QlikSpace QlikStream Redash Redash RedashDashboard RedashQuery RedashVisualization Salesforce Salesforce SalesforceDashboard SalesforceField SalesforceObject SalesforceOrganization SalesforceReport SaaS Sigma Sigma SigmaWorkbook SigmaPage SigmaDataElement SigmaDataElementField SigmaDataset SigmaDatasetColumn Sisense Sisense SisenseDashboard SisenseDatamodel SisenseDatamodelTable SisenseFolder SisenseWidget Soda Soda SodaCheck Spark Spark SparkJob Superset Superset SupersetChart SupersetDashboard SupersetDataset Tableau Tableau TableauCalculatedField TableauDashboard TableauDatasource TableauDatasourceField TableauFlow TableauMetric TableauProject TableauSite TableauWorkbook TableauWorksheet ThoughtSpot ThoughtSpot ThoughtspotAnswer ThoughtspotColumn ThoughtspotDashlet ThoughtspotLiveboard ThoughtspotTable ThoughtspotView ThoughtspotWorksheet Endpoints Table of contents Setting up Retrieving metadata What is an asset? When you know the asset When you need to find it first Updating metadata Importance of identifiers Limit to changes only Bulk changes Where to go from here An introductory walkthrough ¶ Atlan University You might also like our Atlan Platform Essentials certification . Not sure where to start? Allow us to introduce Atlan development through example. 1 Setting up ¶ We strongly recommend using one of our SDKs to simplify the development process. As a first step, set one up: Java Python Kotlin Go The SDK is available on Maven Central , ready to be included in your project: build.gradle.kts repositories { mavenCentral () } dependencies { implementation ( \"com.atlan:atlan-java:+\" ) // (1) testRuntimeOnly ( \"ch.qos.logback:logback-classic:1.2.11\" ) // (2) } Include the latest version of the Java SDK in your project as a dependency. You can also give a specific version instead of the + , if you'd like. The Java SDK uses slf4j for logging purposes. You can include logback as a simple binding mechanism to send any logging information out to your console (standard out). Provide two values to create an Atlan client: AtlanLiveTest.java 1 2 3 4 5 6 7 8 9 10 11 12 import com.atlan.AtlanClient ; public class AtlanLiveTest { public static void main ( String [] args ) { try ( AtlanClient client = new AtlanClient ( \"https://tenant.atlan.com\" , // (1) \"...\" ) // (2) ) { // (3) } } } Provide your Atlan tenant URL as the first parameter. You can also read the value from an environment variable, if you leave out both parameters. Provide your API token as the second parameter. You can also read the value from another environment variable, by leaving out this parameter. You can then start writing some actual code to run within a static main method. (We'll show some examples of this further below.) Once the block is complete, any resources held by the client (i.e. for caching) will be automatically released. Set up logging for SDK You can also checkout to the advanced configuration section of the SDK to learn about how to set up logging. The SDK is available on PyPI . You can use pip to install it as follows: Install the SDK pip install pyatlan Provide two values to create an Atlan client: atlan_live_test.py 1 2 3 4 5 6 from pyatlan.client.atlan import AtlanClient client = AtlanClient ( base_url = \"https://tenant.atlan.com\" , # (1) api_key = \"...\" # (2) ) Provide your Atlan tenant URL to the base_url parameter. (You can also do this through environment variables .) Provide your API token to the api_key parameter. (You can also do this through environment variables .) Set up logging for SDK You can also checkout to the advanced configuration section of the SDK to learn about how to set up logging. The SDK is available on Maven Central , ready to be included in your project: build.gradle.kts repositories { mavenCentral () } dependencies { implementation ( \"com.atlan:atlan-java:+\" ) // (1) implementation ( \"io.github.microutils:kotlin-logging-jvm:3.0.5\" ) // (2) implementation ( \"org.slf4j:slf4j-simple:2.0.7\" ) } Include the latest version of the Java SDK in your project as a dependency. You can also give a specific version instead of the + , if you'd like. The Java SDK uses slf4j for logging purposes. You can include slf4j-simple as a simple binding mechanism to send any logging information out to your console (standard out), along with the kotlin-logging-jvm microutil. Provide two values to create an Atlan client: AtlanLiveTest.kt 1 2 3 4 5 6 7 8 9 10 import com.atlan.AtlanClient; fun main () { AtlanClient ( \"https://tenant.atlan.com\" , // (1) \"...\" // (2) ). use { client -> // (3) } } Provide your Atlan tenant URL as the first parameter. You can also read the value from an environment variable, if you leave out both parameters. Provide your API token as the second parameter. You can also read the value from another environment variable, by leaving out this parameter. You ",
    "topic": "API_SDK",
    "scraped_at": "2025-09-15 00:27:10"
  },
  {
    "title": "Integration options - Developer",
    "url": "https://developer.atlan.com/sdks/",
    "content": "Developer Toolkits Toolkits Packages Packages Running example Define via template Render your package Develop your logic Test your logic Release (GA) Widget reference Typedefs Typedefs Running example Define via template Render your model Test your model Bind the SDKs Write integration test Test baseline UX Release (GA) Testing Testing Overview Getting started Getting started Other important concepts Documentation conventions Integration options Integration options CLI dbt Java Python Kotlin Scala Clojure Go Events Raw REST API Site map Common tasks Common tasks Common asset actions Common asset actions Certify assets Manage announcements Change description Change owners Tag (classify) assets Change custom metadata Link terms to assets Link domains to assets Manage asset READMEs Add asset resources Manage asset relationships with attributes Asset CRUD operations Asset CRUD operations Create an asset Retrieve an asset Update an asset Delete an asset Find and apply suggestions Restore an asset Review changes to an asset Review accesses of an asset Get all assets that... Get all assets that... Search for assets Search examples Lineage Lineage Manage lineage Traverse lineage Bulk updates Bulk updates Combine multiple operations Update multiple assets End-to-end bulk update Event handling Event handling Webhook <> Lambda Webhook <> Lambda Set up Lambda Code your logic Deploy your code Set up webhook Manage your webhook Asset-specific Asset-specific Glossary operations Glossary operations Create objects Retrieval by name Create a hierarchy Categorize terms Traverse category hierarchy Creating assets Creating assets Manage relational assets Manage cube assets Manage object store assets Manage object store assets Manage AWS S3 assets Manage Azure Data Lake Storage assets Manage Google Cloud Storage assets Manage BI assets Manage BI assets Manage Google Data Studio assets Manage Preset assets Manage Superset assets Manage API assets Manage file assets Manage Airflow assets Manage Kafka assets Manage Azure Event Hub assets Manage App assets Manage AI assets Manage Insights assets Manage QuickSight assets Manage DocumentDB assets Manage Data Quality assets Manage Data Quality assets Manage Data Quality rules Connector types and icons Data mesh Data mesh Manage data domains Manage data products Data contracts Data contracts Manage data contracts (via CLI) Manage data contracts (via SDK) Profiling and popularity Profiling and popularity Manage column profiling Manage popularity Governance structures Governance structures Custom metadata Custom metadata Create custom metadata Retrieve custom metadata Update custom metadata Delete custom metadata Manage badges Manage options (enumerations) Tag management Tag management Manage Atlan tags Monitor propagation Access control Access control Manage personas Manage purposes Manage policies Access events API token management Run queries on an asset Users and groups Users and groups Create users and groups Retrieve users and groups Update users and groups Delete users and groups Manage SSO group mapping Packages and workflows Packages and workflows Manage workflows Manage workflow schedules Supported packages Supported packages Athena assets Asset import Asset export (basic) API token connection admin BigQuery assets Connection delete Confluent Kafka assets dbt assets DynamoDB assets Databricks assets Databricks miner Fivetran enrichment Glue assets Looker assets Lineage builder Lineage generator (no transformation) MongoDB assets Oracle assets Postgres assets PowerBI assets Redshift assets Relational assets builder Snowflake assets Snowflake miner Sigma assets SQL Server assets Tableau assets File management File management Reference Reference Searching Searching Querying Querying Term-level queries Full text queries Rank feature queries Compound queries Searchable fields Searchable fields Common search fields Glossary-specific search fields Limiting details Sorting search results Paging search results Aggregating search results Events Events Event triggers Event triggers Asset is created Asset is updated Asset is deleted Custom metadata is added Custom metadata is removed Asset is tagged Asset is untagged Lineage is created Event types Event types ENTITY_CREATE ENTITY_UPDATE ENTITY_DELETE BUSINESS_ATTRIBUTE_UPDATE CLASSIFICATION_ADD CLASSIFICATION_DELETE Specifications Specifications Data contract spec OpenLineage spec Types Types Core Core Referenceable Asset Connection Catalog Tag TagAttachment Access control Access control Persona Purpose AuthPolicy AuthService BusinessPolicy BusinessPolicyException BusinessPolicyIncident BusinessPolicyLog Incident Lineage Lineage ColumnProcess BIProcess Resources Resources Link File Readme ReadmeTemplate Badge Workflows Workflows Workflow WorkflowRun Task Structs Structs Action AuthPolicyCondition AuthPolicyValiditySchedule AwsCloudWatchMetric AwsTag AzureTag BadgeCondition BusinessPolicyRule ByocSsoConfig ColumnValueFrequencyMap DbtMetricFilter DbtJobRun GoogleLabel GoogleTag Histogram KafkaTopicConsumption MCRuleComparison MCRuleSchedule PopularityInsights SourceTagAttachment SourceTagAttachmentValue SourceTagAttribute StarredDetails Enumerations Enumerations AdfActivityState ADLSAccessTier ADLSAccountStatus ADLSEncryptionTypes ADLSLeaseState ADLSLeaseStatus ADLSObjectArchiveStatus ADLSObjectType ADLSPerformance ADLSProvisionState ADLSReplicationType ADLSStorageKind APIQueryParamTypeEnum atlas_operation AtlasGlossaryCategoryType AtlasGlossaryTermType AtlasGlossaryType AtlasGlossaryTermAssignmentStatus AtlasGlossaryTermRelationshipStatus AuthPolicyCategory AuthPolicyResourceCategory AuthPolicyType certificate_status DataGlossary DataProductCriticality DataProductSensitivity DataProductStatus DataProductVisibility DomoCardType DynamoDBSecondaryIndexProjectionType DynamoDBStatus file_type FivetranConnectorStatus FivetranProcessStatus google_datastudio_asset_type icon_type incident_severity kafka_topic_cleanup_policy kafka_topic_compression_type matillion_job_type ModelCardinalityType MongoDBCollectionValidationAction MongoDBCollectionValidationLevel OpenLineageRunState powerbi_endorsement query_username_strategy quick_sight_analysis_status quick_sight_dataset_field_type quick_sight_dataset_import_mode quick_sight_folder_type SchemaRegistrySchemaCompatibility SchemaRegistrySchemaType SourceCostUnitType table_type WorkflowRunStatus WorkflowRunType WorkflowStatus WorkflowType Abstractions Abstractions BI Cloud Insight ObjectStore EventStore DataQuality Metric NoSQL SchemaRegistry Glossary Glossary AtlasGlossary AtlasGlossaryCategory AtlasGlossaryTerm Data mesh Data mesh DataDomain DataProduct DataContract Stakeholder StakeholderTitle Relational databases Relational databases Database Schema Table View MaterialisedView Column Query TablePartition CalculationView BigqueryTag DatabricksUnityCatalogTag SnowflakeDynamicTable SnowflakePipe SnowflakeStream SnowflakeTag Procedure Function SQL Query organization Query organization Namespace Collection Folder Cubes Cubes Cube CubeDimension CubeHierarchy CubeField APIs APIs APIPath APISpec APIObject APIQuery APIField Airflow Airflow AirflowDag AirflowTask Amazon Amazon Amazon DynamoDB Amazon DynamoDB DynamoDBTable DynamoDBSecondaryIndex DynamoDBGlobalSecondaryIndex DynamoDBLocalSecondaryIndex AWS S3 AWS S3 S3Bucket S3Object Amazon QuickSight Amazon QuickSight QuickSightAnalysis QuickSightAnalysisVisual QuickSightDashboard QuickSightDashboardVisual QuickSightDataset QuickSightDatasetField QuickSightFolder Anaplan Anaplan AnaplanWorkspace AnaplanApp AnaplanPage AnaplanModel AnaplanModule AnaplanList AnaplanSystemDimension AnaplanDimension AnaplanLineItem AnaplanView Anomalo Anomalo AnomaloCheck App App Application ApplicationField Microsoft Azure Microsoft Azure Azure Data Factory Azure Data Factory AdfActivity AdfDataflow AdfDataset AdfLinkedservice AdfPipeline Azure Data Lake Storage Azure Data Lake Storage ADLSAccount ADLSContainer ADLSObject Azure Event Hub Azure Event Hub AzureEventHub AzureEventHubConsumerGroup Azure Service Bus Azure Service Bus AzureServiceBusNamespace AzureServiceBusSchema AzureServiceBusTopic Cosmos DB Cosmos DB CosmosMongoDBAccount CosmosMongoDBCollection CosmosMongoDBDatabase Cognite Cognite Cognite3DModel CogniteAsset CogniteEvent CogniteFile CogniteSequence CogniteTimeseries Custom Custom CustomEntity Dataverse Dataverse DataverseEntity DataverseAttribute dbt dbt DbtColumnProcess DbtMetric DbtModel DbtModelColumn DbtProcess DbtSource DbtTag DbtTest Domo Domo DomoCard DomoDashboard DomoDataset DomoDatasetColumn DocumentDB DocumentDB DocumentDBCollection DocumentDBDatabase Fivetran Fivetran FivetranConnector Google Google Google Cloud Storage Google Cloud Storage GCSBucket GCSObject Google Data Studio Google Data Studio DataStudioAsset IBM IBM IBM Cognos Cognos CognosDashboard CognosDatasource CognosExploration CognosFile CognosFolder CognosModule CognosPackage CognosReport Kafka Kafka KafkaConsumerGroup KafkaTopic Looker Looker LookerDashboard LookerExplore LookerField LookerFolder LookerLook LookerModel LookerProject LookerQuery LookerTile LookerView Matillion Matillion MatillionComponent MatillionGroup MatillionJob MatillionProject Metabase Metabase MetabaseCollection MetabaseDashboard MetabaseQuestion MicroStrategy MicroStrategy MicroStrategyAttribute MicroStrategyCube MicroStrategyDocument MicroStrategyDossier MicroStrategyFact MicroStrategyMetric MicroStrategyProject MicroStrategyReport MicroStrategyVisualization Mode Mode ModeChart ModeCollection ModeQuery ModeReport ModeWorkspace Models Models ModelAttribute ModelAttributeAssociation ModelDataModel ModelEntity ModelEntityAssociation ModelVersion MongoDB MongoDB MongoDBCollection MongDBDatabase Monte Carlo Monte Carlo MCIncident MCMonitor Power BI Power BI Power BI PowerBIColumn PowerBIDashboard PowerBIDataflow PowerBIDataflowEntityColumn PowerBIDataset PowerBIDatasource PowerBIMeasure PowerBIPage PowerBIReport PowerBITable PowerBITile PowerBIWorkspace Preset Preset PresetChart PresetDashboard PresetDataset PresetWorkspace Qlik Qlik QlikApp QlikChart QlikDataset QlikSheet QlikSpace QlikStream Redash Redash RedashDashboard RedashQuery RedashVisualization Salesforce Salesforce SalesforceDashboard SalesforceField SalesforceObject SalesforceOrganization SalesforceReport SaaS Sigma Sigma SigmaWorkbook SigmaPage SigmaDataElement SigmaDataElementField SigmaDataset SigmaDatasetColumn Sisense Sisense SisenseDashboard SisenseDatamodel SisenseDatamodelTable SisenseFolder SisenseWidget Soda Soda SodaCheck Spark Spark SparkJob Superset Superset SupersetChart SupersetDashboard SupersetDataset Tableau Tableau TableauCalculatedField TableauDashboard TableauDatasource TableauDatasourceField TableauFlow TableauMetric TableauProject TableauSite TableauWorkbook TableauWorksheet ThoughtSpot ThoughtSpot ThoughtspotAnswer ThoughtspotColumn ThoughtspotDashlet ThoughtspotLiveboard ThoughtspotTable ThoughtspotView ThoughtspotWorksheet Endpoints Integration options ¶ Throughout the portal you can focus on your preferred integration approach (and switch between them as you like): CLI Use the Atlan CLI to manage data contracts for assets in Atlan. Get started with CLI dbt Use dbt's meta field to enrich metadata resources straight from dbt into Atlan. Get started with dbt Java Pull our Java SDK from Maven Central, just like any other dependency. Get started with Java Python Pull our Python SDK from PyPI, just like any other dependency. Get started with Python Kotlin Pull our Java SDK from Maven Central, just like any other dependency. Get started with Kotlin Scala Pull our Java SDK from Maven Central, just like any other dependency. Get started with Scala Clojure Pull our Java SDK from Maven Central, just like any other dependency. Get started with Clojure Go Pull our Go SDK from GitHub, just like any other dependency. Get started with Go Events Tap into events Atlan produces to take immediate action, as metadata changes. Get started with events Raw REST API You can call directly into our REST API, though we would recommend the SDKs. Get started with raw REST APIs 2023-04-19 2025-01-17 Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "topic": "API_SDK",
    "scraped_at": "2025-09-15 00:27:11"
  },
  {
    "title": "Java SDK - Developer",
    "url": "https://developer.atlan.com/sdks/java/",
    "content": "Developer Toolkits Toolkits Packages Packages Running example Define via template Render your package Develop your logic Test your logic Release (GA) Widget reference Typedefs Typedefs Running example Define via template Render your model Test your model Bind the SDKs Write integration test Test baseline UX Release (GA) Testing Testing Overview Getting started Getting started Other important concepts Documentation conventions Integration options Integration options CLI dbt Java Java Table of contents Obtain the SDK Configure the SDK Using environment variables On client creation What's next? Error-handling Advanced configuration Logging Retries Timeouts Multi-tenant connectivity Using a proxy Python Kotlin Scala Clojure Go Events Raw REST API Site map Common tasks Common tasks Common asset actions Common asset actions Certify assets Manage announcements Change description Change owners Tag (classify) assets Change custom metadata Link terms to assets Link domains to assets Manage asset READMEs Add asset resources Manage asset relationships with attributes Asset CRUD operations Asset CRUD operations Create an asset Retrieve an asset Update an asset Delete an asset Find and apply suggestions Restore an asset Review changes to an asset Review accesses of an asset Get all assets that... Get all assets that... Search for assets Search examples Lineage Lineage Manage lineage Traverse lineage Bulk updates Bulk updates Combine multiple operations Update multiple assets End-to-end bulk update Event handling Event handling Webhook <> Lambda Webhook <> Lambda Set up Lambda Code your logic Deploy your code Set up webhook Manage your webhook Asset-specific Asset-specific Glossary operations Glossary operations Create objects Retrieval by name Create a hierarchy Categorize terms Traverse category hierarchy Creating assets Creating assets Manage relational assets Manage cube assets Manage object store assets Manage object store assets Manage AWS S3 assets Manage Azure Data Lake Storage assets Manage Google Cloud Storage assets Manage BI assets Manage BI assets Manage Google Data Studio assets Manage Preset assets Manage Superset assets Manage API assets Manage file assets Manage Airflow assets Manage Kafka assets Manage Azure Event Hub assets Manage App assets Manage AI assets Manage Insights assets Manage QuickSight assets Manage DocumentDB assets Manage Data Quality assets Manage Data Quality assets Manage Data Quality rules Connector types and icons Data mesh Data mesh Manage data domains Manage data products Data contracts Data contracts Manage data contracts (via CLI) Manage data contracts (via SDK) Profiling and popularity Profiling and popularity Manage column profiling Manage popularity Governance structures Governance structures Custom metadata Custom metadata Create custom metadata Retrieve custom metadata Update custom metadata Delete custom metadata Manage badges Manage options (enumerations) Tag management Tag management Manage Atlan tags Monitor propagation Access control Access control Manage personas Manage purposes Manage policies Access events API token management Run queries on an asset Users and groups Users and groups Create users and groups Retrieve users and groups Update users and groups Delete users and groups Manage SSO group mapping Packages and workflows Packages and workflows Manage workflows Manage workflow schedules Supported packages Supported packages Athena assets Asset import Asset export (basic) API token connection admin BigQuery assets Connection delete Confluent Kafka assets dbt assets DynamoDB assets Databricks assets Databricks miner Fivetran enrichment Glue assets Looker assets Lineage builder Lineage generator (no transformation) MongoDB assets Oracle assets Postgres assets PowerBI assets Redshift assets Relational assets builder Snowflake assets Snowflake miner Sigma assets SQL Server assets Tableau assets File management File management Reference Reference Searching Searching Querying Querying Term-level queries Full text queries Rank feature queries Compound queries Searchable fields Searchable fields Common search fields Glossary-specific search fields Limiting details Sorting search results Paging search results Aggregating search results Events Events Event triggers Event triggers Asset is created Asset is updated Asset is deleted Custom metadata is added Custom metadata is removed Asset is tagged Asset is untagged Lineage is created Event types Event types ENTITY_CREATE ENTITY_UPDATE ENTITY_DELETE BUSINESS_ATTRIBUTE_UPDATE CLASSIFICATION_ADD CLASSIFICATION_DELETE Specifications Specifications Data contract spec OpenLineage spec Types Types Core Core Referenceable Asset Connection Catalog Tag TagAttachment Access control Access control Persona Purpose AuthPolicy AuthService BusinessPolicy BusinessPolicyException BusinessPolicyIncident BusinessPolicyLog Incident Lineage Lineage ColumnProcess BIProcess Resources Resources Link File Readme ReadmeTemplate Badge Workflows Workflows Workflow WorkflowRun Task Structs Structs Action AuthPolicyCondition AuthPolicyValiditySchedule AwsCloudWatchMetric AwsTag AzureTag BadgeCondition BusinessPolicyRule ByocSsoConfig ColumnValueFrequencyMap DbtMetricFilter DbtJobRun GoogleLabel GoogleTag Histogram KafkaTopicConsumption MCRuleComparison MCRuleSchedule PopularityInsights SourceTagAttachment SourceTagAttachmentValue SourceTagAttribute StarredDetails Enumerations Enumerations AdfActivityState ADLSAccessTier ADLSAccountStatus ADLSEncryptionTypes ADLSLeaseState ADLSLeaseStatus ADLSObjectArchiveStatus ADLSObjectType ADLSPerformance ADLSProvisionState ADLSReplicationType ADLSStorageKind APIQueryParamTypeEnum atlas_operation AtlasGlossaryCategoryType AtlasGlossaryTermType AtlasGlossaryType AtlasGlossaryTermAssignmentStatus AtlasGlossaryTermRelationshipStatus AuthPolicyCategory AuthPolicyResourceCategory AuthPolicyType certificate_status DataGlossary DataProductCriticality DataProductSensitivity DataProductStatus DataProductVisibility DomoCardType DynamoDBSecondaryIndexProjectionType DynamoDBStatus file_type FivetranConnectorStatus FivetranProcessStatus google_datastudio_asset_type icon_type incident_severity kafka_topic_cleanup_policy kafka_topic_compression_type matillion_job_type ModelCardinalityType MongoDBCollectionValidationAction MongoDBCollectionValidationLevel OpenLineageRunState powerbi_endorsement query_username_strategy quick_sight_analysis_status quick_sight_dataset_field_type quick_sight_dataset_import_mode quick_sight_folder_type SchemaRegistrySchemaCompatibility SchemaRegistrySchemaType SourceCostUnitType table_type WorkflowRunStatus WorkflowRunType WorkflowStatus WorkflowType Abstractions Abstractions BI Cloud Insight ObjectStore EventStore DataQuality Metric NoSQL SchemaRegistry Glossary Glossary AtlasGlossary AtlasGlossaryCategory AtlasGlossaryTerm Data mesh Data mesh DataDomain DataProduct DataContract Stakeholder StakeholderTitle Relational databases Relational databases Database Schema Table View MaterialisedView Column Query TablePartition CalculationView BigqueryTag DatabricksUnityCatalogTag SnowflakeDynamicTable SnowflakePipe SnowflakeStream SnowflakeTag Procedure Function SQL Query organization Query organization Namespace Collection Folder Cubes Cubes Cube CubeDimension CubeHierarchy CubeField APIs APIs APIPath APISpec APIObject APIQuery APIField Airflow Airflow AirflowDag AirflowTask Amazon Amazon Amazon DynamoDB Amazon DynamoDB DynamoDBTable DynamoDBSecondaryIndex DynamoDBGlobalSecondaryIndex DynamoDBLocalSecondaryIndex AWS S3 AWS S3 S3Bucket S3Object Amazon QuickSight Amazon QuickSight QuickSightAnalysis QuickSightAnalysisVisual QuickSightDashboard QuickSightDashboardVisual QuickSightDataset QuickSightDatasetField QuickSightFolder Anaplan Anaplan AnaplanWorkspace AnaplanApp AnaplanPage AnaplanModel AnaplanModule AnaplanList AnaplanSystemDimension AnaplanDimension AnaplanLineItem AnaplanView Anomalo Anomalo AnomaloCheck App App Application ApplicationField Microsoft Azure Microsoft Azure Azure Data Factory Azure Data Factory AdfActivity AdfDataflow AdfDataset AdfLinkedservice AdfPipeline Azure Data Lake Storage Azure Data Lake Storage ADLSAccount ADLSContainer ADLSObject Azure Event Hub Azure Event Hub AzureEventHub AzureEventHubConsumerGroup Azure Service Bus Azure Service Bus AzureServiceBusNamespace AzureServiceBusSchema AzureServiceBusTopic Cosmos DB Cosmos DB CosmosMongoDBAccount CosmosMongoDBCollection CosmosMongoDBDatabase Cognite Cognite Cognite3DModel CogniteAsset CogniteEvent CogniteFile CogniteSequence CogniteTimeseries Custom Custom CustomEntity Dataverse Dataverse DataverseEntity DataverseAttribute dbt dbt DbtColumnProcess DbtMetric DbtModel DbtModelColumn DbtProcess DbtSource DbtTag DbtTest Domo Domo DomoCard DomoDashboard DomoDataset DomoDatasetColumn DocumentDB DocumentDB DocumentDBCollection DocumentDBDatabase Fivetran Fivetran FivetranConnector Google Google Google Cloud Storage Google Cloud Storage GCSBucket GCSObject Google Data Studio Google Data Studio DataStudioAsset IBM IBM IBM Cognos Cognos CognosDashboard CognosDatasource CognosExploration CognosFile CognosFolder CognosModule CognosPackage CognosReport Kafka Kafka KafkaConsumerGroup KafkaTopic Looker Looker LookerDashboard LookerExplore LookerField LookerFolder LookerLook LookerModel LookerProject LookerQuery LookerTile LookerView Matillion Matillion MatillionComponent MatillionGroup MatillionJob MatillionProject Metabase Metabase MetabaseCollection MetabaseDashboard MetabaseQuestion MicroStrategy MicroStrategy MicroStrategyAttribute MicroStrategyCube MicroStrategyDocument MicroStrategyDossier MicroStrategyFact MicroStrategyMetric MicroStrategyProject MicroStrategyReport MicroStrategyVisualization Mode Mode ModeChart ModeCollection ModeQuery ModeReport ModeWorkspace Models Models ModelAttribute ModelAttributeAssociation ModelDataModel ModelEntity ModelEntityAssociation ModelVersion MongoDB MongoDB MongoDBCollection MongDBDatabase Monte Carlo Monte Carlo MCIncident MCMonitor Power BI Power BI Power BI PowerBIColumn PowerBIDashboard PowerBIDataflow PowerBIDataflowEntityColumn PowerBIDataset PowerBIDatasource PowerBIMeasure PowerBIPage PowerBIReport PowerBITable PowerBITile PowerBIWorkspace Preset Preset PresetChart PresetDashboard PresetDataset PresetWorkspace Qlik Qlik QlikApp QlikChart QlikDataset QlikSheet QlikSpace QlikStream Redash Redash RedashDashboard RedashQuery RedashVisualization Salesforce Salesforce SalesforceDashboard SalesforceField SalesforceObject SalesforceOrganization SalesforceReport SaaS Sigma Sigma SigmaWorkbook SigmaPage SigmaDataElement SigmaDataElementField SigmaDataset SigmaDatasetColumn Sisense Sisense SisenseDashboard SisenseDatamodel SisenseDatamodelTable SisenseFolder SisenseWidget Soda Soda SodaCheck Spark Spark SparkJob Superset Superset SupersetChart SupersetDashboard SupersetDataset Tableau Tableau TableauCalculatedField TableauDashboard TableauDatasource TableauDatasourceField TableauFlow TableauMetric TableauProject TableauSite TableauWorkbook TableauWorksheet ThoughtSpot ThoughtSpot ThoughtspotAnswer ThoughtspotColumn ThoughtspotDashlet ThoughtspotLiveboard ThoughtspotTable ThoughtspotView ThoughtspotWorksheet Endpoints Table of contents Obtain the SDK Configure the SDK Using environment variables On client creation What's next? Error-handling Advanced configuration Logging Retries Timeouts Multi-tenant connectivity Using a proxy Java SDK ¶ Atlan University Walk through step-by-step in our intro to custom integration course (30 mins). Obtain the SDK ¶ The SDK is available on Maven Central, ready to be included in your project: Gradle Maven build.gradle repositories { mavenCentral () } dependencies { implementation \"com.atlan:atlan-java:+\" // (1) testRuntimeOnly 'ch.qos.logback:logback-classic:1.2.11' // (2) } Include the latest version of the Java SDK in your project as a dependency. You can also give a specific version instead of the + , if you'd like. The Java SDK uses slf4j for logging purposes. You can include logback as a simple binding mechanism to send any logging information out to your console (standard out), at INFO -level or above. pom.xml <dependency> <groupId> com.atlan </groupId> <artifactId> atlan-java </artifactId> <version> ${atlan.version} </version> </dependency> Configure the SDK ¶ There are two ways to configure the SDK: Using environment variables ¶ ATLAN_API_KEY should be given your Atlan API token , for authentication ( don't forget to assign one or more personas to the API token to give access to existing assets! ) ATLAN_BASE_URL should be given your Atlan URL (for example, https://tenant.atlan.com ) Here's an example of setting those environment variables: Set environment variables export ATLAN_BASE_URL=https://tenant.atlan.com export ATLAN_API_KEY=\"...\" AtlanLiveTest.java 1 2 3 4 5 6 7 8 9 import com.atlan.AtlanClient ; public class AtlanLiveTest { public static void main ( String [] args ) { try ( AtlanClient client = new AtlanClient ()) { // Do something with the client } } } On client creation ¶ If you prefer to not use environment variables, you can do the following: AtlanLiveTest.java 1 2 3 4 5 6 7 8 9 10 11 12 import com.atlan.AtlanClient ; public class AtlanLiveTest { public static void main ( String [] args ) { try ( AtlanClient client = new AtlanClient ( \"https://tenant.atlan.com\" , \"...\" ) ) { // Do something with the client } } } Careful not to expose your API token! We generally discourage including your API token directly in your code, in case you accidentally commit it into a (public) version control system. But it's your choice exactly how you manage the API token and including it for use within the client. (Note that you can also explicity provide only the tenant URL, and the constructor will look for only the API key through an environment variable.) That's it — once these are set you can start using your SDK to make live calls against your Atlan instance! 🎉 What's next? ¶ Delve into more detailed examples: Common tasks Common operations on assets, that are available across all assets. Discover actions Asset-specific Operations that are specific to certain assets. Focus on a specific kind of asset Governance structures Operations dealing with governance structures, rather than assets. Manage governance structures Samples Real code samples our customers use to solve particular use cases. Review live samples Searching Delve deep into searching and aggregating metadata. Learn more about searching Events Delve deep into the details of the events Atlan triggers. Learn more about events Error-handling ¶ The SDK defines checked exceptions for the following categories of error: Exception Description ApiConnectionException Errors when the SDK is unable to connect to the API, for example due to a lack of network access or timeouts. AuthenticationException Errors when the API token configured for the SDK is invalid or expired. ConflictException Errors when there is some conflict w",
    "topic": "API_SDK",
    "scraped_at": "2025-09-15 00:27:12"
  },
  {
    "title": "Python SDK - Developer",
    "url": "https://developer.atlan.com/sdks/python/",
    "content": "Developer Toolkits Toolkits Packages Packages Running example Define via template Render your package Develop your logic Test your logic Release (GA) Widget reference Typedefs Typedefs Running example Define via template Render your model Test your model Bind the SDKs Write integration test Test baseline UX Release (GA) Testing Testing Overview Getting started Getting started Other important concepts Documentation conventions Integration options Integration options CLI dbt Java Python Python Table of contents Obtain the SDK Configure the SDK Using environment variables On client creation What's next? Error-handling Advanced configuration Logging Retries Timeouts Multi-tenant connectivity Proxies Asynchronous SDK operations Basic search example Concurrent operations for improved performance Kotlin Scala Clojure Go Events Raw REST API Site map Common tasks Common tasks Common asset actions Common asset actions Certify assets Manage announcements Change description Change owners Tag (classify) assets Change custom metadata Link terms to assets Link domains to assets Manage asset READMEs Add asset resources Manage asset relationships with attributes Asset CRUD operations Asset CRUD operations Create an asset Retrieve an asset Update an asset Delete an asset Find and apply suggestions Restore an asset Review changes to an asset Review accesses of an asset Get all assets that... Get all assets that... Search for assets Search examples Lineage Lineage Manage lineage Traverse lineage Bulk updates Bulk updates Combine multiple operations Update multiple assets End-to-end bulk update Event handling Event handling Webhook <> Lambda Webhook <> Lambda Set up Lambda Code your logic Deploy your code Set up webhook Manage your webhook Asset-specific Asset-specific Glossary operations Glossary operations Create objects Retrieval by name Create a hierarchy Categorize terms Traverse category hierarchy Creating assets Creating assets Manage relational assets Manage cube assets Manage object store assets Manage object store assets Manage AWS S3 assets Manage Azure Data Lake Storage assets Manage Google Cloud Storage assets Manage BI assets Manage BI assets Manage Google Data Studio assets Manage Preset assets Manage Superset assets Manage API assets Manage file assets Manage Airflow assets Manage Kafka assets Manage Azure Event Hub assets Manage App assets Manage AI assets Manage Insights assets Manage QuickSight assets Manage DocumentDB assets Manage Data Quality assets Manage Data Quality assets Manage Data Quality rules Connector types and icons Data mesh Data mesh Manage data domains Manage data products Data contracts Data contracts Manage data contracts (via CLI) Manage data contracts (via SDK) Profiling and popularity Profiling and popularity Manage column profiling Manage popularity Governance structures Governance structures Custom metadata Custom metadata Create custom metadata Retrieve custom metadata Update custom metadata Delete custom metadata Manage badges Manage options (enumerations) Tag management Tag management Manage Atlan tags Monitor propagation Access control Access control Manage personas Manage purposes Manage policies Access events API token management Run queries on an asset Users and groups Users and groups Create users and groups Retrieve users and groups Update users and groups Delete users and groups Manage SSO group mapping Packages and workflows Packages and workflows Manage workflows Manage workflow schedules Supported packages Supported packages Athena assets Asset import Asset export (basic) API token connection admin BigQuery assets Connection delete Confluent Kafka assets dbt assets DynamoDB assets Databricks assets Databricks miner Fivetran enrichment Glue assets Looker assets Lineage builder Lineage generator (no transformation) MongoDB assets Oracle assets Postgres assets PowerBI assets Redshift assets Relational assets builder Snowflake assets Snowflake miner Sigma assets SQL Server assets Tableau assets File management File management Reference Reference Searching Searching Querying Querying Term-level queries Full text queries Rank feature queries Compound queries Searchable fields Searchable fields Common search fields Glossary-specific search fields Limiting details Sorting search results Paging search results Aggregating search results Events Events Event triggers Event triggers Asset is created Asset is updated Asset is deleted Custom metadata is added Custom metadata is removed Asset is tagged Asset is untagged Lineage is created Event types Event types ENTITY_CREATE ENTITY_UPDATE ENTITY_DELETE BUSINESS_ATTRIBUTE_UPDATE CLASSIFICATION_ADD CLASSIFICATION_DELETE Specifications Specifications Data contract spec OpenLineage spec Types Types Core Core Referenceable Asset Connection Catalog Tag TagAttachment Access control Access control Persona Purpose AuthPolicy AuthService BusinessPolicy BusinessPolicyException BusinessPolicyIncident BusinessPolicyLog Incident Lineage Lineage ColumnProcess BIProcess Resources Resources Link File Readme ReadmeTemplate Badge Workflows Workflows Workflow WorkflowRun Task Structs Structs Action AuthPolicyCondition AuthPolicyValiditySchedule AwsCloudWatchMetric AwsTag AzureTag BadgeCondition BusinessPolicyRule ByocSsoConfig ColumnValueFrequencyMap DbtMetricFilter DbtJobRun GoogleLabel GoogleTag Histogram KafkaTopicConsumption MCRuleComparison MCRuleSchedule PopularityInsights SourceTagAttachment SourceTagAttachmentValue SourceTagAttribute StarredDetails Enumerations Enumerations AdfActivityState ADLSAccessTier ADLSAccountStatus ADLSEncryptionTypes ADLSLeaseState ADLSLeaseStatus ADLSObjectArchiveStatus ADLSObjectType ADLSPerformance ADLSProvisionState ADLSReplicationType ADLSStorageKind APIQueryParamTypeEnum atlas_operation AtlasGlossaryCategoryType AtlasGlossaryTermType AtlasGlossaryType AtlasGlossaryTermAssignmentStatus AtlasGlossaryTermRelationshipStatus AuthPolicyCategory AuthPolicyResourceCategory AuthPolicyType certificate_status DataGlossary DataProductCriticality DataProductSensitivity DataProductStatus DataProductVisibility DomoCardType DynamoDBSecondaryIndexProjectionType DynamoDBStatus file_type FivetranConnectorStatus FivetranProcessStatus google_datastudio_asset_type icon_type incident_severity kafka_topic_cleanup_policy kafka_topic_compression_type matillion_job_type ModelCardinalityType MongoDBCollectionValidationAction MongoDBCollectionValidationLevel OpenLineageRunState powerbi_endorsement query_username_strategy quick_sight_analysis_status quick_sight_dataset_field_type quick_sight_dataset_import_mode quick_sight_folder_type SchemaRegistrySchemaCompatibility SchemaRegistrySchemaType SourceCostUnitType table_type WorkflowRunStatus WorkflowRunType WorkflowStatus WorkflowType Abstractions Abstractions BI Cloud Insight ObjectStore EventStore DataQuality Metric NoSQL SchemaRegistry Glossary Glossary AtlasGlossary AtlasGlossaryCategory AtlasGlossaryTerm Data mesh Data mesh DataDomain DataProduct DataContract Stakeholder StakeholderTitle Relational databases Relational databases Database Schema Table View MaterialisedView Column Query TablePartition CalculationView BigqueryTag DatabricksUnityCatalogTag SnowflakeDynamicTable SnowflakePipe SnowflakeStream SnowflakeTag Procedure Function SQL Query organization Query organization Namespace Collection Folder Cubes Cubes Cube CubeDimension CubeHierarchy CubeField APIs APIs APIPath APISpec APIObject APIQuery APIField Airflow Airflow AirflowDag AirflowTask Amazon Amazon Amazon DynamoDB Amazon DynamoDB DynamoDBTable DynamoDBSecondaryIndex DynamoDBGlobalSecondaryIndex DynamoDBLocalSecondaryIndex AWS S3 AWS S3 S3Bucket S3Object Amazon QuickSight Amazon QuickSight QuickSightAnalysis QuickSightAnalysisVisual QuickSightDashboard QuickSightDashboardVisual QuickSightDataset QuickSightDatasetField QuickSightFolder Anaplan Anaplan AnaplanWorkspace AnaplanApp AnaplanPage AnaplanModel AnaplanModule AnaplanList AnaplanSystemDimension AnaplanDimension AnaplanLineItem AnaplanView Anomalo Anomalo AnomaloCheck App App Application ApplicationField Microsoft Azure Microsoft Azure Azure Data Factory Azure Data Factory AdfActivity AdfDataflow AdfDataset AdfLinkedservice AdfPipeline Azure Data Lake Storage Azure Data Lake Storage ADLSAccount ADLSContainer ADLSObject Azure Event Hub Azure Event Hub AzureEventHub AzureEventHubConsumerGroup Azure Service Bus Azure Service Bus AzureServiceBusNamespace AzureServiceBusSchema AzureServiceBusTopic Cosmos DB Cosmos DB CosmosMongoDBAccount CosmosMongoDBCollection CosmosMongoDBDatabase Cognite Cognite Cognite3DModel CogniteAsset CogniteEvent CogniteFile CogniteSequence CogniteTimeseries Custom Custom CustomEntity Dataverse Dataverse DataverseEntity DataverseAttribute dbt dbt DbtColumnProcess DbtMetric DbtModel DbtModelColumn DbtProcess DbtSource DbtTag DbtTest Domo Domo DomoCard DomoDashboard DomoDataset DomoDatasetColumn DocumentDB DocumentDB DocumentDBCollection DocumentDBDatabase Fivetran Fivetran FivetranConnector Google Google Google Cloud Storage Google Cloud Storage GCSBucket GCSObject Google Data Studio Google Data Studio DataStudioAsset IBM IBM IBM Cognos Cognos CognosDashboard CognosDatasource CognosExploration CognosFile CognosFolder CognosModule CognosPackage CognosReport Kafka Kafka KafkaConsumerGroup KafkaTopic Looker Looker LookerDashboard LookerExplore LookerField LookerFolder LookerLook LookerModel LookerProject LookerQuery LookerTile LookerView Matillion Matillion MatillionComponent MatillionGroup MatillionJob MatillionProject Metabase Metabase MetabaseCollection MetabaseDashboard MetabaseQuestion MicroStrategy MicroStrategy MicroStrategyAttribute MicroStrategyCube MicroStrategyDocument MicroStrategyDossier MicroStrategyFact MicroStrategyMetric MicroStrategyProject MicroStrategyReport MicroStrategyVisualization Mode Mode ModeChart ModeCollection ModeQuery ModeReport ModeWorkspace Models Models ModelAttribute ModelAttributeAssociation ModelDataModel ModelEntity ModelEntityAssociation ModelVersion MongoDB MongoDB MongoDBCollection MongDBDatabase Monte Carlo Monte Carlo MCIncident MCMonitor Power BI Power BI Power BI PowerBIColumn PowerBIDashboard PowerBIDataflow PowerBIDataflowEntityColumn PowerBIDataset PowerBIDatasource PowerBIMeasure PowerBIPage PowerBIReport PowerBITable PowerBITile PowerBIWorkspace Preset Preset PresetChart PresetDashboard PresetDataset PresetWorkspace Qlik Qlik QlikApp QlikChart QlikDataset QlikSheet QlikSpace QlikStream Redash Redash RedashDashboard RedashQuery RedashVisualization Salesforce Salesforce SalesforceDashboard SalesforceField SalesforceObject SalesforceOrganization SalesforceReport SaaS Sigma Sigma SigmaWorkbook SigmaPage SigmaDataElement SigmaDataElementField SigmaDataset SigmaDatasetColumn Sisense Sisense SisenseDashboard SisenseDatamodel SisenseDatamodelTable SisenseFolder SisenseWidget Soda Soda SodaCheck Spark Spark SparkJob Superset Superset SupersetChart SupersetDashboard SupersetDataset Tableau Tableau TableauCalculatedField TableauDashboard TableauDatasource TableauDatasourceField TableauFlow TableauMetric TableauProject TableauSite TableauWorkbook TableauWorksheet ThoughtSpot ThoughtSpot ThoughtspotAnswer ThoughtspotColumn ThoughtspotDashlet ThoughtspotLiveboard ThoughtspotTable ThoughtspotView ThoughtspotWorksheet Endpoints Table of contents Obtain the SDK Configure the SDK Using environment variables On client creation What's next? Error-handling Advanced configuration Logging Retries Timeouts Multi-tenant connectivity Proxies Asynchronous SDK operations Basic search example Concurrent operations for improved performance Python SDK ¶ Atlan University Walk through step-by-step in our intro to custom integration course (30 mins). Obtain the SDK ¶ The SDK is currently available on pypi . You can use pip to install it as follows: Install the SDK pip install pyatlan Configure the SDK ¶ There are two ways to configure the SDK: Using environment variables ¶ ATLAN_API_KEY should be given your Atlan API token , for authentication ( don't forget to assign one or more personas to the API token to give access to existing assets! ) ATLAN_BASE_URL should be given your Atlan URL (for example, https://tenant.atlan.com ) Here's an example of setting those environment variables: Set environment variables export ATLAN_BASE_URL=https://tenant.atlan.com export ATLAN_API_KEY=\"...\" atlan_live_test.py 1 2 3 from pyatlan.client.atlan import AtlanClient client = AtlanClient () On client creation ¶ If you prefer to not use environment variables, you can do the following: atlan_live_test.py 1 2 3 4 5 6 from pyatlan.client.atlan import AtlanClient client = AtlanClient ( base_url = \"https://tenant.atlan.com\" , api_key = \"...\" ) Careful not to expose your API token! We generally discourage including your API token directly in your code, in case you accidentally commit it into a (public) version control system. But it's your choice exactly how you manage the API token and including it for use within the client. (optional) Want to create a client using an API token GUID? In some scenarios, you may not want to expose the entire API token or manage environment variables. Instead, you can provide the GUID of the API token, and the SDK will internally fetch the actual access token. When to use this approach: Building apps that use the SDK where token security is a concern When you want to avoid exposing full API tokens in your configuration For containerized applications that need secure token management Prerequisites: Before using this approach, ensure your Argo template is configured with CLIENT_ID and CLIENT_SECRET : Argo template configuration 1 2 3 4 5 6 7 8 9 10 11 12 13 14 container : image : ghcr.io/atlanhq/designation-based-group-provisioning:1.0.2 imagePullPolicy : IfNotPresent env : - name : CLIENT_ID valueFrom : secretKeyRef : name : \"argo-client-creds\" key : \"login\" - name : CLIENT_SECRET valueFrom : secretKeyRef : name : \"argo-client-creds\" key : \"password\" Python 7.1.4 Creating a client with API token GUID 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 from pyatlan.client.atlan import AtlanClient from pyatlan.model.fluent_search import FluentSearch from pyatlan.model.query import CompoundQuery from pyatlan.model.assets import AtlasGlossary # Initialize client using API token GUID token_client = AtlanClient . from_token_guid ( guid = \"c5e249d7-abcc-4ad5-87a1-831d7b810df4\" # (1) ) # Perform operations with the client (requires appropriate permissions) results = ( FluentSearch () . where ( CompoundQuery . active_assets ()) . where ( CompoundQuery . asset_type ( AtlasGlossary )) . page_size ( 100 ) . execute ( client = token_client ) ) assert results and results . count >= 1 print ( f \"Found { results . count } glossary assets\" ) Create client from token GUID : Use AtlanClient.from_token_guid() to create a client using the GUID of an API token. The SDK will automatically fetch the actual access token using the configured CLIENT_ID and CLIENT_SE",
    "topic": "API_SDK",
    "scraped_at": "2025-09-15 00:27:13"
  },
  {
    "title": "Kotlin SDK - Developer",
    "url": "https://developer.atlan.com/sdks/kotlin/",
    "content": "Developer Toolkits Toolkits Packages Packages Running example Define via template Render your package Develop your logic Test your logic Release (GA) Widget reference Typedefs Typedefs Running example Define via template Render your model Test your model Bind the SDKs Write integration test Test baseline UX Release (GA) Testing Testing Overview Getting started Getting started Other important concepts Documentation conventions Integration options Integration options CLI dbt Java Python Kotlin Kotlin Table of contents Obtain the SDK Configure the SDK Using environment variables On client creation What's next? Error-handling Advanced configuration Logging Retries Timeouts Multi-tenant connectivity Using a proxy Scala Clojure Go Events Raw REST API Site map Common tasks Common tasks Common asset actions Common asset actions Certify assets Manage announcements Change description Change owners Tag (classify) assets Change custom metadata Link terms to assets Link domains to assets Manage asset READMEs Add asset resources Manage asset relationships with attributes Asset CRUD operations Asset CRUD operations Create an asset Retrieve an asset Update an asset Delete an asset Find and apply suggestions Restore an asset Review changes to an asset Review accesses of an asset Get all assets that... Get all assets that... Search for assets Search examples Lineage Lineage Manage lineage Traverse lineage Bulk updates Bulk updates Combine multiple operations Update multiple assets End-to-end bulk update Event handling Event handling Webhook <> Lambda Webhook <> Lambda Set up Lambda Code your logic Deploy your code Set up webhook Manage your webhook Asset-specific Asset-specific Glossary operations Glossary operations Create objects Retrieval by name Create a hierarchy Categorize terms Traverse category hierarchy Creating assets Creating assets Manage relational assets Manage cube assets Manage object store assets Manage object store assets Manage AWS S3 assets Manage Azure Data Lake Storage assets Manage Google Cloud Storage assets Manage BI assets Manage BI assets Manage Google Data Studio assets Manage Preset assets Manage Superset assets Manage API assets Manage file assets Manage Airflow assets Manage Kafka assets Manage Azure Event Hub assets Manage App assets Manage AI assets Manage Insights assets Manage QuickSight assets Manage DocumentDB assets Manage Data Quality assets Manage Data Quality assets Manage Data Quality rules Connector types and icons Data mesh Data mesh Manage data domains Manage data products Data contracts Data contracts Manage data contracts (via CLI) Manage data contracts (via SDK) Profiling and popularity Profiling and popularity Manage column profiling Manage popularity Governance structures Governance structures Custom metadata Custom metadata Create custom metadata Retrieve custom metadata Update custom metadata Delete custom metadata Manage badges Manage options (enumerations) Tag management Tag management Manage Atlan tags Monitor propagation Access control Access control Manage personas Manage purposes Manage policies Access events API token management Run queries on an asset Users and groups Users and groups Create users and groups Retrieve users and groups Update users and groups Delete users and groups Manage SSO group mapping Packages and workflows Packages and workflows Manage workflows Manage workflow schedules Supported packages Supported packages Athena assets Asset import Asset export (basic) API token connection admin BigQuery assets Connection delete Confluent Kafka assets dbt assets DynamoDB assets Databricks assets Databricks miner Fivetran enrichment Glue assets Looker assets Lineage builder Lineage generator (no transformation) MongoDB assets Oracle assets Postgres assets PowerBI assets Redshift assets Relational assets builder Snowflake assets Snowflake miner Sigma assets SQL Server assets Tableau assets File management File management Reference Reference Searching Searching Querying Querying Term-level queries Full text queries Rank feature queries Compound queries Searchable fields Searchable fields Common search fields Glossary-specific search fields Limiting details Sorting search results Paging search results Aggregating search results Events Events Event triggers Event triggers Asset is created Asset is updated Asset is deleted Custom metadata is added Custom metadata is removed Asset is tagged Asset is untagged Lineage is created Event types Event types ENTITY_CREATE ENTITY_UPDATE ENTITY_DELETE BUSINESS_ATTRIBUTE_UPDATE CLASSIFICATION_ADD CLASSIFICATION_DELETE Specifications Specifications Data contract spec OpenLineage spec Types Types Core Core Referenceable Asset Connection Catalog Tag TagAttachment Access control Access control Persona Purpose AuthPolicy AuthService BusinessPolicy BusinessPolicyException BusinessPolicyIncident BusinessPolicyLog Incident Lineage Lineage ColumnProcess BIProcess Resources Resources Link File Readme ReadmeTemplate Badge Workflows Workflows Workflow WorkflowRun Task Structs Structs Action AuthPolicyCondition AuthPolicyValiditySchedule AwsCloudWatchMetric AwsTag AzureTag BadgeCondition BusinessPolicyRule ByocSsoConfig ColumnValueFrequencyMap DbtMetricFilter DbtJobRun GoogleLabel GoogleTag Histogram KafkaTopicConsumption MCRuleComparison MCRuleSchedule PopularityInsights SourceTagAttachment SourceTagAttachmentValue SourceTagAttribute StarredDetails Enumerations Enumerations AdfActivityState ADLSAccessTier ADLSAccountStatus ADLSEncryptionTypes ADLSLeaseState ADLSLeaseStatus ADLSObjectArchiveStatus ADLSObjectType ADLSPerformance ADLSProvisionState ADLSReplicationType ADLSStorageKind APIQueryParamTypeEnum atlas_operation AtlasGlossaryCategoryType AtlasGlossaryTermType AtlasGlossaryType AtlasGlossaryTermAssignmentStatus AtlasGlossaryTermRelationshipStatus AuthPolicyCategory AuthPolicyResourceCategory AuthPolicyType certificate_status DataGlossary DataProductCriticality DataProductSensitivity DataProductStatus DataProductVisibility DomoCardType DynamoDBSecondaryIndexProjectionType DynamoDBStatus file_type FivetranConnectorStatus FivetranProcessStatus google_datastudio_asset_type icon_type incident_severity kafka_topic_cleanup_policy kafka_topic_compression_type matillion_job_type ModelCardinalityType MongoDBCollectionValidationAction MongoDBCollectionValidationLevel OpenLineageRunState powerbi_endorsement query_username_strategy quick_sight_analysis_status quick_sight_dataset_field_type quick_sight_dataset_import_mode quick_sight_folder_type SchemaRegistrySchemaCompatibility SchemaRegistrySchemaType SourceCostUnitType table_type WorkflowRunStatus WorkflowRunType WorkflowStatus WorkflowType Abstractions Abstractions BI Cloud Insight ObjectStore EventStore DataQuality Metric NoSQL SchemaRegistry Glossary Glossary AtlasGlossary AtlasGlossaryCategory AtlasGlossaryTerm Data mesh Data mesh DataDomain DataProduct DataContract Stakeholder StakeholderTitle Relational databases Relational databases Database Schema Table View MaterialisedView Column Query TablePartition CalculationView BigqueryTag DatabricksUnityCatalogTag SnowflakeDynamicTable SnowflakePipe SnowflakeStream SnowflakeTag Procedure Function SQL Query organization Query organization Namespace Collection Folder Cubes Cubes Cube CubeDimension CubeHierarchy CubeField APIs APIs APIPath APISpec APIObject APIQuery APIField Airflow Airflow AirflowDag AirflowTask Amazon Amazon Amazon DynamoDB Amazon DynamoDB DynamoDBTable DynamoDBSecondaryIndex DynamoDBGlobalSecondaryIndex DynamoDBLocalSecondaryIndex AWS S3 AWS S3 S3Bucket S3Object Amazon QuickSight Amazon QuickSight QuickSightAnalysis QuickSightAnalysisVisual QuickSightDashboard QuickSightDashboardVisual QuickSightDataset QuickSightDatasetField QuickSightFolder Anaplan Anaplan AnaplanWorkspace AnaplanApp AnaplanPage AnaplanModel AnaplanModule AnaplanList AnaplanSystemDimension AnaplanDimension AnaplanLineItem AnaplanView Anomalo Anomalo AnomaloCheck App App Application ApplicationField Microsoft Azure Microsoft Azure Azure Data Factory Azure Data Factory AdfActivity AdfDataflow AdfDataset AdfLinkedservice AdfPipeline Azure Data Lake Storage Azure Data Lake Storage ADLSAccount ADLSContainer ADLSObject Azure Event Hub Azure Event Hub AzureEventHub AzureEventHubConsumerGroup Azure Service Bus Azure Service Bus AzureServiceBusNamespace AzureServiceBusSchema AzureServiceBusTopic Cosmos DB Cosmos DB CosmosMongoDBAccount CosmosMongoDBCollection CosmosMongoDBDatabase Cognite Cognite Cognite3DModel CogniteAsset CogniteEvent CogniteFile CogniteSequence CogniteTimeseries Custom Custom CustomEntity Dataverse Dataverse DataverseEntity DataverseAttribute dbt dbt DbtColumnProcess DbtMetric DbtModel DbtModelColumn DbtProcess DbtSource DbtTag DbtTest Domo Domo DomoCard DomoDashboard DomoDataset DomoDatasetColumn DocumentDB DocumentDB DocumentDBCollection DocumentDBDatabase Fivetran Fivetran FivetranConnector Google Google Google Cloud Storage Google Cloud Storage GCSBucket GCSObject Google Data Studio Google Data Studio DataStudioAsset IBM IBM IBM Cognos Cognos CognosDashboard CognosDatasource CognosExploration CognosFile CognosFolder CognosModule CognosPackage CognosReport Kafka Kafka KafkaConsumerGroup KafkaTopic Looker Looker LookerDashboard LookerExplore LookerField LookerFolder LookerLook LookerModel LookerProject LookerQuery LookerTile LookerView Matillion Matillion MatillionComponent MatillionGroup MatillionJob MatillionProject Metabase Metabase MetabaseCollection MetabaseDashboard MetabaseQuestion MicroStrategy MicroStrategy MicroStrategyAttribute MicroStrategyCube MicroStrategyDocument MicroStrategyDossier MicroStrategyFact MicroStrategyMetric MicroStrategyProject MicroStrategyReport MicroStrategyVisualization Mode Mode ModeChart ModeCollection ModeQuery ModeReport ModeWorkspace Models Models ModelAttribute ModelAttributeAssociation ModelDataModel ModelEntity ModelEntityAssociation ModelVersion MongoDB MongoDB MongoDBCollection MongDBDatabase Monte Carlo Monte Carlo MCIncident MCMonitor Power BI Power BI Power BI PowerBIColumn PowerBIDashboard PowerBIDataflow PowerBIDataflowEntityColumn PowerBIDataset PowerBIDatasource PowerBIMeasure PowerBIPage PowerBIReport PowerBITable PowerBITile PowerBIWorkspace Preset Preset PresetChart PresetDashboard PresetDataset PresetWorkspace Qlik Qlik QlikApp QlikChart QlikDataset QlikSheet QlikSpace QlikStream Redash Redash RedashDashboard RedashQuery RedashVisualization Salesforce Salesforce SalesforceDashboard SalesforceField SalesforceObject SalesforceOrganization SalesforceReport SaaS Sigma Sigma SigmaWorkbook SigmaPage SigmaDataElement SigmaDataElementField SigmaDataset SigmaDatasetColumn Sisense Sisense SisenseDashboard SisenseDatamodel SisenseDatamodelTable SisenseFolder SisenseWidget Soda Soda SodaCheck Spark Spark SparkJob Superset Superset SupersetChart SupersetDashboard SupersetDataset Tableau Tableau TableauCalculatedField TableauDashboard TableauDatasource TableauDatasourceField TableauFlow TableauMetric TableauProject TableauSite TableauWorkbook TableauWorksheet ThoughtSpot ThoughtSpot ThoughtspotAnswer ThoughtspotColumn ThoughtspotDashlet ThoughtspotLiveboard ThoughtspotTable ThoughtspotView ThoughtspotWorksheet Endpoints Table of contents Obtain the SDK Configure the SDK Using environment variables On client creation What's next? Error-handling Advanced configuration Logging Retries Timeouts Multi-tenant connectivity Using a proxy Kotlin SDK ¶ Obtain the SDK ¶ For Kotlin, you can reuse the existing Java SDK as-is. It is available on Maven Central, ready to be included in your project: Gradle build.gradle.kts repositories { mavenCentral () } dependencies { implementation ( \"com.atlan:atlan-java:+\" ) // (1) implementation ( \"io.github.microutils:kotlin-logging-jvm:3.0.5\" ) // (2) implementation ( \"org.slf4j:slf4j-simple:2.0.7\" ) } Include the latest version of the Java SDK in your project as a dependency. You can also give a specific version instead of the + , if you'd like. The Java SDK uses slf4j for logging purposes. You can include slf4j-simple as a simple binding mechanism to send any logging information out to your console (standard out), along with the kotlin-logging-jvm microutil. Configure the SDK ¶ There are two ways to configure the SDK: Using environment variables ¶ ATLAN_API_KEY should be given your Atlan API token , for authentication ( don't forget to assign one or more personas to the API token to give access to existing assets! ) ATLAN_BASE_URL should be given your Atlan URL (for example, https://tenant.atlan.com ) Here's an example of setting those environment variables: Set environment variables export ATLAN_BASE_URL=https://tenant.atlan.com export ATLAN_API_KEY=\"...\" AtlanLiveTest.kt 1 2 3 4 5 6 7 import com.atlan.AtlanClient fun main () { AtlanClient (). use { client -> // Do something with the client } } On client creation ¶ If you prefer to not use environment variables, you can do the following: AtlanLiveTest.kt 1 2 3 4 5 6 7 8 9 10 import com.atlan.AtlanClient fun main () { AtlanClient ( \"https://tenant.atlan.com\" , \"...\" ) ) { // Do something with the client } } What's next? ¶ Delve into more detailed examples: Common tasks Common operations on assets, that are available across all assets. Discover actions Asset-specific Operations that are specific to certain assets. Focus on a specific kind of asset Governance structures Operations dealing with governance structures, rather than assets. Manage governance structures Samples Real code samples our customers use to solve particular use cases. Review live samples Searching Delve deep into searching and aggregating metadata. Learn more about searching Events Delve deep into the details of the events Atlan triggers. Learn more about events Error-handling ¶ The SDK defines checked exceptions for the following categories of error: Exception Description ApiConnectionException Errors when the SDK is unable to connect to the API, for example due to a lack of network access or timeouts. AuthenticationException Errors when the API token configured for the SDK is invalid or expired. ConflictException Errors when there is some conflict with an existing asset and the operation cannot be completed as a result. InvalidRequestException Errors when the request sent to Atlan does not match its expectations. If you are using the built-in methods like toCreate() and toUpdate() this exception should be treated as a bug in the SDK. (These operations take responsibility for avoiding this error.) LogicException Errors where some assumption made in the SDK's code is proven incorrect. If ever raised, they should be reported as bugs against the SDK. NotFoundException Errors when the requested resource or asset does not exist in Atlan. PermissionException Errors when the API token used by the SDK does not have permission to access a resource or carry out an operation on a specific asset . RateLimitException Errors when the Atlan server is being overwhelmed by requests",
    "topic": "API_SDK",
    "scraped_at": "2025-09-15 00:27:14"
  },
  {
    "title": "Go SDK - Developer",
    "url": "https://developer.atlan.com/sdks/go/",
    "content": "Developer Toolkits Toolkits Packages Packages Running example Define via template Render your package Develop your logic Test your logic Release (GA) Widget reference Typedefs Typedefs Running example Define via template Render your model Test your model Bind the SDKs Write integration test Test baseline UX Release (GA) Testing Testing Overview Getting started Getting started Other important concepts Documentation conventions Integration options Integration options CLI dbt Java Python Kotlin Scala Clojure Go Go Table of contents Obtain the SDK Configure the SDK Using environment variables On client creation What's next? Error-handling Advanced configuration Logging Events Raw REST API Site map Common tasks Common tasks Common asset actions Common asset actions Certify assets Manage announcements Change description Change owners Tag (classify) assets Change custom metadata Link terms to assets Link domains to assets Manage asset READMEs Add asset resources Manage asset relationships with attributes Asset CRUD operations Asset CRUD operations Create an asset Retrieve an asset Update an asset Delete an asset Find and apply suggestions Restore an asset Review changes to an asset Review accesses of an asset Get all assets that... Get all assets that... Search for assets Search examples Lineage Lineage Manage lineage Traverse lineage Bulk updates Bulk updates Combine multiple operations Update multiple assets End-to-end bulk update Event handling Event handling Webhook <> Lambda Webhook <> Lambda Set up Lambda Code your logic Deploy your code Set up webhook Manage your webhook Asset-specific Asset-specific Glossary operations Glossary operations Create objects Retrieval by name Create a hierarchy Categorize terms Traverse category hierarchy Creating assets Creating assets Manage relational assets Manage cube assets Manage object store assets Manage object store assets Manage AWS S3 assets Manage Azure Data Lake Storage assets Manage Google Cloud Storage assets Manage BI assets Manage BI assets Manage Google Data Studio assets Manage Preset assets Manage Superset assets Manage API assets Manage file assets Manage Airflow assets Manage Kafka assets Manage Azure Event Hub assets Manage App assets Manage AI assets Manage Insights assets Manage QuickSight assets Manage DocumentDB assets Manage Data Quality assets Manage Data Quality assets Manage Data Quality rules Connector types and icons Data mesh Data mesh Manage data domains Manage data products Data contracts Data contracts Manage data contracts (via CLI) Manage data contracts (via SDK) Profiling and popularity Profiling and popularity Manage column profiling Manage popularity Governance structures Governance structures Custom metadata Custom metadata Create custom metadata Retrieve custom metadata Update custom metadata Delete custom metadata Manage badges Manage options (enumerations) Tag management Tag management Manage Atlan tags Monitor propagation Access control Access control Manage personas Manage purposes Manage policies Access events API token management Run queries on an asset Users and groups Users and groups Create users and groups Retrieve users and groups Update users and groups Delete users and groups Manage SSO group mapping Packages and workflows Packages and workflows Manage workflows Manage workflow schedules Supported packages Supported packages Athena assets Asset import Asset export (basic) API token connection admin BigQuery assets Connection delete Confluent Kafka assets dbt assets DynamoDB assets Databricks assets Databricks miner Fivetran enrichment Glue assets Looker assets Lineage builder Lineage generator (no transformation) MongoDB assets Oracle assets Postgres assets PowerBI assets Redshift assets Relational assets builder Snowflake assets Snowflake miner Sigma assets SQL Server assets Tableau assets File management File management Reference Reference Searching Searching Querying Querying Term-level queries Full text queries Rank feature queries Compound queries Searchable fields Searchable fields Common search fields Glossary-specific search fields Limiting details Sorting search results Paging search results Aggregating search results Events Events Event triggers Event triggers Asset is created Asset is updated Asset is deleted Custom metadata is added Custom metadata is removed Asset is tagged Asset is untagged Lineage is created Event types Event types ENTITY_CREATE ENTITY_UPDATE ENTITY_DELETE BUSINESS_ATTRIBUTE_UPDATE CLASSIFICATION_ADD CLASSIFICATION_DELETE Specifications Specifications Data contract spec OpenLineage spec Types Types Core Core Referenceable Asset Connection Catalog Tag TagAttachment Access control Access control Persona Purpose AuthPolicy AuthService BusinessPolicy BusinessPolicyException BusinessPolicyIncident BusinessPolicyLog Incident Lineage Lineage ColumnProcess BIProcess Resources Resources Link File Readme ReadmeTemplate Badge Workflows Workflows Workflow WorkflowRun Task Structs Structs Action AuthPolicyCondition AuthPolicyValiditySchedule AwsCloudWatchMetric AwsTag AzureTag BadgeCondition BusinessPolicyRule ByocSsoConfig ColumnValueFrequencyMap DbtMetricFilter DbtJobRun GoogleLabel GoogleTag Histogram KafkaTopicConsumption MCRuleComparison MCRuleSchedule PopularityInsights SourceTagAttachment SourceTagAttachmentValue SourceTagAttribute StarredDetails Enumerations Enumerations AdfActivityState ADLSAccessTier ADLSAccountStatus ADLSEncryptionTypes ADLSLeaseState ADLSLeaseStatus ADLSObjectArchiveStatus ADLSObjectType ADLSPerformance ADLSProvisionState ADLSReplicationType ADLSStorageKind APIQueryParamTypeEnum atlas_operation AtlasGlossaryCategoryType AtlasGlossaryTermType AtlasGlossaryType AtlasGlossaryTermAssignmentStatus AtlasGlossaryTermRelationshipStatus AuthPolicyCategory AuthPolicyResourceCategory AuthPolicyType certificate_status DataGlossary DataProductCriticality DataProductSensitivity DataProductStatus DataProductVisibility DomoCardType DynamoDBSecondaryIndexProjectionType DynamoDBStatus file_type FivetranConnectorStatus FivetranProcessStatus google_datastudio_asset_type icon_type incident_severity kafka_topic_cleanup_policy kafka_topic_compression_type matillion_job_type ModelCardinalityType MongoDBCollectionValidationAction MongoDBCollectionValidationLevel OpenLineageRunState powerbi_endorsement query_username_strategy quick_sight_analysis_status quick_sight_dataset_field_type quick_sight_dataset_import_mode quick_sight_folder_type SchemaRegistrySchemaCompatibility SchemaRegistrySchemaType SourceCostUnitType table_type WorkflowRunStatus WorkflowRunType WorkflowStatus WorkflowType Abstractions Abstractions BI Cloud Insight ObjectStore EventStore DataQuality Metric NoSQL SchemaRegistry Glossary Glossary AtlasGlossary AtlasGlossaryCategory AtlasGlossaryTerm Data mesh Data mesh DataDomain DataProduct DataContract Stakeholder StakeholderTitle Relational databases Relational databases Database Schema Table View MaterialisedView Column Query TablePartition CalculationView BigqueryTag DatabricksUnityCatalogTag SnowflakeDynamicTable SnowflakePipe SnowflakeStream SnowflakeTag Procedure Function SQL Query organization Query organization Namespace Collection Folder Cubes Cubes Cube CubeDimension CubeHierarchy CubeField APIs APIs APIPath APISpec APIObject APIQuery APIField Airflow Airflow AirflowDag AirflowTask Amazon Amazon Amazon DynamoDB Amazon DynamoDB DynamoDBTable DynamoDBSecondaryIndex DynamoDBGlobalSecondaryIndex DynamoDBLocalSecondaryIndex AWS S3 AWS S3 S3Bucket S3Object Amazon QuickSight Amazon QuickSight QuickSightAnalysis QuickSightAnalysisVisual QuickSightDashboard QuickSightDashboardVisual QuickSightDataset QuickSightDatasetField QuickSightFolder Anaplan Anaplan AnaplanWorkspace AnaplanApp AnaplanPage AnaplanModel AnaplanModule AnaplanList AnaplanSystemDimension AnaplanDimension AnaplanLineItem AnaplanView Anomalo Anomalo AnomaloCheck App App Application ApplicationField Microsoft Azure Microsoft Azure Azure Data Factory Azure Data Factory AdfActivity AdfDataflow AdfDataset AdfLinkedservice AdfPipeline Azure Data Lake Storage Azure Data Lake Storage ADLSAccount ADLSContainer ADLSObject Azure Event Hub Azure Event Hub AzureEventHub AzureEventHubConsumerGroup Azure Service Bus Azure Service Bus AzureServiceBusNamespace AzureServiceBusSchema AzureServiceBusTopic Cosmos DB Cosmos DB CosmosMongoDBAccount CosmosMongoDBCollection CosmosMongoDBDatabase Cognite Cognite Cognite3DModel CogniteAsset CogniteEvent CogniteFile CogniteSequence CogniteTimeseries Custom Custom CustomEntity Dataverse Dataverse DataverseEntity DataverseAttribute dbt dbt DbtColumnProcess DbtMetric DbtModel DbtModelColumn DbtProcess DbtSource DbtTag DbtTest Domo Domo DomoCard DomoDashboard DomoDataset DomoDatasetColumn DocumentDB DocumentDB DocumentDBCollection DocumentDBDatabase Fivetran Fivetran FivetranConnector Google Google Google Cloud Storage Google Cloud Storage GCSBucket GCSObject Google Data Studio Google Data Studio DataStudioAsset IBM IBM IBM Cognos Cognos CognosDashboard CognosDatasource CognosExploration CognosFile CognosFolder CognosModule CognosPackage CognosReport Kafka Kafka KafkaConsumerGroup KafkaTopic Looker Looker LookerDashboard LookerExplore LookerField LookerFolder LookerLook LookerModel LookerProject LookerQuery LookerTile LookerView Matillion Matillion MatillionComponent MatillionGroup MatillionJob MatillionProject Metabase Metabase MetabaseCollection MetabaseDashboard MetabaseQuestion MicroStrategy MicroStrategy MicroStrategyAttribute MicroStrategyCube MicroStrategyDocument MicroStrategyDossier MicroStrategyFact MicroStrategyMetric MicroStrategyProject MicroStrategyReport MicroStrategyVisualization Mode Mode ModeChart ModeCollection ModeQuery ModeReport ModeWorkspace Models Models ModelAttribute ModelAttributeAssociation ModelDataModel ModelEntity ModelEntityAssociation ModelVersion MongoDB MongoDB MongoDBCollection MongDBDatabase Monte Carlo Monte Carlo MCIncident MCMonitor Power BI Power BI Power BI PowerBIColumn PowerBIDashboard PowerBIDataflow PowerBIDataflowEntityColumn PowerBIDataset PowerBIDatasource PowerBIMeasure PowerBIPage PowerBIReport PowerBITable PowerBITile PowerBIWorkspace Preset Preset PresetChart PresetDashboard PresetDataset PresetWorkspace Qlik Qlik QlikApp QlikChart QlikDataset QlikSheet QlikSpace QlikStream Redash Redash RedashDashboard RedashQuery RedashVisualization Salesforce Salesforce SalesforceDashboard SalesforceField SalesforceObject SalesforceOrganization SalesforceReport SaaS Sigma Sigma SigmaWorkbook SigmaPage SigmaDataElement SigmaDataElementField SigmaDataset SigmaDatasetColumn Sisense Sisense SisenseDashboard SisenseDatamodel SisenseDatamodelTable SisenseFolder SisenseWidget Soda Soda SodaCheck Spark Spark SparkJob Superset Superset SupersetChart SupersetDashboard SupersetDataset Tableau Tableau TableauCalculatedField TableauDashboard TableauDatasource TableauDatasourceField TableauFlow TableauMetric TableauProject TableauSite TableauWorkbook TableauWorksheet ThoughtSpot ThoughtSpot ThoughtspotAnswer ThoughtspotColumn ThoughtspotDashlet ThoughtspotLiveboard ThoughtspotTable ThoughtspotView ThoughtspotWorksheet Endpoints Table of contents Obtain the SDK Configure the SDK Using environment variables On client creation What's next? Error-handling Advanced configuration Logging Go SDK ¶ Obtain the SDK ¶ Pre-release state The Go SDK is currently in a pre-release, experimental state. While in this state, we reserve the right to make any changes to it (including breaking changes) without worrying about backwards compatibility, semantic versioning, and so on. If you are eager to experiment with it, it is available on GitHub . You can use Go dependencies to install it directly from there. We welcome your feedback during the pre-release, but cannot commit to any specific revisions or timelines at this point in time. Configure the SDK ¶ There are two ways to configure the SDK: Using environment variables ¶ ATLAN_API_KEY should be given your Atlan API token , for authentication ( don't forget to assign one or more personas to the API token to give access to existing assets! ) ATLAN_BASE_URL should be given your Atlan URL (for example, https://tenant.atlan.com ) Here's an example of setting those environment variables: Set environment variables export ATLAN_BASE_URL=https://tenant.atlan.com export ATLAN_API_KEY=\"...\" main.go 1 2 3 4 5 6 7 8 9 package main import ( \"github.com/atlanhq/atlan-go/atlan/assets\" ) func main () { ctx := assets . NewContext () } On client creation ¶ If you prefer to not use environment variables, you can do the following: main.go 1 2 3 4 5 6 7 8 9 package main import ( \"github.com/atlanhq/atlan-go/atlan/assets\" ) func main () { ctx , _ := assets . Context ( \"https://tenant.atlan.com\" , \"...\" ) } Careful not to expose your API token! We generally discourage including your API token directly in your code, in case you accidentally commit it into a (public) version control system. But it's your choice exactly how you manage the API token and including it for use within the client. That's it — once these are set you can start using your SDK to make live calls against your Atlan instance! 🎉 What's next? ¶ Delve into more detailed examples: Common tasks Common operations on assets, that are available across all assets. Discover actions Asset-specific Operations that are specific to certain assets. Focus on a specific kind of asset Governance structures Operations dealing with governance structures, rather than assets. Manage governance structures Samples Real code samples our customers use to solve particular use cases. Review live samples Searching Delve deep into searching and aggregating metadata. Learn more about searching Events Delve deep into the details of the events Atlan triggers. Learn more about events Error-handling ¶ The SDK defines exceptions for the following categories of error: Exception Description ApiConnectionError Errors when the SDK is unable to connect to the API, for example due to a lack of network access or timeouts. AuthenticationError Errors when the API token configured for the SDK is invalid or expired. ConflictError Errors when there is some conflict with an existing asset and the operation cannot be completed as a result. InvalidRequestError Errors when the request sent to Atlan does not match its expectations. If you are using the built-in methods like toCreate() and toUpdate() this exception should be treated as a bug in the SDK. (These operations take responsibility for avoiding this error.) LogicError Errors where some assumption made in the SDK's code is proven incorrect. If ever raised, they should be reported as bugs against the SDK. NotFoundError Errors when the requested resource or asset does not exist in Atlan. PermissionError Errors when the API token used by the SDK does not have permission to access a resource or carry out an operation on a specific asset . RateLimitError Errors when the Atlan server is being overwhelm",
    "topic": "API_SDK",
    "scraped_at": "2025-09-15 00:27:16"
  },
  {
    "title": "Atlan CLI - Developer",
    "url": "https://developer.atlan.com/sdks/cli/",
    "content": "Developer Toolkits Toolkits Packages Packages Running example Define via template Render your package Develop your logic Test your logic Release (GA) Widget reference Typedefs Typedefs Running example Define via template Render your model Test your model Bind the SDKs Write integration test Test baseline UX Release (GA) Testing Testing Overview Getting started Getting started Other important concepts Documentation conventions Integration options Integration options CLI CLI Table of contents Obtain the CLI Configure the CLI Define data sources What's next? dbt Java Python Kotlin Scala Clojure Go Events Raw REST API Site map Common tasks Common tasks Common asset actions Common asset actions Certify assets Manage announcements Change description Change owners Tag (classify) assets Change custom metadata Link terms to assets Link domains to assets Manage asset READMEs Add asset resources Manage asset relationships with attributes Asset CRUD operations Asset CRUD operations Create an asset Retrieve an asset Update an asset Delete an asset Find and apply suggestions Restore an asset Review changes to an asset Review accesses of an asset Get all assets that... Get all assets that... Search for assets Search examples Lineage Lineage Manage lineage Traverse lineage Bulk updates Bulk updates Combine multiple operations Update multiple assets End-to-end bulk update Event handling Event handling Webhook <> Lambda Webhook <> Lambda Set up Lambda Code your logic Deploy your code Set up webhook Manage your webhook Asset-specific Asset-specific Glossary operations Glossary operations Create objects Retrieval by name Create a hierarchy Categorize terms Traverse category hierarchy Creating assets Creating assets Manage relational assets Manage cube assets Manage object store assets Manage object store assets Manage AWS S3 assets Manage Azure Data Lake Storage assets Manage Google Cloud Storage assets Manage BI assets Manage BI assets Manage Google Data Studio assets Manage Preset assets Manage Superset assets Manage API assets Manage file assets Manage Airflow assets Manage Kafka assets Manage Azure Event Hub assets Manage App assets Manage AI assets Manage Insights assets Manage QuickSight assets Manage DocumentDB assets Manage Data Quality assets Manage Data Quality assets Manage Data Quality rules Connector types and icons Data mesh Data mesh Manage data domains Manage data products Data contracts Data contracts Manage data contracts (via CLI) Manage data contracts (via SDK) Profiling and popularity Profiling and popularity Manage column profiling Manage popularity Governance structures Governance structures Custom metadata Custom metadata Create custom metadata Retrieve custom metadata Update custom metadata Delete custom metadata Manage badges Manage options (enumerations) Tag management Tag management Manage Atlan tags Monitor propagation Access control Access control Manage personas Manage purposes Manage policies Access events API token management Run queries on an asset Users and groups Users and groups Create users and groups Retrieve users and groups Update users and groups Delete users and groups Manage SSO group mapping Packages and workflows Packages and workflows Manage workflows Manage workflow schedules Supported packages Supported packages Athena assets Asset import Asset export (basic) API token connection admin BigQuery assets Connection delete Confluent Kafka assets dbt assets DynamoDB assets Databricks assets Databricks miner Fivetran enrichment Glue assets Looker assets Lineage builder Lineage generator (no transformation) MongoDB assets Oracle assets Postgres assets PowerBI assets Redshift assets Relational assets builder Snowflake assets Snowflake miner Sigma assets SQL Server assets Tableau assets File management File management Reference Reference Searching Searching Querying Querying Term-level queries Full text queries Rank feature queries Compound queries Searchable fields Searchable fields Common search fields Glossary-specific search fields Limiting details Sorting search results Paging search results Aggregating search results Events Events Event triggers Event triggers Asset is created Asset is updated Asset is deleted Custom metadata is added Custom metadata is removed Asset is tagged Asset is untagged Lineage is created Event types Event types ENTITY_CREATE ENTITY_UPDATE ENTITY_DELETE BUSINESS_ATTRIBUTE_UPDATE CLASSIFICATION_ADD CLASSIFICATION_DELETE Specifications Specifications Data contract spec OpenLineage spec Types Types Core Core Referenceable Asset Connection Catalog Tag TagAttachment Access control Access control Persona Purpose AuthPolicy AuthService BusinessPolicy BusinessPolicyException BusinessPolicyIncident BusinessPolicyLog Incident Lineage Lineage ColumnProcess BIProcess Resources Resources Link File Readme ReadmeTemplate Badge Workflows Workflows Workflow WorkflowRun Task Structs Structs Action AuthPolicyCondition AuthPolicyValiditySchedule AwsCloudWatchMetric AwsTag AzureTag BadgeCondition BusinessPolicyRule ByocSsoConfig ColumnValueFrequencyMap DbtMetricFilter DbtJobRun GoogleLabel GoogleTag Histogram KafkaTopicConsumption MCRuleComparison MCRuleSchedule PopularityInsights SourceTagAttachment SourceTagAttachmentValue SourceTagAttribute StarredDetails Enumerations Enumerations AdfActivityState ADLSAccessTier ADLSAccountStatus ADLSEncryptionTypes ADLSLeaseState ADLSLeaseStatus ADLSObjectArchiveStatus ADLSObjectType ADLSPerformance ADLSProvisionState ADLSReplicationType ADLSStorageKind APIQueryParamTypeEnum atlas_operation AtlasGlossaryCategoryType AtlasGlossaryTermType AtlasGlossaryType AtlasGlossaryTermAssignmentStatus AtlasGlossaryTermRelationshipStatus AuthPolicyCategory AuthPolicyResourceCategory AuthPolicyType certificate_status DataGlossary DataProductCriticality DataProductSensitivity DataProductStatus DataProductVisibility DomoCardType DynamoDBSecondaryIndexProjectionType DynamoDBStatus file_type FivetranConnectorStatus FivetranProcessStatus google_datastudio_asset_type icon_type incident_severity kafka_topic_cleanup_policy kafka_topic_compression_type matillion_job_type ModelCardinalityType MongoDBCollectionValidationAction MongoDBCollectionValidationLevel OpenLineageRunState powerbi_endorsement query_username_strategy quick_sight_analysis_status quick_sight_dataset_field_type quick_sight_dataset_import_mode quick_sight_folder_type SchemaRegistrySchemaCompatibility SchemaRegistrySchemaType SourceCostUnitType table_type WorkflowRunStatus WorkflowRunType WorkflowStatus WorkflowType Abstractions Abstractions BI Cloud Insight ObjectStore EventStore DataQuality Metric NoSQL SchemaRegistry Glossary Glossary AtlasGlossary AtlasGlossaryCategory AtlasGlossaryTerm Data mesh Data mesh DataDomain DataProduct DataContract Stakeholder StakeholderTitle Relational databases Relational databases Database Schema Table View MaterialisedView Column Query TablePartition CalculationView BigqueryTag DatabricksUnityCatalogTag SnowflakeDynamicTable SnowflakePipe SnowflakeStream SnowflakeTag Procedure Function SQL Query organization Query organization Namespace Collection Folder Cubes Cubes Cube CubeDimension CubeHierarchy CubeField APIs APIs APIPath APISpec APIObject APIQuery APIField Airflow Airflow AirflowDag AirflowTask Amazon Amazon Amazon DynamoDB Amazon DynamoDB DynamoDBTable DynamoDBSecondaryIndex DynamoDBGlobalSecondaryIndex DynamoDBLocalSecondaryIndex AWS S3 AWS S3 S3Bucket S3Object Amazon QuickSight Amazon QuickSight QuickSightAnalysis QuickSightAnalysisVisual QuickSightDashboard QuickSightDashboardVisual QuickSightDataset QuickSightDatasetField QuickSightFolder Anaplan Anaplan AnaplanWorkspace AnaplanApp AnaplanPage AnaplanModel AnaplanModule AnaplanList AnaplanSystemDimension AnaplanDimension AnaplanLineItem AnaplanView Anomalo Anomalo AnomaloCheck App App Application ApplicationField Microsoft Azure Microsoft Azure Azure Data Factory Azure Data Factory AdfActivity AdfDataflow AdfDataset AdfLinkedservice AdfPipeline Azure Data Lake Storage Azure Data Lake Storage ADLSAccount ADLSContainer ADLSObject Azure Event Hub Azure Event Hub AzureEventHub AzureEventHubConsumerGroup Azure Service Bus Azure Service Bus AzureServiceBusNamespace AzureServiceBusSchema AzureServiceBusTopic Cosmos DB Cosmos DB CosmosMongoDBAccount CosmosMongoDBCollection CosmosMongoDBDatabase Cognite Cognite Cognite3DModel CogniteAsset CogniteEvent CogniteFile CogniteSequence CogniteTimeseries Custom Custom CustomEntity Dataverse Dataverse DataverseEntity DataverseAttribute dbt dbt DbtColumnProcess DbtMetric DbtModel DbtModelColumn DbtProcess DbtSource DbtTag DbtTest Domo Domo DomoCard DomoDashboard DomoDataset DomoDatasetColumn DocumentDB DocumentDB DocumentDBCollection DocumentDBDatabase Fivetran Fivetran FivetranConnector Google Google Google Cloud Storage Google Cloud Storage GCSBucket GCSObject Google Data Studio Google Data Studio DataStudioAsset IBM IBM IBM Cognos Cognos CognosDashboard CognosDatasource CognosExploration CognosFile CognosFolder CognosModule CognosPackage CognosReport Kafka Kafka KafkaConsumerGroup KafkaTopic Looker Looker LookerDashboard LookerExplore LookerField LookerFolder LookerLook LookerModel LookerProject LookerQuery LookerTile LookerView Matillion Matillion MatillionComponent MatillionGroup MatillionJob MatillionProject Metabase Metabase MetabaseCollection MetabaseDashboard MetabaseQuestion MicroStrategy MicroStrategy MicroStrategyAttribute MicroStrategyCube MicroStrategyDocument MicroStrategyDossier MicroStrategyFact MicroStrategyMetric MicroStrategyProject MicroStrategyReport MicroStrategyVisualization Mode Mode ModeChart ModeCollection ModeQuery ModeReport ModeWorkspace Models Models ModelAttribute ModelAttributeAssociation ModelDataModel ModelEntity ModelEntityAssociation ModelVersion MongoDB MongoDB MongoDBCollection MongDBDatabase Monte Carlo Monte Carlo MCIncident MCMonitor Power BI Power BI Power BI PowerBIColumn PowerBIDashboard PowerBIDataflow PowerBIDataflowEntityColumn PowerBIDataset PowerBIDatasource PowerBIMeasure PowerBIPage PowerBIReport PowerBITable PowerBITile PowerBIWorkspace Preset Preset PresetChart PresetDashboard PresetDataset PresetWorkspace Qlik Qlik QlikApp QlikChart QlikDataset QlikSheet QlikSpace QlikStream Redash Redash RedashDashboard RedashQuery RedashVisualization Salesforce Salesforce SalesforceDashboard SalesforceField SalesforceObject SalesforceOrganization SalesforceReport SaaS Sigma Sigma SigmaWorkbook SigmaPage SigmaDataElement SigmaDataElementField SigmaDataset SigmaDatasetColumn Sisense Sisense SisenseDashboard SisenseDatamodel SisenseDatamodelTable SisenseFolder SisenseWidget Soda Soda SodaCheck Spark Spark SparkJob Superset Superset SupersetChart SupersetDashboard SupersetDataset Tableau Tableau TableauCalculatedField TableauDashboard TableauDatasource TableauDatasourceField TableauFlow TableauMetric TableauProject TableauSite TableauWorkbook TableauWorksheet ThoughtSpot ThoughtSpot ThoughtspotAnswer ThoughtspotColumn ThoughtspotDashlet ThoughtspotLiveboard ThoughtspotTable ThoughtspotView ThoughtspotWorksheet Endpoints Table of contents Obtain the CLI Configure the CLI Define data sources What's next? Atlan CLI ¶ Limited functionality (so far) You can use Atlan's command-line interface (CLI) to manage some metadata in Atlan. Currently data contracts and metadata for a limited set of asset types can be managed through the CLI. Obtain the CLI ¶ 0.1.0 For now, the CLI must be downloaded as a pre-built binary: Disclaimer — closed preview This feature is in closed preview and therefore any download and installation from this link will be subject to the terms applicable to Product Release Stages . Contact your Atlan Customer Success Manager for your preview today. If your organization is already part of the closed preview, your installation of the feature from this link shall become subject to the terms and scope of preview as agreed with your organization. Accordingly, any use of the feature outside the agreed scope may result in revocation of the closed preview for your organization. Please contact your system administrator before downloading. Homebrew MacOS (M1) MacOS (Intel) Linux Windows Windows Recommended When installed via Homebrew, you can easily keep things up-to-date. If you do not use it already, see Homebrew's own installation documents for setting up Homebrew itself . brew tap atlanhq/atlan brew install atlan curl -o atlan.tgz -L https://github.com/atlanhq/atlan-cli-releases/releases/latest/download/atlan_Darwin_arm64.tar.gz tar xf atlan.tgz curl -o atlan.tgz -L https://github.com/atlanhq/atlan-cli-releases/releases/latest/download/atlan_Darwin_amd64.tar.gz tar xf atlan.tgz curl -o atlan.tgz -L https://github.com/atlanhq/atlan-cli-releases/releases/latest/download/atlan_Linux_amd64.tar.gz tar -zxf atlan.tgz curl -o atlan.zip -L https://github.com/atlanhq/atlan-cli-releases/releases/latest/download/atlan_Windows_amd64.zip unzip atlan.zip Configure the CLI ¶ 0.1.0 You can configure the CLI using a config file or in some cases environment variables, with the following minimum settings 1 : .atlan/config.yaml 1 2 3 4 5 atlan_api_key : eyZid92... # (1) atlan_base_url : https://tenant.atlan.com # (2) log : enabled : false # (3) level : info # (4) An API token that has access to your assets. The base URL of your tenant (including the https:// ). (Optional) Enable logging to produce more details on what the CLI is doing. When logging is enabled, specify the level of verbosity. Environment variables 1 ATLAN_API_KEY = eyZid92... # (1) An API token that has access to your assets. Define data sources ¶ You should also define data sources in the config file: .atlan/config.yaml 6 7 8 9 10 11 12 data_source snowflake : # (1) type : snowflake # (2) connection : # (3) name : snowflake-prod # (4) qualified_name : \"default/snowflake/1234567890\" # (5) database : db # (6) schema : analytics # (7) Each data source definition must start with data_source , followed by a space and a unique reference name for the data source ( snowflake in this example). Reference name is your choice The reference name you give in the configuration file is only used here and as a reference in any data contracts you define. It need not match the name of the connection or data source in Atlan itself. You must indicate the type of connector for the data source (see connector types for options). Details of the connection must also be provided. You must provide the name of the connection, as it appears in Atlan. You must provide the unique qualified_name of the connection in Atlan. (Optional) You can also specify the database to use for this connection's assets by default, if none is specified in the data contract. (Optional) You can also specify the schema to use for this connection's assets by default, if none is specified in the data contract. These ensure the CLI can map the details you specify in your data contract to the appropriate corresponding asset in Atlan. What's next?",
    "topic": "API_SDK",
    "scraped_at": "2025-09-15 00:27:17"
  },
  {
    "title": "Managing API tokens - Developer",
    "url": "https://developer.atlan.com/snippets/access/tokens/",
    "content": "Developer Toolkits Toolkits Packages Packages Running example Define via template Render your package Develop your logic Test your logic Release (GA) Widget reference Typedefs Typedefs Running example Define via template Render your model Test your model Bind the SDKs Write integration test Test baseline UX Release (GA) Testing Testing Overview Getting started Getting started Other important concepts Documentation conventions Integration options Integration options CLI dbt Java Python Kotlin Scala Clojure Go Events Raw REST API Site map Common tasks Common tasks Common asset actions Common asset actions Certify assets Manage announcements Change description Change owners Tag (classify) assets Change custom metadata Link terms to assets Link domains to assets Manage asset READMEs Add asset resources Manage asset relationships with attributes Asset CRUD operations Asset CRUD operations Create an asset Retrieve an asset Update an asset Delete an asset Find and apply suggestions Restore an asset Review changes to an asset Review accesses of an asset Get all assets that... Get all assets that... Search for assets Search examples Lineage Lineage Manage lineage Traverse lineage Bulk updates Bulk updates Combine multiple operations Update multiple assets End-to-end bulk update Event handling Event handling Webhook <> Lambda Webhook <> Lambda Set up Lambda Code your logic Deploy your code Set up webhook Manage your webhook Asset-specific Asset-specific Glossary operations Glossary operations Create objects Retrieval by name Create a hierarchy Categorize terms Traverse category hierarchy Creating assets Creating assets Manage relational assets Manage cube assets Manage object store assets Manage object store assets Manage AWS S3 assets Manage Azure Data Lake Storage assets Manage Google Cloud Storage assets Manage BI assets Manage BI assets Manage Google Data Studio assets Manage Preset assets Manage Superset assets Manage API assets Manage file assets Manage Airflow assets Manage Kafka assets Manage Azure Event Hub assets Manage App assets Manage AI assets Manage Insights assets Manage QuickSight assets Manage DocumentDB assets Manage Data Quality assets Manage Data Quality assets Manage Data Quality rules Connector types and icons Data mesh Data mesh Manage data domains Manage data products Data contracts Data contracts Manage data contracts (via CLI) Manage data contracts (via SDK) Profiling and popularity Profiling and popularity Manage column profiling Manage popularity Governance structures Governance structures Custom metadata Custom metadata Create custom metadata Retrieve custom metadata Update custom metadata Delete custom metadata Manage badges Manage options (enumerations) Tag management Tag management Manage Atlan tags Monitor propagation Access control Access control Manage personas Manage purposes Manage policies Access events API token management API token management Table of contents Create an API token Retrieve an API token Update an API token Delete an API token Give permissions to API token Link an API token to a persona Add an API token as a connection admin Add an API token as a collection editor Add an API token as a collection viewer Obtain a user's bearer token Run queries on an asset Users and groups Users and groups Create users and groups Retrieve users and groups Update users and groups Delete users and groups Manage SSO group mapping Packages and workflows Packages and workflows Manage workflows Manage workflow schedules Supported packages Supported packages Athena assets Asset import Asset export (basic) API token connection admin BigQuery assets Connection delete Confluent Kafka assets dbt assets DynamoDB assets Databricks assets Databricks miner Fivetran enrichment Glue assets Looker assets Lineage builder Lineage generator (no transformation) MongoDB assets Oracle assets Postgres assets PowerBI assets Redshift assets Relational assets builder Snowflake assets Snowflake miner Sigma assets SQL Server assets Tableau assets File management File management Reference Reference Searching Searching Querying Querying Term-level queries Full text queries Rank feature queries Compound queries Searchable fields Searchable fields Common search fields Glossary-specific search fields Limiting details Sorting search results Paging search results Aggregating search results Events Events Event triggers Event triggers Asset is created Asset is updated Asset is deleted Custom metadata is added Custom metadata is removed Asset is tagged Asset is untagged Lineage is created Event types Event types ENTITY_CREATE ENTITY_UPDATE ENTITY_DELETE BUSINESS_ATTRIBUTE_UPDATE CLASSIFICATION_ADD CLASSIFICATION_DELETE Specifications Specifications Data contract spec OpenLineage spec Types Types Core Core Referenceable Asset Connection Catalog Tag TagAttachment Access control Access control Persona Purpose AuthPolicy AuthService BusinessPolicy BusinessPolicyException BusinessPolicyIncident BusinessPolicyLog Incident Lineage Lineage ColumnProcess BIProcess Resources Resources Link File Readme ReadmeTemplate Badge Workflows Workflows Workflow WorkflowRun Task Structs Structs Action AuthPolicyCondition AuthPolicyValiditySchedule AwsCloudWatchMetric AwsTag AzureTag BadgeCondition BusinessPolicyRule ByocSsoConfig ColumnValueFrequencyMap DbtMetricFilter DbtJobRun GoogleLabel GoogleTag Histogram KafkaTopicConsumption MCRuleComparison MCRuleSchedule PopularityInsights SourceTagAttachment SourceTagAttachmentValue SourceTagAttribute StarredDetails Enumerations Enumerations AdfActivityState ADLSAccessTier ADLSAccountStatus ADLSEncryptionTypes ADLSLeaseState ADLSLeaseStatus ADLSObjectArchiveStatus ADLSObjectType ADLSPerformance ADLSProvisionState ADLSReplicationType ADLSStorageKind APIQueryParamTypeEnum atlas_operation AtlasGlossaryCategoryType AtlasGlossaryTermType AtlasGlossaryType AtlasGlossaryTermAssignmentStatus AtlasGlossaryTermRelationshipStatus AuthPolicyCategory AuthPolicyResourceCategory AuthPolicyType certificate_status DataGlossary DataProductCriticality DataProductSensitivity DataProductStatus DataProductVisibility DomoCardType DynamoDBSecondaryIndexProjectionType DynamoDBStatus file_type FivetranConnectorStatus FivetranProcessStatus google_datastudio_asset_type icon_type incident_severity kafka_topic_cleanup_policy kafka_topic_compression_type matillion_job_type ModelCardinalityType MongoDBCollectionValidationAction MongoDBCollectionValidationLevel OpenLineageRunState powerbi_endorsement query_username_strategy quick_sight_analysis_status quick_sight_dataset_field_type quick_sight_dataset_import_mode quick_sight_folder_type SchemaRegistrySchemaCompatibility SchemaRegistrySchemaType SourceCostUnitType table_type WorkflowRunStatus WorkflowRunType WorkflowStatus WorkflowType Abstractions Abstractions BI Cloud Insight ObjectStore EventStore DataQuality Metric NoSQL SchemaRegistry Glossary Glossary AtlasGlossary AtlasGlossaryCategory AtlasGlossaryTerm Data mesh Data mesh DataDomain DataProduct DataContract Stakeholder StakeholderTitle Relational databases Relational databases Database Schema Table View MaterialisedView Column Query TablePartition CalculationView BigqueryTag DatabricksUnityCatalogTag SnowflakeDynamicTable SnowflakePipe SnowflakeStream SnowflakeTag Procedure Function SQL Query organization Query organization Namespace Collection Folder Cubes Cubes Cube CubeDimension CubeHierarchy CubeField APIs APIs APIPath APISpec APIObject APIQuery APIField Airflow Airflow AirflowDag AirflowTask Amazon Amazon Amazon DynamoDB Amazon DynamoDB DynamoDBTable DynamoDBSecondaryIndex DynamoDBGlobalSecondaryIndex DynamoDBLocalSecondaryIndex AWS S3 AWS S3 S3Bucket S3Object Amazon QuickSight Amazon QuickSight QuickSightAnalysis QuickSightAnalysisVisual QuickSightDashboard QuickSightDashboardVisual QuickSightDataset QuickSightDatasetField QuickSightFolder Anaplan Anaplan AnaplanWorkspace AnaplanApp AnaplanPage AnaplanModel AnaplanModule AnaplanList AnaplanSystemDimension AnaplanDimension AnaplanLineItem AnaplanView Anomalo Anomalo AnomaloCheck App App Application ApplicationField Microsoft Azure Microsoft Azure Azure Data Factory Azure Data Factory AdfActivity AdfDataflow AdfDataset AdfLinkedservice AdfPipeline Azure Data Lake Storage Azure Data Lake Storage ADLSAccount ADLSContainer ADLSObject Azure Event Hub Azure Event Hub AzureEventHub AzureEventHubConsumerGroup Azure Service Bus Azure Service Bus AzureServiceBusNamespace AzureServiceBusSchema AzureServiceBusTopic Cosmos DB Cosmos DB CosmosMongoDBAccount CosmosMongoDBCollection CosmosMongoDBDatabase Cognite Cognite Cognite3DModel CogniteAsset CogniteEvent CogniteFile CogniteSequence CogniteTimeseries Custom Custom CustomEntity Dataverse Dataverse DataverseEntity DataverseAttribute dbt dbt DbtColumnProcess DbtMetric DbtModel DbtModelColumn DbtProcess DbtSource DbtTag DbtTest Domo Domo DomoCard DomoDashboard DomoDataset DomoDatasetColumn DocumentDB DocumentDB DocumentDBCollection DocumentDBDatabase Fivetran Fivetran FivetranConnector Google Google Google Cloud Storage Google Cloud Storage GCSBucket GCSObject Google Data Studio Google Data Studio DataStudioAsset IBM IBM IBM Cognos Cognos CognosDashboard CognosDatasource CognosExploration CognosFile CognosFolder CognosModule CognosPackage CognosReport Kafka Kafka KafkaConsumerGroup KafkaTopic Looker Looker LookerDashboard LookerExplore LookerField LookerFolder LookerLook LookerModel LookerProject LookerQuery LookerTile LookerView Matillion Matillion MatillionComponent MatillionGroup MatillionJob MatillionProject Metabase Metabase MetabaseCollection MetabaseDashboard MetabaseQuestion MicroStrategy MicroStrategy MicroStrategyAttribute MicroStrategyCube MicroStrategyDocument MicroStrategyDossier MicroStrategyFact MicroStrategyMetric MicroStrategyProject MicroStrategyReport MicroStrategyVisualization Mode Mode ModeChart ModeCollection ModeQuery ModeReport ModeWorkspace Models Models ModelAttribute ModelAttributeAssociation ModelDataModel ModelEntity ModelEntityAssociation ModelVersion MongoDB MongoDB MongoDBCollection MongDBDatabase Monte Carlo Monte Carlo MCIncident MCMonitor Power BI Power BI Power BI PowerBIColumn PowerBIDashboard PowerBIDataflow PowerBIDataflowEntityColumn PowerBIDataset PowerBIDatasource PowerBIMeasure PowerBIPage PowerBIReport PowerBITable PowerBITile PowerBIWorkspace Preset Preset PresetChart PresetDashboard PresetDataset PresetWorkspace Qlik Qlik QlikApp QlikChart QlikDataset QlikSheet QlikSpace QlikStream Redash Redash RedashDashboard RedashQuery RedashVisualization Salesforce Salesforce SalesforceDashboard SalesforceField SalesforceObject SalesforceOrganization SalesforceReport SaaS Sigma Sigma SigmaWorkbook SigmaPage SigmaDataElement SigmaDataElementField SigmaDataset SigmaDatasetColumn Sisense Sisense SisenseDashboard SisenseDatamodel SisenseDatamodelTable SisenseFolder SisenseWidget Soda Soda SodaCheck Spark Spark SparkJob Superset Superset SupersetChart SupersetDashboard SupersetDataset Tableau Tableau TableauCalculatedField TableauDashboard TableauDatasource TableauDatasourceField TableauFlow TableauMetric TableauProject TableauSite TableauWorkbook TableauWorksheet ThoughtSpot ThoughtSpot ThoughtspotAnswer ThoughtspotColumn ThoughtspotDashlet ThoughtspotLiveboard ThoughtspotTable ThoughtspotView ThoughtspotWorksheet Endpoints Table of contents Create an API token Retrieve an API token Update an API token Delete an API token Give permissions to API token Link an API token to a persona Add an API token as a connection admin Add an API token as a collection editor Add an API token as a collection viewer Obtain a user's bearer token /api/service/apikeys (GET) /api/service/apikeys (POST) /api/service/apikeys/{guid} (DELETE) /api/service/apikeys/{guid} (POST) API tokens ¶ API tokens are a way to provide programmatic access to Atlan without relying on a user's own credentials or permissions. API tokens are not personal access tokens API tokens are commonly thought to be synonymous with personal access tokens (PAT). In other words, many developers assume that an API token will have the same privileges and permissions as the user who created them. This is not the case. API tokens are their own unique actor and carry entirely their own set of permissions, completely independent from the user who created or otherwise maintains them. Create an API token ¶ 0.0.14 1.4.0 4.0.0 To create a new API token: Java Python Kotlin Go Raw REST API Create an API token 1 2 ApiToken token = ApiToken . create ( client , \"token-name\" ); // (1) String tokenValue = token . getAttributes (). getAccessToken (); // (2) You can use the ApiToken.create() method to create a new API token. Because this operation will create the token in Atlan, you must provide it an AtlanClient through which to connect to the tenant. The actual value of the API token will only be available in this immediate response of the creation, under .getAttributes().getAccessToken() . Cannot be accessed again later You will not be able to retrieve the actual value of the API token again at a later point, for example when retrieving or updating the API token. Create an API token 1 2 3 4 5 from pyatlan.client.atlan import AtlanClient client = AtlanClient () token = client . token . create ( \"token-name\" ) # (1) token_value = token . attributes . access_token # (2) You can use the token.create() method to create a new API token. The actual value of the API token will only be available in this immediate response of the creation, under .attributes.access_token . Cannot be accessed again later You will not be able to retrieve the actual value of the API token again at a later point, for example when retrieving or updating the API token. Create an API token 1 2 val token = ApiToken . create ( client , \"token-name\" ) // (1) val tokenValue = token . attributes . accessToken // (2) You can use the ApiToken.create() method to create a new API token. Because this operation will create the token in Atlan, you must provide it an AtlanClient through which to connect to the tenant. The actual value of the API token will only be available in this immediate response of the creation, under .attributes.accessToken . Cannot be accessed again later You will not be able to retrieve the actual value of the API token again at a later point, for example when retrieving or updating the API token. Create an API token 1 2 3 4 5 6 displayName := \"token-name\" token , atlanErr := ctx . TokenClient . Create ( & displayName , nil , nil , nil ) // (1) if atlanErr != nil { logger . Log . Errorf ( \"Error : %v\" , atlanErr ) } tokenValue := * token . Attributes . AccessToken // (2) You can use the TokenClient.Create() method to create a new API token. The actual value of the API token will only be available in this immediate response of the creation, under .Attributes.AccessToken . Cannot be accessed again later You will not be able to retrieve the actual value of the API token again at a later point, for example ",
    "topic": "API_SDK",
    "scraped_at": "2025-09-15 00:27:18"
  },
  {
    "title": "Access control and personalization - Developer",
    "url": "https://developer.atlan.com/snippets/access/",
    "content": "Developer Toolkits Toolkits Packages Packages Running example Define via template Render your package Develop your logic Test your logic Release (GA) Widget reference Typedefs Typedefs Running example Define via template Render your model Test your model Bind the SDKs Write integration test Test baseline UX Release (GA) Testing Testing Overview Getting started Getting started Other important concepts Documentation conventions Integration options Integration options CLI dbt Java Python Kotlin Scala Clojure Go Events Raw REST API Site map Common tasks Common tasks Common asset actions Common asset actions Certify assets Manage announcements Change description Change owners Tag (classify) assets Change custom metadata Link terms to assets Link domains to assets Manage asset READMEs Add asset resources Manage asset relationships with attributes Asset CRUD operations Asset CRUD operations Create an asset Retrieve an asset Update an asset Delete an asset Find and apply suggestions Restore an asset Review changes to an asset Review accesses of an asset Get all assets that... Get all assets that... Search for assets Search examples Lineage Lineage Manage lineage Traverse lineage Bulk updates Bulk updates Combine multiple operations Update multiple assets End-to-end bulk update Event handling Event handling Webhook <> Lambda Webhook <> Lambda Set up Lambda Code your logic Deploy your code Set up webhook Manage your webhook Asset-specific Asset-specific Glossary operations Glossary operations Create objects Retrieval by name Create a hierarchy Categorize terms Traverse category hierarchy Creating assets Creating assets Manage relational assets Manage cube assets Manage object store assets Manage object store assets Manage AWS S3 assets Manage Azure Data Lake Storage assets Manage Google Cloud Storage assets Manage BI assets Manage BI assets Manage Google Data Studio assets Manage Preset assets Manage Superset assets Manage API assets Manage file assets Manage Airflow assets Manage Kafka assets Manage Azure Event Hub assets Manage App assets Manage AI assets Manage Insights assets Manage QuickSight assets Manage DocumentDB assets Manage Data Quality assets Manage Data Quality assets Manage Data Quality rules Connector types and icons Data mesh Data mesh Manage data domains Manage data products Data contracts Data contracts Manage data contracts (via CLI) Manage data contracts (via SDK) Profiling and popularity Profiling and popularity Manage column profiling Manage popularity Governance structures Governance structures Custom metadata Custom metadata Create custom metadata Retrieve custom metadata Update custom metadata Delete custom metadata Manage badges Manage options (enumerations) Tag management Tag management Manage Atlan tags Monitor propagation Access control Access control Manage personas Manage purposes Manage policies Access events API token management Run queries on an asset Users and groups Users and groups Create users and groups Retrieve users and groups Update users and groups Delete users and groups Manage SSO group mapping Packages and workflows Packages and workflows Manage workflows Manage workflow schedules Supported packages Supported packages Athena assets Asset import Asset export (basic) API token connection admin BigQuery assets Connection delete Confluent Kafka assets dbt assets DynamoDB assets Databricks assets Databricks miner Fivetran enrichment Glue assets Looker assets Lineage builder Lineage generator (no transformation) MongoDB assets Oracle assets Postgres assets PowerBI assets Redshift assets Relational assets builder Snowflake assets Snowflake miner Sigma assets SQL Server assets Tableau assets File management File management Reference Reference Searching Searching Querying Querying Term-level queries Full text queries Rank feature queries Compound queries Searchable fields Searchable fields Common search fields Glossary-specific search fields Limiting details Sorting search results Paging search results Aggregating search results Events Events Event triggers Event triggers Asset is created Asset is updated Asset is deleted Custom metadata is added Custom metadata is removed Asset is tagged Asset is untagged Lineage is created Event types Event types ENTITY_CREATE ENTITY_UPDATE ENTITY_DELETE BUSINESS_ATTRIBUTE_UPDATE CLASSIFICATION_ADD CLASSIFICATION_DELETE Specifications Specifications Data contract spec OpenLineage spec Types Types Core Core Referenceable Asset Connection Catalog Tag TagAttachment Access control Access control Persona Purpose AuthPolicy AuthService BusinessPolicy BusinessPolicyException BusinessPolicyIncident BusinessPolicyLog Incident Lineage Lineage ColumnProcess BIProcess Resources Resources Link File Readme ReadmeTemplate Badge Workflows Workflows Workflow WorkflowRun Task Structs Structs Action AuthPolicyCondition AuthPolicyValiditySchedule AwsCloudWatchMetric AwsTag AzureTag BadgeCondition BusinessPolicyRule ByocSsoConfig ColumnValueFrequencyMap DbtMetricFilter DbtJobRun GoogleLabel GoogleTag Histogram KafkaTopicConsumption MCRuleComparison MCRuleSchedule PopularityInsights SourceTagAttachment SourceTagAttachmentValue SourceTagAttribute StarredDetails Enumerations Enumerations AdfActivityState ADLSAccessTier ADLSAccountStatus ADLSEncryptionTypes ADLSLeaseState ADLSLeaseStatus ADLSObjectArchiveStatus ADLSObjectType ADLSPerformance ADLSProvisionState ADLSReplicationType ADLSStorageKind APIQueryParamTypeEnum atlas_operation AtlasGlossaryCategoryType AtlasGlossaryTermType AtlasGlossaryType AtlasGlossaryTermAssignmentStatus AtlasGlossaryTermRelationshipStatus AuthPolicyCategory AuthPolicyResourceCategory AuthPolicyType certificate_status DataGlossary DataProductCriticality DataProductSensitivity DataProductStatus DataProductVisibility DomoCardType DynamoDBSecondaryIndexProjectionType DynamoDBStatus file_type FivetranConnectorStatus FivetranProcessStatus google_datastudio_asset_type icon_type incident_severity kafka_topic_cleanup_policy kafka_topic_compression_type matillion_job_type ModelCardinalityType MongoDBCollectionValidationAction MongoDBCollectionValidationLevel OpenLineageRunState powerbi_endorsement query_username_strategy quick_sight_analysis_status quick_sight_dataset_field_type quick_sight_dataset_import_mode quick_sight_folder_type SchemaRegistrySchemaCompatibility SchemaRegistrySchemaType SourceCostUnitType table_type WorkflowRunStatus WorkflowRunType WorkflowStatus WorkflowType Abstractions Abstractions BI Cloud Insight ObjectStore EventStore DataQuality Metric NoSQL SchemaRegistry Glossary Glossary AtlasGlossary AtlasGlossaryCategory AtlasGlossaryTerm Data mesh Data mesh DataDomain DataProduct DataContract Stakeholder StakeholderTitle Relational databases Relational databases Database Schema Table View MaterialisedView Column Query TablePartition CalculationView BigqueryTag DatabricksUnityCatalogTag SnowflakeDynamicTable SnowflakePipe SnowflakeStream SnowflakeTag Procedure Function SQL Query organization Query organization Namespace Collection Folder Cubes Cubes Cube CubeDimension CubeHierarchy CubeField APIs APIs APIPath APISpec APIObject APIQuery APIField Airflow Airflow AirflowDag AirflowTask Amazon Amazon Amazon DynamoDB Amazon DynamoDB DynamoDBTable DynamoDBSecondaryIndex DynamoDBGlobalSecondaryIndex DynamoDBLocalSecondaryIndex AWS S3 AWS S3 S3Bucket S3Object Amazon QuickSight Amazon QuickSight QuickSightAnalysis QuickSightAnalysisVisual QuickSightDashboard QuickSightDashboardVisual QuickSightDataset QuickSightDatasetField QuickSightFolder Anaplan Anaplan AnaplanWorkspace AnaplanApp AnaplanPage AnaplanModel AnaplanModule AnaplanList AnaplanSystemDimension AnaplanDimension AnaplanLineItem AnaplanView Anomalo Anomalo AnomaloCheck App App Application ApplicationField Microsoft Azure Microsoft Azure Azure Data Factory Azure Data Factory AdfActivity AdfDataflow AdfDataset AdfLinkedservice AdfPipeline Azure Data Lake Storage Azure Data Lake Storage ADLSAccount ADLSContainer ADLSObject Azure Event Hub Azure Event Hub AzureEventHub AzureEventHubConsumerGroup Azure Service Bus Azure Service Bus AzureServiceBusNamespace AzureServiceBusSchema AzureServiceBusTopic Cosmos DB Cosmos DB CosmosMongoDBAccount CosmosMongoDBCollection CosmosMongoDBDatabase Cognite Cognite Cognite3DModel CogniteAsset CogniteEvent CogniteFile CogniteSequence CogniteTimeseries Custom Custom CustomEntity Dataverse Dataverse DataverseEntity DataverseAttribute dbt dbt DbtColumnProcess DbtMetric DbtModel DbtModelColumn DbtProcess DbtSource DbtTag DbtTest Domo Domo DomoCard DomoDashboard DomoDataset DomoDatasetColumn DocumentDB DocumentDB DocumentDBCollection DocumentDBDatabase Fivetran Fivetran FivetranConnector Google Google Google Cloud Storage Google Cloud Storage GCSBucket GCSObject Google Data Studio Google Data Studio DataStudioAsset IBM IBM IBM Cognos Cognos CognosDashboard CognosDatasource CognosExploration CognosFile CognosFolder CognosModule CognosPackage CognosReport Kafka Kafka KafkaConsumerGroup KafkaTopic Looker Looker LookerDashboard LookerExplore LookerField LookerFolder LookerLook LookerModel LookerProject LookerQuery LookerTile LookerView Matillion Matillion MatillionComponent MatillionGroup MatillionJob MatillionProject Metabase Metabase MetabaseCollection MetabaseDashboard MetabaseQuestion MicroStrategy MicroStrategy MicroStrategyAttribute MicroStrategyCube MicroStrategyDocument MicroStrategyDossier MicroStrategyFact MicroStrategyMetric MicroStrategyProject MicroStrategyReport MicroStrategyVisualization Mode Mode ModeChart ModeCollection ModeQuery ModeReport ModeWorkspace Models Models ModelAttribute ModelAttributeAssociation ModelDataModel ModelEntity ModelEntityAssociation ModelVersion MongoDB MongoDB MongoDBCollection MongDBDatabase Monte Carlo Monte Carlo MCIncident MCMonitor Power BI Power BI Power BI PowerBIColumn PowerBIDashboard PowerBIDataflow PowerBIDataflowEntityColumn PowerBIDataset PowerBIDatasource PowerBIMeasure PowerBIPage PowerBIReport PowerBITable PowerBITile PowerBIWorkspace Preset Preset PresetChart PresetDashboard PresetDataset PresetWorkspace Qlik Qlik QlikApp QlikChart QlikDataset QlikSheet QlikSpace QlikStream Redash Redash RedashDashboard RedashQuery RedashVisualization Salesforce Salesforce SalesforceDashboard SalesforceField SalesforceObject SalesforceOrganization SalesforceReport SaaS Sigma Sigma SigmaWorkbook SigmaPage SigmaDataElement SigmaDataElementField SigmaDataset SigmaDatasetColumn Sisense Sisense SisenseDashboard SisenseDatamodel SisenseDatamodelTable SisenseFolder SisenseWidget Soda Soda SodaCheck Spark Spark SparkJob Superset Superset SupersetChart SupersetDashboard SupersetDataset Tableau Tableau TableauCalculatedField TableauDashboard TableauDatasource TableauDatasourceField TableauFlow TableauMetric TableauProject TableauSite TableauWorkbook TableauWorksheet ThoughtSpot ThoughtSpot ThoughtspotAnswer ThoughtspotColumn ThoughtspotDashlet ThoughtspotLiveboard ThoughtspotTable ThoughtspotView ThoughtspotWorksheet Endpoints Access control and personalization ¶ Atlan provides a number of ways to manage access control , at both coarse-grained and granular levels. The primary vehicles for granular access control are personas , purposes , and the access policies defined within these. Both personas and purposes can also be used to personalize the experience, by controlling: which assets are visible to a particular audience which details of each of those assets are visible 2023-01-27 2024-03-14 Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "topic": "API_SDK",
    "scraped_at": "2025-09-15 00:27:18"
  },
  {
    "title": "Managing personas - Developer",
    "url": "https://developer.atlan.com/snippets/access/personas/",
    "content": "Developer Toolkits Toolkits Packages Packages Running example Define via template Render your package Develop your logic Test your logic Release (GA) Widget reference Typedefs Typedefs Running example Define via template Render your model Test your model Bind the SDKs Write integration test Test baseline UX Release (GA) Testing Testing Overview Getting started Getting started Other important concepts Documentation conventions Integration options Integration options CLI dbt Java Python Kotlin Scala Clojure Go Events Raw REST API Site map Common tasks Common tasks Common asset actions Common asset actions Certify assets Manage announcements Change description Change owners Tag (classify) assets Change custom metadata Link terms to assets Link domains to assets Manage asset READMEs Add asset resources Manage asset relationships with attributes Asset CRUD operations Asset CRUD operations Create an asset Retrieve an asset Update an asset Delete an asset Find and apply suggestions Restore an asset Review changes to an asset Review accesses of an asset Get all assets that... Get all assets that... Search for assets Search examples Lineage Lineage Manage lineage Traverse lineage Bulk updates Bulk updates Combine multiple operations Update multiple assets End-to-end bulk update Event handling Event handling Webhook <> Lambda Webhook <> Lambda Set up Lambda Code your logic Deploy your code Set up webhook Manage your webhook Asset-specific Asset-specific Glossary operations Glossary operations Create objects Retrieval by name Create a hierarchy Categorize terms Traverse category hierarchy Creating assets Creating assets Manage relational assets Manage cube assets Manage object store assets Manage object store assets Manage AWS S3 assets Manage Azure Data Lake Storage assets Manage Google Cloud Storage assets Manage BI assets Manage BI assets Manage Google Data Studio assets Manage Preset assets Manage Superset assets Manage API assets Manage file assets Manage Airflow assets Manage Kafka assets Manage Azure Event Hub assets Manage App assets Manage AI assets Manage Insights assets Manage QuickSight assets Manage DocumentDB assets Manage Data Quality assets Manage Data Quality assets Manage Data Quality rules Connector types and icons Data mesh Data mesh Manage data domains Manage data products Data contracts Data contracts Manage data contracts (via CLI) Manage data contracts (via SDK) Profiling and popularity Profiling and popularity Manage column profiling Manage popularity Governance structures Governance structures Custom metadata Custom metadata Create custom metadata Retrieve custom metadata Update custom metadata Delete custom metadata Manage badges Manage options (enumerations) Tag management Tag management Manage Atlan tags Monitor propagation Access control Access control Manage personas Manage personas Table of contents List personas Create a persona Retrieve a persona Update a persona Delete a persona Activate or deactivate a persona Add subjects to a persona Add policies to a persona Add a metadata policy Add a data policy Add a glossary policy Add a domain policy List policies in a persona Personalize the persona Manage purposes Manage policies Access events API token management Run queries on an asset Users and groups Users and groups Create users and groups Retrieve users and groups Update users and groups Delete users and groups Manage SSO group mapping Packages and workflows Packages and workflows Manage workflows Manage workflow schedules Supported packages Supported packages Athena assets Asset import Asset export (basic) API token connection admin BigQuery assets Connection delete Confluent Kafka assets dbt assets DynamoDB assets Databricks assets Databricks miner Fivetran enrichment Glue assets Looker assets Lineage builder Lineage generator (no transformation) MongoDB assets Oracle assets Postgres assets PowerBI assets Redshift assets Relational assets builder Snowflake assets Snowflake miner Sigma assets SQL Server assets Tableau assets File management File management Reference Reference Searching Searching Querying Querying Term-level queries Full text queries Rank feature queries Compound queries Searchable fields Searchable fields Common search fields Glossary-specific search fields Limiting details Sorting search results Paging search results Aggregating search results Events Events Event triggers Event triggers Asset is created Asset is updated Asset is deleted Custom metadata is added Custom metadata is removed Asset is tagged Asset is untagged Lineage is created Event types Event types ENTITY_CREATE ENTITY_UPDATE ENTITY_DELETE BUSINESS_ATTRIBUTE_UPDATE CLASSIFICATION_ADD CLASSIFICATION_DELETE Specifications Specifications Data contract spec OpenLineage spec Types Types Core Core Referenceable Asset Connection Catalog Tag TagAttachment Access control Access control Persona Purpose AuthPolicy AuthService BusinessPolicy BusinessPolicyException BusinessPolicyIncident BusinessPolicyLog Incident Lineage Lineage ColumnProcess BIProcess Resources Resources Link File Readme ReadmeTemplate Badge Workflows Workflows Workflow WorkflowRun Task Structs Structs Action AuthPolicyCondition AuthPolicyValiditySchedule AwsCloudWatchMetric AwsTag AzureTag BadgeCondition BusinessPolicyRule ByocSsoConfig ColumnValueFrequencyMap DbtMetricFilter DbtJobRun GoogleLabel GoogleTag Histogram KafkaTopicConsumption MCRuleComparison MCRuleSchedule PopularityInsights SourceTagAttachment SourceTagAttachmentValue SourceTagAttribute StarredDetails Enumerations Enumerations AdfActivityState ADLSAccessTier ADLSAccountStatus ADLSEncryptionTypes ADLSLeaseState ADLSLeaseStatus ADLSObjectArchiveStatus ADLSObjectType ADLSPerformance ADLSProvisionState ADLSReplicationType ADLSStorageKind APIQueryParamTypeEnum atlas_operation AtlasGlossaryCategoryType AtlasGlossaryTermType AtlasGlossaryType AtlasGlossaryTermAssignmentStatus AtlasGlossaryTermRelationshipStatus AuthPolicyCategory AuthPolicyResourceCategory AuthPolicyType certificate_status DataGlossary DataProductCriticality DataProductSensitivity DataProductStatus DataProductVisibility DomoCardType DynamoDBSecondaryIndexProjectionType DynamoDBStatus file_type FivetranConnectorStatus FivetranProcessStatus google_datastudio_asset_type icon_type incident_severity kafka_topic_cleanup_policy kafka_topic_compression_type matillion_job_type ModelCardinalityType MongoDBCollectionValidationAction MongoDBCollectionValidationLevel OpenLineageRunState powerbi_endorsement query_username_strategy quick_sight_analysis_status quick_sight_dataset_field_type quick_sight_dataset_import_mode quick_sight_folder_type SchemaRegistrySchemaCompatibility SchemaRegistrySchemaType SourceCostUnitType table_type WorkflowRunStatus WorkflowRunType WorkflowStatus WorkflowType Abstractions Abstractions BI Cloud Insight ObjectStore EventStore DataQuality Metric NoSQL SchemaRegistry Glossary Glossary AtlasGlossary AtlasGlossaryCategory AtlasGlossaryTerm Data mesh Data mesh DataDomain DataProduct DataContract Stakeholder StakeholderTitle Relational databases Relational databases Database Schema Table View MaterialisedView Column Query TablePartition CalculationView BigqueryTag DatabricksUnityCatalogTag SnowflakeDynamicTable SnowflakePipe SnowflakeStream SnowflakeTag Procedure Function SQL Query organization Query organization Namespace Collection Folder Cubes Cubes Cube CubeDimension CubeHierarchy CubeField APIs APIs APIPath APISpec APIObject APIQuery APIField Airflow Airflow AirflowDag AirflowTask Amazon Amazon Amazon DynamoDB Amazon DynamoDB DynamoDBTable DynamoDBSecondaryIndex DynamoDBGlobalSecondaryIndex DynamoDBLocalSecondaryIndex AWS S3 AWS S3 S3Bucket S3Object Amazon QuickSight Amazon QuickSight QuickSightAnalysis QuickSightAnalysisVisual QuickSightDashboard QuickSightDashboardVisual QuickSightDataset QuickSightDatasetField QuickSightFolder Anaplan Anaplan AnaplanWorkspace AnaplanApp AnaplanPage AnaplanModel AnaplanModule AnaplanList AnaplanSystemDimension AnaplanDimension AnaplanLineItem AnaplanView Anomalo Anomalo AnomaloCheck App App Application ApplicationField Microsoft Azure Microsoft Azure Azure Data Factory Azure Data Factory AdfActivity AdfDataflow AdfDataset AdfLinkedservice AdfPipeline Azure Data Lake Storage Azure Data Lake Storage ADLSAccount ADLSContainer ADLSObject Azure Event Hub Azure Event Hub AzureEventHub AzureEventHubConsumerGroup Azure Service Bus Azure Service Bus AzureServiceBusNamespace AzureServiceBusSchema AzureServiceBusTopic Cosmos DB Cosmos DB CosmosMongoDBAccount CosmosMongoDBCollection CosmosMongoDBDatabase Cognite Cognite Cognite3DModel CogniteAsset CogniteEvent CogniteFile CogniteSequence CogniteTimeseries Custom Custom CustomEntity Dataverse Dataverse DataverseEntity DataverseAttribute dbt dbt DbtColumnProcess DbtMetric DbtModel DbtModelColumn DbtProcess DbtSource DbtTag DbtTest Domo Domo DomoCard DomoDashboard DomoDataset DomoDatasetColumn DocumentDB DocumentDB DocumentDBCollection DocumentDBDatabase Fivetran Fivetran FivetranConnector Google Google Google Cloud Storage Google Cloud Storage GCSBucket GCSObject Google Data Studio Google Data Studio DataStudioAsset IBM IBM IBM Cognos Cognos CognosDashboard CognosDatasource CognosExploration CognosFile CognosFolder CognosModule CognosPackage CognosReport Kafka Kafka KafkaConsumerGroup KafkaTopic Looker Looker LookerDashboard LookerExplore LookerField LookerFolder LookerLook LookerModel LookerProject LookerQuery LookerTile LookerView Matillion Matillion MatillionComponent MatillionGroup MatillionJob MatillionProject Metabase Metabase MetabaseCollection MetabaseDashboard MetabaseQuestion MicroStrategy MicroStrategy MicroStrategyAttribute MicroStrategyCube MicroStrategyDocument MicroStrategyDossier MicroStrategyFact MicroStrategyMetric MicroStrategyProject MicroStrategyReport MicroStrategyVisualization Mode Mode ModeChart ModeCollection ModeQuery ModeReport ModeWorkspace Models Models ModelAttribute ModelAttributeAssociation ModelDataModel ModelEntity ModelEntityAssociation ModelVersion MongoDB MongoDB MongoDBCollection MongDBDatabase Monte Carlo Monte Carlo MCIncident MCMonitor Power BI Power BI Power BI PowerBIColumn PowerBIDashboard PowerBIDataflow PowerBIDataflowEntityColumn PowerBIDataset PowerBIDatasource PowerBIMeasure PowerBIPage PowerBIReport PowerBITable PowerBITile PowerBIWorkspace Preset Preset PresetChart PresetDashboard PresetDataset PresetWorkspace Qlik Qlik QlikApp QlikChart QlikDataset QlikSheet QlikSpace QlikStream Redash Redash RedashDashboard RedashQuery RedashVisualization Salesforce Salesforce SalesforceDashboard SalesforceField SalesforceObject SalesforceOrganization SalesforceReport SaaS Sigma Sigma SigmaWorkbook SigmaPage SigmaDataElement SigmaDataElementField SigmaDataset SigmaDatasetColumn Sisense Sisense SisenseDashboard SisenseDatamodel SisenseDatamodelTable SisenseFolder SisenseWidget Soda Soda SodaCheck Spark Spark SparkJob Superset Superset SupersetChart SupersetDashboard SupersetDataset Tableau Tableau TableauCalculatedField TableauDashboard TableauDatasource TableauDatasourceField TableauFlow TableauMetric TableauProject TableauSite TableauWorkbook TableauWorksheet ThoughtSpot ThoughtSpot ThoughtspotAnswer ThoughtspotColumn ThoughtspotDashlet ThoughtspotLiveboard ThoughtspotTable ThoughtspotView ThoughtspotWorksheet Endpoints Table of contents List personas Create a persona Retrieve a persona Update a persona Delete a persona Activate or deactivate a persona Add subjects to a persona Add policies to a persona Add a metadata policy Add a data policy Add a glossary policy Add a domain policy List policies in a persona Personalize the persona /api/meta/entity/bulk (DELETE) /api/meta/entity/bulk (POST) /api/meta/search/indexsearch (POST) Personas ¶ Personas are a way of curating assets for a group of users. List personas ¶ 0.0.12 1.4.0 4.0.0 To retrieve a listing of personas, run a search and page the results: Java Python Kotlin Go Raw REST API List personas 1 2 3 4 5 6 Persona . select ( client ) // (1) . stream () // (2) . filter ( a -> a instanceof Persona ) // (3) . forEach ( p -> { // (4) log . info ( \"Persona: {}\" , p ); }); To start building up a query specifically for personas, you can use the select() convenience method on Persona itself. Because this operation may need to retrieve information from Atlan, you must provide it an AtlanClient through which to connect to the tenant. The search will only run when you call the stream() method, which will then lazily-load each page of results into a stream. (Optional) You can do any other operations you might do on a stream, such as filtering the results to ensure they are of a certain type. This is the pattern for iterating through all results (across pages) covered in the Searching for assets portion of the SDK documentation. List personas 1 2 3 4 5 6 7 8 9 10 11 12 13 14 from pyatlan.client.atlan import AtlanClient from pyatlan.model.assets import Persona from pyatlan.model.fluent_search import CompoundQuery , FluentSearch client = AtlanClient () search_request = ( FluentSearch () # (1) . where ( CompoundQuery . active_assets ()) . where ( CompoundQuery . asset_type ( Persona )) # (2) ) . to_request () # (3) results = client . asset . search ( search_request ) # (4) for asset in results : # (5) if isinstance ( asset , Persona ): # Do something with the Persona Begin building up a query combining multiple conditions. Ensure that we include only objects of type Persona . Build this query into a new search request. Run the search. Page through the results (each asset in the results will be a persona). List personas 1 2 3 4 5 6 Persona . select ( client ) // (1) . stream () // (2) . filter { it is Persona } // (3) . forEach { // (4) log . info { \"Persona: $ it \" } } To start building up a query specifically for personas, you can use the select() convenience method on Persona itself. Because this operation may need to retrieve information from Atlan, you must provide it an AtlanClient through which to connect to the tenant. The search will only run when you call the stream() method, which will then lazily-load each page of results into a stream. (Optional) You can do any other operations you might do on a stream, such as filtering the results to ensure they are of a certain type. This is the pattern for iterating through all results (across pages) covered in the Searching for assets portion of the SDK documentation. List personas 1 2 3 4 5 6 7 8 9 10 11 12 13 response , atlanErr := assets . NewFluentSearch (). // (1) PageSizes ( 20 ). ActiveAssets (). AssetType ( \"Persona\" ). // (2) Execute () // (3) if atlanErr != nil { fmt . Println ( \"Error:\" , atlanErr ) } for _ , entity := range response [ 0 ]. Entities { // (4) if entity . TypeName != nil && * entity . TypeName == \"Persona\" { // Do something with the Persona } } Begin building up a query combining multiple conditions. Ensure that we include only objects of type Persona . Run the search. Page through th",
    "topic": "API_SDK",
    "scraped_at": "2025-09-15 00:27:20"
  },
  {
    "title": "Managing policies - Developer",
    "url": "https://developer.atlan.com/snippets/access/policies/",
    "content": "Developer Toolkits Toolkits Packages Packages Running example Define via template Render your package Develop your logic Test your logic Release (GA) Widget reference Typedefs Typedefs Running example Define via template Render your model Test your model Bind the SDKs Write integration test Test baseline UX Release (GA) Testing Testing Overview Getting started Getting started Other important concepts Documentation conventions Integration options Integration options CLI dbt Java Python Kotlin Scala Clojure Go Events Raw REST API Site map Common tasks Common tasks Common asset actions Common asset actions Certify assets Manage announcements Change description Change owners Tag (classify) assets Change custom metadata Link terms to assets Link domains to assets Manage asset READMEs Add asset resources Manage asset relationships with attributes Asset CRUD operations Asset CRUD operations Create an asset Retrieve an asset Update an asset Delete an asset Find and apply suggestions Restore an asset Review changes to an asset Review accesses of an asset Get all assets that... Get all assets that... Search for assets Search examples Lineage Lineage Manage lineage Traverse lineage Bulk updates Bulk updates Combine multiple operations Update multiple assets End-to-end bulk update Event handling Event handling Webhook <> Lambda Webhook <> Lambda Set up Lambda Code your logic Deploy your code Set up webhook Manage your webhook Asset-specific Asset-specific Glossary operations Glossary operations Create objects Retrieval by name Create a hierarchy Categorize terms Traverse category hierarchy Creating assets Creating assets Manage relational assets Manage cube assets Manage object store assets Manage object store assets Manage AWS S3 assets Manage Azure Data Lake Storage assets Manage Google Cloud Storage assets Manage BI assets Manage BI assets Manage Google Data Studio assets Manage Preset assets Manage Superset assets Manage API assets Manage file assets Manage Airflow assets Manage Kafka assets Manage Azure Event Hub assets Manage App assets Manage AI assets Manage Insights assets Manage QuickSight assets Manage DocumentDB assets Manage Data Quality assets Manage Data Quality assets Manage Data Quality rules Connector types and icons Data mesh Data mesh Manage data domains Manage data products Data contracts Data contracts Manage data contracts (via CLI) Manage data contracts (via SDK) Profiling and popularity Profiling and popularity Manage column profiling Manage popularity Governance structures Governance structures Custom metadata Custom metadata Create custom metadata Retrieve custom metadata Update custom metadata Delete custom metadata Manage badges Manage options (enumerations) Tag management Tag management Manage Atlan tags Monitor propagation Access control Access control Manage personas Manage purposes Manage policies Manage policies Table of contents Retrieve policies From a persona From a purpose Update policies Remove policies From a persona From a purpose Access events API token management Run queries on an asset Users and groups Users and groups Create users and groups Retrieve users and groups Update users and groups Delete users and groups Manage SSO group mapping Packages and workflows Packages and workflows Manage workflows Manage workflow schedules Supported packages Supported packages Athena assets Asset import Asset export (basic) API token connection admin BigQuery assets Connection delete Confluent Kafka assets dbt assets DynamoDB assets Databricks assets Databricks miner Fivetran enrichment Glue assets Looker assets Lineage builder Lineage generator (no transformation) MongoDB assets Oracle assets Postgres assets PowerBI assets Redshift assets Relational assets builder Snowflake assets Snowflake miner Sigma assets SQL Server assets Tableau assets File management File management Reference Reference Searching Searching Querying Querying Term-level queries Full text queries Rank feature queries Compound queries Searchable fields Searchable fields Common search fields Glossary-specific search fields Limiting details Sorting search results Paging search results Aggregating search results Events Events Event triggers Event triggers Asset is created Asset is updated Asset is deleted Custom metadata is added Custom metadata is removed Asset is tagged Asset is untagged Lineage is created Event types Event types ENTITY_CREATE ENTITY_UPDATE ENTITY_DELETE BUSINESS_ATTRIBUTE_UPDATE CLASSIFICATION_ADD CLASSIFICATION_DELETE Specifications Specifications Data contract spec OpenLineage spec Types Types Core Core Referenceable Asset Connection Catalog Tag TagAttachment Access control Access control Persona Purpose AuthPolicy AuthService BusinessPolicy BusinessPolicyException BusinessPolicyIncident BusinessPolicyLog Incident Lineage Lineage ColumnProcess BIProcess Resources Resources Link File Readme ReadmeTemplate Badge Workflows Workflows Workflow WorkflowRun Task Structs Structs Action AuthPolicyCondition AuthPolicyValiditySchedule AwsCloudWatchMetric AwsTag AzureTag BadgeCondition BusinessPolicyRule ByocSsoConfig ColumnValueFrequencyMap DbtMetricFilter DbtJobRun GoogleLabel GoogleTag Histogram KafkaTopicConsumption MCRuleComparison MCRuleSchedule PopularityInsights SourceTagAttachment SourceTagAttachmentValue SourceTagAttribute StarredDetails Enumerations Enumerations AdfActivityState ADLSAccessTier ADLSAccountStatus ADLSEncryptionTypes ADLSLeaseState ADLSLeaseStatus ADLSObjectArchiveStatus ADLSObjectType ADLSPerformance ADLSProvisionState ADLSReplicationType ADLSStorageKind APIQueryParamTypeEnum atlas_operation AtlasGlossaryCategoryType AtlasGlossaryTermType AtlasGlossaryType AtlasGlossaryTermAssignmentStatus AtlasGlossaryTermRelationshipStatus AuthPolicyCategory AuthPolicyResourceCategory AuthPolicyType certificate_status DataGlossary DataProductCriticality DataProductSensitivity DataProductStatus DataProductVisibility DomoCardType DynamoDBSecondaryIndexProjectionType DynamoDBStatus file_type FivetranConnectorStatus FivetranProcessStatus google_datastudio_asset_type icon_type incident_severity kafka_topic_cleanup_policy kafka_topic_compression_type matillion_job_type ModelCardinalityType MongoDBCollectionValidationAction MongoDBCollectionValidationLevel OpenLineageRunState powerbi_endorsement query_username_strategy quick_sight_analysis_status quick_sight_dataset_field_type quick_sight_dataset_import_mode quick_sight_folder_type SchemaRegistrySchemaCompatibility SchemaRegistrySchemaType SourceCostUnitType table_type WorkflowRunStatus WorkflowRunType WorkflowStatus WorkflowType Abstractions Abstractions BI Cloud Insight ObjectStore EventStore DataQuality Metric NoSQL SchemaRegistry Glossary Glossary AtlasGlossary AtlasGlossaryCategory AtlasGlossaryTerm Data mesh Data mesh DataDomain DataProduct DataContract Stakeholder StakeholderTitle Relational databases Relational databases Database Schema Table View MaterialisedView Column Query TablePartition CalculationView BigqueryTag DatabricksUnityCatalogTag SnowflakeDynamicTable SnowflakePipe SnowflakeStream SnowflakeTag Procedure Function SQL Query organization Query organization Namespace Collection Folder Cubes Cubes Cube CubeDimension CubeHierarchy CubeField APIs APIs APIPath APISpec APIObject APIQuery APIField Airflow Airflow AirflowDag AirflowTask Amazon Amazon Amazon DynamoDB Amazon DynamoDB DynamoDBTable DynamoDBSecondaryIndex DynamoDBGlobalSecondaryIndex DynamoDBLocalSecondaryIndex AWS S3 AWS S3 S3Bucket S3Object Amazon QuickSight Amazon QuickSight QuickSightAnalysis QuickSightAnalysisVisual QuickSightDashboard QuickSightDashboardVisual QuickSightDataset QuickSightDatasetField QuickSightFolder Anaplan Anaplan AnaplanWorkspace AnaplanApp AnaplanPage AnaplanModel AnaplanModule AnaplanList AnaplanSystemDimension AnaplanDimension AnaplanLineItem AnaplanView Anomalo Anomalo AnomaloCheck App App Application ApplicationField Microsoft Azure Microsoft Azure Azure Data Factory Azure Data Factory AdfActivity AdfDataflow AdfDataset AdfLinkedservice AdfPipeline Azure Data Lake Storage Azure Data Lake Storage ADLSAccount ADLSContainer ADLSObject Azure Event Hub Azure Event Hub AzureEventHub AzureEventHubConsumerGroup Azure Service Bus Azure Service Bus AzureServiceBusNamespace AzureServiceBusSchema AzureServiceBusTopic Cosmos DB Cosmos DB CosmosMongoDBAccount CosmosMongoDBCollection CosmosMongoDBDatabase Cognite Cognite Cognite3DModel CogniteAsset CogniteEvent CogniteFile CogniteSequence CogniteTimeseries Custom Custom CustomEntity Dataverse Dataverse DataverseEntity DataverseAttribute dbt dbt DbtColumnProcess DbtMetric DbtModel DbtModelColumn DbtProcess DbtSource DbtTag DbtTest Domo Domo DomoCard DomoDashboard DomoDataset DomoDatasetColumn DocumentDB DocumentDB DocumentDBCollection DocumentDBDatabase Fivetran Fivetran FivetranConnector Google Google Google Cloud Storage Google Cloud Storage GCSBucket GCSObject Google Data Studio Google Data Studio DataStudioAsset IBM IBM IBM Cognos Cognos CognosDashboard CognosDatasource CognosExploration CognosFile CognosFolder CognosModule CognosPackage CognosReport Kafka Kafka KafkaConsumerGroup KafkaTopic Looker Looker LookerDashboard LookerExplore LookerField LookerFolder LookerLook LookerModel LookerProject LookerQuery LookerTile LookerView Matillion Matillion MatillionComponent MatillionGroup MatillionJob MatillionProject Metabase Metabase MetabaseCollection MetabaseDashboard MetabaseQuestion MicroStrategy MicroStrategy MicroStrategyAttribute MicroStrategyCube MicroStrategyDocument MicroStrategyDossier MicroStrategyFact MicroStrategyMetric MicroStrategyProject MicroStrategyReport MicroStrategyVisualization Mode Mode ModeChart ModeCollection ModeQuery ModeReport ModeWorkspace Models Models ModelAttribute ModelAttributeAssociation ModelDataModel ModelEntity ModelEntityAssociation ModelVersion MongoDB MongoDB MongoDBCollection MongDBDatabase Monte Carlo Monte Carlo MCIncident MCMonitor Power BI Power BI Power BI PowerBIColumn PowerBIDashboard PowerBIDataflow PowerBIDataflowEntityColumn PowerBIDataset PowerBIDatasource PowerBIMeasure PowerBIPage PowerBIReport PowerBITable PowerBITile PowerBIWorkspace Preset Preset PresetChart PresetDashboard PresetDataset PresetWorkspace Qlik Qlik QlikApp QlikChart QlikDataset QlikSheet QlikSpace QlikStream Redash Redash RedashDashboard RedashQuery RedashVisualization Salesforce Salesforce SalesforceDashboard SalesforceField SalesforceObject SalesforceOrganization SalesforceReport SaaS Sigma Sigma SigmaWorkbook SigmaPage SigmaDataElement SigmaDataElementField SigmaDataset SigmaDatasetColumn Sisense Sisense SisenseDashboard SisenseDatamodel SisenseDatamodelTable SisenseFolder SisenseWidget Soda Soda SodaCheck Spark Spark SparkJob Superset Superset SupersetChart SupersetDashboard SupersetDataset Tableau Tableau TableauCalculatedField TableauDashboard TableauDatasource TableauDatasourceField TableauFlow TableauMetric TableauProject TableauSite TableauWorkbook TableauWorksheet ThoughtSpot ThoughtSpot ThoughtspotAnswer ThoughtspotColumn ThoughtspotDashlet ThoughtspotLiveboard ThoughtspotTable ThoughtspotView ThoughtspotWorksheet Endpoints Table of contents Retrieve policies From a persona From a purpose Update policies Remove policies From a persona From a purpose /api/meta/entity/bulk (DELETE) /api/meta/entity/bulk (POST) /api/meta/search/indexsearch (POST) Policies ¶ Policies control which assets users can access, and what operations they can carry out on those assets. Retrieve policies ¶ From a persona ¶ 0.0.15 1.4.0 4.0.0 To retrieve a policy from a persona, you need to search for the policy by some characteristic: Java Python Kotlin Go Raw REST API Retrieve policies 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 AuthPolicy . select ( client ) // (1) . where ( AuthPolicy . POLICY_CATEGORY . eq ( \"persona\" )) . where ( AuthPolicy . POLICY_RESOURCES . startsWith ( \"entity:default/snowflake/1696324735\" )) // (2) . includeOnResults ( AuthPolicy . NAME ) // (3) . includeOnResults ( AuthPolicy . ACCESS_CONTROL ) . includeOnResults ( AuthPolicy . POLICY_RESOURCES ) . includeOnResults ( AuthPolicy . CONNECTION_QUALIFIED_NAME ) . includeOnResults ( AuthPolicy . POLICY_TYPE ) . includeOnResults ( AuthPolicy . POLICY_SUB_CATEGORY ) . includeOnRelations ( IAccessControl . IS_ACCESS_CONTROL_ENABLED ) // (4) . includeOnRelations ( Asset . NAME ) . stream () // (5) . filter ( a -> a instanceof AuthPolicy ) . forEach ( p -> { // (6) AuthPolicy policy = ( AuthPolicy ) p ; }); Start by selecting policies, here using a FluentSearch-based approach. Because this operation may need to retrieve information from Atlan, you must provide it an AtlanClient through which to connect to the tenant. You can select the policy by whatever you like, in this example we are selecting based on the resources it controls (specifically in this example any assets in a particular snowflake connection). Include details about the policy itself in each search result, such as the access control mechanism the policy is defined within (the persona). Include all the attributes you want about the access control mechanism on the relations of the search results. Here we are including the name of and whether that persona is enabled or not. You can then directly stream the results of the search. For each result of the search (itself an AuthPolicy), you can then decide what to do with it. Retrieve policies 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 from typing import cast from pyatlan.client.atlan import AtlanClient from pyatlan.model.assets import AuthPolicy , AccessControl from pyatlan.model.fluent_search import FluentSearch client = AtlanClient () request = ( FluentSearch () . where ( FluentSearch . asset_type ( AuthPolicy )) # (1) . where ( AuthPolicy . POLICY_CATEGORY . eq ( \"persona\" )) . where ( AuthPolicy . POLICY_RESOURCES . startswith ( \"entity:default/snowflake/1696324735\" )) # (2) . include_on_results ( AuthPolicy . NAME ) # (3) . include_on_results ( AuthPolicy . ACCESS_CONTROL ) . include_on_results ( AuthPolicy . POLICY_RESOURCES ) . include_on_results ( AuthPolicy . CONNECTION_QUALIFIED_NAME ) . include_on_results ( AuthPolicy . POLICY_TYPE ) . include_on_results ( AuthPolicy . POLICY_SUB_CATEGORY ) . include_on_relations ( AccessControl . IS_ACCESS_CONTROL_ENABLED ) # (4) . include_on_relations ( AccessControl . NAME ) ) . to_request () # (5) response = client . asset . search ( request ) # (6) for p in response : # (7) policy = cast ( AuthPolicy , p ) Start by selecting policies, here using a FluentSearch-based approach. You can select the policy by whatever you like, in this example we are selecting based on the resources it controls (specifically in this example any assets in a particular snowflake connection). Include details about the policy itself in each search result, such as the access control mechanism the policy is defined within (the persona). Include all the attributes you want about the access control mechanism o",
    "topic": "API_SDK",
    "scraped_at": "2025-09-15 00:27:21"
  },
  {
    "title": "Common actions with assets - Developer",
    "url": "https://developer.atlan.com/snippets/common-examples/",
    "content": "Developer Toolkits Toolkits Packages Packages Running example Define via template Render your package Develop your logic Test your logic Release (GA) Widget reference Typedefs Typedefs Running example Define via template Render your model Test your model Bind the SDKs Write integration test Test baseline UX Release (GA) Testing Testing Overview Getting started Getting started Other important concepts Documentation conventions Integration options Integration options CLI dbt Java Python Kotlin Scala Clojure Go Events Raw REST API Site map Common tasks Common tasks Common asset actions Common asset actions Certify assets Manage announcements Change description Change owners Tag (classify) assets Change custom metadata Link terms to assets Link domains to assets Manage asset READMEs Add asset resources Manage asset relationships with attributes Asset CRUD operations Asset CRUD operations Create an asset Retrieve an asset Update an asset Delete an asset Find and apply suggestions Restore an asset Review changes to an asset Review accesses of an asset Get all assets that... Get all assets that... Search for assets Search examples Lineage Lineage Manage lineage Traverse lineage Bulk updates Bulk updates Combine multiple operations Update multiple assets End-to-end bulk update Event handling Event handling Webhook <> Lambda Webhook <> Lambda Set up Lambda Code your logic Deploy your code Set up webhook Manage your webhook Asset-specific Asset-specific Glossary operations Glossary operations Create objects Retrieval by name Create a hierarchy Categorize terms Traverse category hierarchy Creating assets Creating assets Manage relational assets Manage cube assets Manage object store assets Manage object store assets Manage AWS S3 assets Manage Azure Data Lake Storage assets Manage Google Cloud Storage assets Manage BI assets Manage BI assets Manage Google Data Studio assets Manage Preset assets Manage Superset assets Manage API assets Manage file assets Manage Airflow assets Manage Kafka assets Manage Azure Event Hub assets Manage App assets Manage AI assets Manage Insights assets Manage QuickSight assets Manage DocumentDB assets Manage Data Quality assets Manage Data Quality assets Manage Data Quality rules Connector types and icons Data mesh Data mesh Manage data domains Manage data products Data contracts Data contracts Manage data contracts (via CLI) Manage data contracts (via SDK) Profiling and popularity Profiling and popularity Manage column profiling Manage popularity Governance structures Governance structures Custom metadata Custom metadata Create custom metadata Retrieve custom metadata Update custom metadata Delete custom metadata Manage badges Manage options (enumerations) Tag management Tag management Manage Atlan tags Monitor propagation Access control Access control Manage personas Manage purposes Manage policies Access events API token management Run queries on an asset Users and groups Users and groups Create users and groups Retrieve users and groups Update users and groups Delete users and groups Manage SSO group mapping Packages and workflows Packages and workflows Manage workflows Manage workflow schedules Supported packages Supported packages Athena assets Asset import Asset export (basic) API token connection admin BigQuery assets Connection delete Confluent Kafka assets dbt assets DynamoDB assets Databricks assets Databricks miner Fivetran enrichment Glue assets Looker assets Lineage builder Lineage generator (no transformation) MongoDB assets Oracle assets Postgres assets PowerBI assets Redshift assets Relational assets builder Snowflake assets Snowflake miner Sigma assets SQL Server assets Tableau assets File management File management Reference Reference Searching Searching Querying Querying Term-level queries Full text queries Rank feature queries Compound queries Searchable fields Searchable fields Common search fields Glossary-specific search fields Limiting details Sorting search results Paging search results Aggregating search results Events Events Event triggers Event triggers Asset is created Asset is updated Asset is deleted Custom metadata is added Custom metadata is removed Asset is tagged Asset is untagged Lineage is created Event types Event types ENTITY_CREATE ENTITY_UPDATE ENTITY_DELETE BUSINESS_ATTRIBUTE_UPDATE CLASSIFICATION_ADD CLASSIFICATION_DELETE Specifications Specifications Data contract spec OpenLineage spec Types Types Core Core Referenceable Asset Connection Catalog Tag TagAttachment Access control Access control Persona Purpose AuthPolicy AuthService BusinessPolicy BusinessPolicyException BusinessPolicyIncident BusinessPolicyLog Incident Lineage Lineage ColumnProcess BIProcess Resources Resources Link File Readme ReadmeTemplate Badge Workflows Workflows Workflow WorkflowRun Task Structs Structs Action AuthPolicyCondition AuthPolicyValiditySchedule AwsCloudWatchMetric AwsTag AzureTag BadgeCondition BusinessPolicyRule ByocSsoConfig ColumnValueFrequencyMap DbtMetricFilter DbtJobRun GoogleLabel GoogleTag Histogram KafkaTopicConsumption MCRuleComparison MCRuleSchedule PopularityInsights SourceTagAttachment SourceTagAttachmentValue SourceTagAttribute StarredDetails Enumerations Enumerations AdfActivityState ADLSAccessTier ADLSAccountStatus ADLSEncryptionTypes ADLSLeaseState ADLSLeaseStatus ADLSObjectArchiveStatus ADLSObjectType ADLSPerformance ADLSProvisionState ADLSReplicationType ADLSStorageKind APIQueryParamTypeEnum atlas_operation AtlasGlossaryCategoryType AtlasGlossaryTermType AtlasGlossaryType AtlasGlossaryTermAssignmentStatus AtlasGlossaryTermRelationshipStatus AuthPolicyCategory AuthPolicyResourceCategory AuthPolicyType certificate_status DataGlossary DataProductCriticality DataProductSensitivity DataProductStatus DataProductVisibility DomoCardType DynamoDBSecondaryIndexProjectionType DynamoDBStatus file_type FivetranConnectorStatus FivetranProcessStatus google_datastudio_asset_type icon_type incident_severity kafka_topic_cleanup_policy kafka_topic_compression_type matillion_job_type ModelCardinalityType MongoDBCollectionValidationAction MongoDBCollectionValidationLevel OpenLineageRunState powerbi_endorsement query_username_strategy quick_sight_analysis_status quick_sight_dataset_field_type quick_sight_dataset_import_mode quick_sight_folder_type SchemaRegistrySchemaCompatibility SchemaRegistrySchemaType SourceCostUnitType table_type WorkflowRunStatus WorkflowRunType WorkflowStatus WorkflowType Abstractions Abstractions BI Cloud Insight ObjectStore EventStore DataQuality Metric NoSQL SchemaRegistry Glossary Glossary AtlasGlossary AtlasGlossaryCategory AtlasGlossaryTerm Data mesh Data mesh DataDomain DataProduct DataContract Stakeholder StakeholderTitle Relational databases Relational databases Database Schema Table View MaterialisedView Column Query TablePartition CalculationView BigqueryTag DatabricksUnityCatalogTag SnowflakeDynamicTable SnowflakePipe SnowflakeStream SnowflakeTag Procedure Function SQL Query organization Query organization Namespace Collection Folder Cubes Cubes Cube CubeDimension CubeHierarchy CubeField APIs APIs APIPath APISpec APIObject APIQuery APIField Airflow Airflow AirflowDag AirflowTask Amazon Amazon Amazon DynamoDB Amazon DynamoDB DynamoDBTable DynamoDBSecondaryIndex DynamoDBGlobalSecondaryIndex DynamoDBLocalSecondaryIndex AWS S3 AWS S3 S3Bucket S3Object Amazon QuickSight Amazon QuickSight QuickSightAnalysis QuickSightAnalysisVisual QuickSightDashboard QuickSightDashboardVisual QuickSightDataset QuickSightDatasetField QuickSightFolder Anaplan Anaplan AnaplanWorkspace AnaplanApp AnaplanPage AnaplanModel AnaplanModule AnaplanList AnaplanSystemDimension AnaplanDimension AnaplanLineItem AnaplanView Anomalo Anomalo AnomaloCheck App App Application ApplicationField Microsoft Azure Microsoft Azure Azure Data Factory Azure Data Factory AdfActivity AdfDataflow AdfDataset AdfLinkedservice AdfPipeline Azure Data Lake Storage Azure Data Lake Storage ADLSAccount ADLSContainer ADLSObject Azure Event Hub Azure Event Hub AzureEventHub AzureEventHubConsumerGroup Azure Service Bus Azure Service Bus AzureServiceBusNamespace AzureServiceBusSchema AzureServiceBusTopic Cosmos DB Cosmos DB CosmosMongoDBAccount CosmosMongoDBCollection CosmosMongoDBDatabase Cognite Cognite Cognite3DModel CogniteAsset CogniteEvent CogniteFile CogniteSequence CogniteTimeseries Custom Custom CustomEntity Dataverse Dataverse DataverseEntity DataverseAttribute dbt dbt DbtColumnProcess DbtMetric DbtModel DbtModelColumn DbtProcess DbtSource DbtTag DbtTest Domo Domo DomoCard DomoDashboard DomoDataset DomoDatasetColumn DocumentDB DocumentDB DocumentDBCollection DocumentDBDatabase Fivetran Fivetran FivetranConnector Google Google Google Cloud Storage Google Cloud Storage GCSBucket GCSObject Google Data Studio Google Data Studio DataStudioAsset IBM IBM IBM Cognos Cognos CognosDashboard CognosDatasource CognosExploration CognosFile CognosFolder CognosModule CognosPackage CognosReport Kafka Kafka KafkaConsumerGroup KafkaTopic Looker Looker LookerDashboard LookerExplore LookerField LookerFolder LookerLook LookerModel LookerProject LookerQuery LookerTile LookerView Matillion Matillion MatillionComponent MatillionGroup MatillionJob MatillionProject Metabase Metabase MetabaseCollection MetabaseDashboard MetabaseQuestion MicroStrategy MicroStrategy MicroStrategyAttribute MicroStrategyCube MicroStrategyDocument MicroStrategyDossier MicroStrategyFact MicroStrategyMetric MicroStrategyProject MicroStrategyReport MicroStrategyVisualization Mode Mode ModeChart ModeCollection ModeQuery ModeReport ModeWorkspace Models Models ModelAttribute ModelAttributeAssociation ModelDataModel ModelEntity ModelEntityAssociation ModelVersion MongoDB MongoDB MongoDBCollection MongDBDatabase Monte Carlo Monte Carlo MCIncident MCMonitor Power BI Power BI Power BI PowerBIColumn PowerBIDashboard PowerBIDataflow PowerBIDataflowEntityColumn PowerBIDataset PowerBIDatasource PowerBIMeasure PowerBIPage PowerBIReport PowerBITable PowerBITile PowerBIWorkspace Preset Preset PresetChart PresetDashboard PresetDataset PresetWorkspace Qlik Qlik QlikApp QlikChart QlikDataset QlikSheet QlikSpace QlikStream Redash Redash RedashDashboard RedashQuery RedashVisualization Salesforce Salesforce SalesforceDashboard SalesforceField SalesforceObject SalesforceOrganization SalesforceReport SaaS Sigma Sigma SigmaWorkbook SigmaPage SigmaDataElement SigmaDataElementField SigmaDataset SigmaDatasetColumn Sisense Sisense SisenseDashboard SisenseDatamodel SisenseDatamodelTable SisenseFolder SisenseWidget Soda Soda SodaCheck Spark Spark SparkJob Superset Superset SupersetChart SupersetDashboard SupersetDataset Tableau Tableau TableauCalculatedField TableauDashboard TableauDatasource TableauDatasourceField TableauFlow TableauMetric TableauProject TableauSite TableauWorkbook TableauWorksheet ThoughtSpot ThoughtSpot ThoughtspotAnswer ThoughtspotColumn ThoughtspotDashlet ThoughtspotLiveboard ThoughtspotTable ThoughtspotView ThoughtspotWorksheet Endpoints Examples of common actions with assets ¶ In this section you'll find examples of the most common actions dealing with assets . All assets share a common set of attributes and relationships: such as certificates, announcements, term assignments, classifications, custom metadata, READMEs, and more. These common examples cover interacting with those common attributes and relationships — focusing primarily on enriching assets that already exist. Each page includes variations on the topic they cover: Certify assets Manage announcements Change description Change owners Classify assets Change custom metadata Link terms to assets Manage asset READMEs Add asset links 2022-10-15 2024-12-02 Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "topic": "API_SDK",
    "scraped_at": "2025-09-15 00:27:22"
  },
  {
    "title": "Asset CRUD operations - Developer",
    "url": "https://developer.atlan.com/snippets/advanced-examples/",
    "content": "Developer Toolkits Toolkits Packages Packages Running example Define via template Render your package Develop your logic Test your logic Release (GA) Widget reference Typedefs Typedefs Running example Define via template Render your model Test your model Bind the SDKs Write integration test Test baseline UX Release (GA) Testing Testing Overview Getting started Getting started Other important concepts Documentation conventions Integration options Integration options CLI dbt Java Python Kotlin Scala Clojure Go Events Raw REST API Site map Common tasks Common tasks Common asset actions Common asset actions Certify assets Manage announcements Change description Change owners Tag (classify) assets Change custom metadata Link terms to assets Link domains to assets Manage asset READMEs Add asset resources Manage asset relationships with attributes Asset CRUD operations Asset CRUD operations Create an asset Retrieve an asset Update an asset Delete an asset Find and apply suggestions Restore an asset Review changes to an asset Review accesses of an asset Get all assets that... Get all assets that... Search for assets Search examples Lineage Lineage Manage lineage Traverse lineage Bulk updates Bulk updates Combine multiple operations Update multiple assets End-to-end bulk update Event handling Event handling Webhook <> Lambda Webhook <> Lambda Set up Lambda Code your logic Deploy your code Set up webhook Manage your webhook Asset-specific Asset-specific Glossary operations Glossary operations Create objects Retrieval by name Create a hierarchy Categorize terms Traverse category hierarchy Creating assets Creating assets Manage relational assets Manage cube assets Manage object store assets Manage object store assets Manage AWS S3 assets Manage Azure Data Lake Storage assets Manage Google Cloud Storage assets Manage BI assets Manage BI assets Manage Google Data Studio assets Manage Preset assets Manage Superset assets Manage API assets Manage file assets Manage Airflow assets Manage Kafka assets Manage Azure Event Hub assets Manage App assets Manage AI assets Manage Insights assets Manage QuickSight assets Manage DocumentDB assets Manage Data Quality assets Manage Data Quality assets Manage Data Quality rules Connector types and icons Data mesh Data mesh Manage data domains Manage data products Data contracts Data contracts Manage data contracts (via CLI) Manage data contracts (via SDK) Profiling and popularity Profiling and popularity Manage column profiling Manage popularity Governance structures Governance structures Custom metadata Custom metadata Create custom metadata Retrieve custom metadata Update custom metadata Delete custom metadata Manage badges Manage options (enumerations) Tag management Tag management Manage Atlan tags Monitor propagation Access control Access control Manage personas Manage purposes Manage policies Access events API token management Run queries on an asset Users and groups Users and groups Create users and groups Retrieve users and groups Update users and groups Delete users and groups Manage SSO group mapping Packages and workflows Packages and workflows Manage workflows Manage workflow schedules Supported packages Supported packages Athena assets Asset import Asset export (basic) API token connection admin BigQuery assets Connection delete Confluent Kafka assets dbt assets DynamoDB assets Databricks assets Databricks miner Fivetran enrichment Glue assets Looker assets Lineage builder Lineage generator (no transformation) MongoDB assets Oracle assets Postgres assets PowerBI assets Redshift assets Relational assets builder Snowflake assets Snowflake miner Sigma assets SQL Server assets Tableau assets File management File management Reference Reference Searching Searching Querying Querying Term-level queries Full text queries Rank feature queries Compound queries Searchable fields Searchable fields Common search fields Glossary-specific search fields Limiting details Sorting search results Paging search results Aggregating search results Events Events Event triggers Event triggers Asset is created Asset is updated Asset is deleted Custom metadata is added Custom metadata is removed Asset is tagged Asset is untagged Lineage is created Event types Event types ENTITY_CREATE ENTITY_UPDATE ENTITY_DELETE BUSINESS_ATTRIBUTE_UPDATE CLASSIFICATION_ADD CLASSIFICATION_DELETE Specifications Specifications Data contract spec OpenLineage spec Types Types Core Core Referenceable Asset Connection Catalog Tag TagAttachment Access control Access control Persona Purpose AuthPolicy AuthService BusinessPolicy BusinessPolicyException BusinessPolicyIncident BusinessPolicyLog Incident Lineage Lineage ColumnProcess BIProcess Resources Resources Link File Readme ReadmeTemplate Badge Workflows Workflows Workflow WorkflowRun Task Structs Structs Action AuthPolicyCondition AuthPolicyValiditySchedule AwsCloudWatchMetric AwsTag AzureTag BadgeCondition BusinessPolicyRule ByocSsoConfig ColumnValueFrequencyMap DbtMetricFilter DbtJobRun GoogleLabel GoogleTag Histogram KafkaTopicConsumption MCRuleComparison MCRuleSchedule PopularityInsights SourceTagAttachment SourceTagAttachmentValue SourceTagAttribute StarredDetails Enumerations Enumerations AdfActivityState ADLSAccessTier ADLSAccountStatus ADLSEncryptionTypes ADLSLeaseState ADLSLeaseStatus ADLSObjectArchiveStatus ADLSObjectType ADLSPerformance ADLSProvisionState ADLSReplicationType ADLSStorageKind APIQueryParamTypeEnum atlas_operation AtlasGlossaryCategoryType AtlasGlossaryTermType AtlasGlossaryType AtlasGlossaryTermAssignmentStatus AtlasGlossaryTermRelationshipStatus AuthPolicyCategory AuthPolicyResourceCategory AuthPolicyType certificate_status DataGlossary DataProductCriticality DataProductSensitivity DataProductStatus DataProductVisibility DomoCardType DynamoDBSecondaryIndexProjectionType DynamoDBStatus file_type FivetranConnectorStatus FivetranProcessStatus google_datastudio_asset_type icon_type incident_severity kafka_topic_cleanup_policy kafka_topic_compression_type matillion_job_type ModelCardinalityType MongoDBCollectionValidationAction MongoDBCollectionValidationLevel OpenLineageRunState powerbi_endorsement query_username_strategy quick_sight_analysis_status quick_sight_dataset_field_type quick_sight_dataset_import_mode quick_sight_folder_type SchemaRegistrySchemaCompatibility SchemaRegistrySchemaType SourceCostUnitType table_type WorkflowRunStatus WorkflowRunType WorkflowStatus WorkflowType Abstractions Abstractions BI Cloud Insight ObjectStore EventStore DataQuality Metric NoSQL SchemaRegistry Glossary Glossary AtlasGlossary AtlasGlossaryCategory AtlasGlossaryTerm Data mesh Data mesh DataDomain DataProduct DataContract Stakeholder StakeholderTitle Relational databases Relational databases Database Schema Table View MaterialisedView Column Query TablePartition CalculationView BigqueryTag DatabricksUnityCatalogTag SnowflakeDynamicTable SnowflakePipe SnowflakeStream SnowflakeTag Procedure Function SQL Query organization Query organization Namespace Collection Folder Cubes Cubes Cube CubeDimension CubeHierarchy CubeField APIs APIs APIPath APISpec APIObject APIQuery APIField Airflow Airflow AirflowDag AirflowTask Amazon Amazon Amazon DynamoDB Amazon DynamoDB DynamoDBTable DynamoDBSecondaryIndex DynamoDBGlobalSecondaryIndex DynamoDBLocalSecondaryIndex AWS S3 AWS S3 S3Bucket S3Object Amazon QuickSight Amazon QuickSight QuickSightAnalysis QuickSightAnalysisVisual QuickSightDashboard QuickSightDashboardVisual QuickSightDataset QuickSightDatasetField QuickSightFolder Anaplan Anaplan AnaplanWorkspace AnaplanApp AnaplanPage AnaplanModel AnaplanModule AnaplanList AnaplanSystemDimension AnaplanDimension AnaplanLineItem AnaplanView Anomalo Anomalo AnomaloCheck App App Application ApplicationField Microsoft Azure Microsoft Azure Azure Data Factory Azure Data Factory AdfActivity AdfDataflow AdfDataset AdfLinkedservice AdfPipeline Azure Data Lake Storage Azure Data Lake Storage ADLSAccount ADLSContainer ADLSObject Azure Event Hub Azure Event Hub AzureEventHub AzureEventHubConsumerGroup Azure Service Bus Azure Service Bus AzureServiceBusNamespace AzureServiceBusSchema AzureServiceBusTopic Cosmos DB Cosmos DB CosmosMongoDBAccount CosmosMongoDBCollection CosmosMongoDBDatabase Cognite Cognite Cognite3DModel CogniteAsset CogniteEvent CogniteFile CogniteSequence CogniteTimeseries Custom Custom CustomEntity Dataverse Dataverse DataverseEntity DataverseAttribute dbt dbt DbtColumnProcess DbtMetric DbtModel DbtModelColumn DbtProcess DbtSource DbtTag DbtTest Domo Domo DomoCard DomoDashboard DomoDataset DomoDatasetColumn DocumentDB DocumentDB DocumentDBCollection DocumentDBDatabase Fivetran Fivetran FivetranConnector Google Google Google Cloud Storage Google Cloud Storage GCSBucket GCSObject Google Data Studio Google Data Studio DataStudioAsset IBM IBM IBM Cognos Cognos CognosDashboard CognosDatasource CognosExploration CognosFile CognosFolder CognosModule CognosPackage CognosReport Kafka Kafka KafkaConsumerGroup KafkaTopic Looker Looker LookerDashboard LookerExplore LookerField LookerFolder LookerLook LookerModel LookerProject LookerQuery LookerTile LookerView Matillion Matillion MatillionComponent MatillionGroup MatillionJob MatillionProject Metabase Metabase MetabaseCollection MetabaseDashboard MetabaseQuestion MicroStrategy MicroStrategy MicroStrategyAttribute MicroStrategyCube MicroStrategyDocument MicroStrategyDossier MicroStrategyFact MicroStrategyMetric MicroStrategyProject MicroStrategyReport MicroStrategyVisualization Mode Mode ModeChart ModeCollection ModeQuery ModeReport ModeWorkspace Models Models ModelAttribute ModelAttributeAssociation ModelDataModel ModelEntity ModelEntityAssociation ModelVersion MongoDB MongoDB MongoDBCollection MongDBDatabase Monte Carlo Monte Carlo MCIncident MCMonitor Power BI Power BI Power BI PowerBIColumn PowerBIDashboard PowerBIDataflow PowerBIDataflowEntityColumn PowerBIDataset PowerBIDatasource PowerBIMeasure PowerBIPage PowerBIReport PowerBITable PowerBITile PowerBIWorkspace Preset Preset PresetChart PresetDashboard PresetDataset PresetWorkspace Qlik Qlik QlikApp QlikChart QlikDataset QlikSheet QlikSpace QlikStream Redash Redash RedashDashboard RedashQuery RedashVisualization Salesforce Salesforce SalesforceDashboard SalesforceField SalesforceObject SalesforceOrganization SalesforceReport SaaS Sigma Sigma SigmaWorkbook SigmaPage SigmaDataElement SigmaDataElementField SigmaDataset SigmaDatasetColumn Sisense Sisense SisenseDashboard SisenseDatamodel SisenseDatamodelTable SisenseFolder SisenseWidget Soda Soda SodaCheck Spark Spark SparkJob Superset Superset SupersetChart SupersetDashboard SupersetDataset Tableau Tableau TableauCalculatedField TableauDashboard TableauDatasource TableauDatasourceField TableauFlow TableauMetric TableauProject TableauSite TableauWorkbook TableauWorksheet ThoughtSpot ThoughtSpot ThoughtspotAnswer ThoughtspotColumn ThoughtspotDashlet ThoughtspotLiveboard ThoughtspotTable ThoughtspotView ThoughtspotWorksheet Endpoints Asset CRUD operations ¶ In this section you'll find details about creating, retrieving, updating, deleting, and searching for assets . Rather than covering every asset type in detail (since there are many), the subsections focus on the operations and patterns to follow for each operation. For more details on specific assets that are primarily intended to be managed programmatically, see the API-first models . Create an asset Retrieve an asset Update an asset Delete an asset Restore an asset View history of an asset Search for assets In many cases, you can also combine multiple operations into a single API call for efficiency. 2022-10-17 2024-10-01 Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "topic": "API_SDK",
    "scraped_at": "2025-09-15 00:27:24"
  },
  {
    "title": "Full reference material - Developer",
    "url": "https://developer.atlan.com/reference/",
    "content": "Developer Toolkits Toolkits Packages Packages Running example Define via template Render your package Develop your logic Test your logic Release (GA) Widget reference Typedefs Typedefs Running example Define via template Render your model Test your model Bind the SDKs Write integration test Test baseline UX Release (GA) Testing Testing Overview Getting started Getting started Other important concepts Documentation conventions Integration options Integration options CLI dbt Java Python Kotlin Scala Clojure Go Events Raw REST API Site map Common tasks Common tasks Common asset actions Common asset actions Certify assets Manage announcements Change description Change owners Tag (classify) assets Change custom metadata Link terms to assets Link domains to assets Manage asset READMEs Add asset resources Manage asset relationships with attributes Asset CRUD operations Asset CRUD operations Create an asset Retrieve an asset Update an asset Delete an asset Find and apply suggestions Restore an asset Review changes to an asset Review accesses of an asset Get all assets that... Get all assets that... Search for assets Search examples Lineage Lineage Manage lineage Traverse lineage Bulk updates Bulk updates Combine multiple operations Update multiple assets End-to-end bulk update Event handling Event handling Webhook <> Lambda Webhook <> Lambda Set up Lambda Code your logic Deploy your code Set up webhook Manage your webhook Asset-specific Asset-specific Glossary operations Glossary operations Create objects Retrieval by name Create a hierarchy Categorize terms Traverse category hierarchy Creating assets Creating assets Manage relational assets Manage cube assets Manage object store assets Manage object store assets Manage AWS S3 assets Manage Azure Data Lake Storage assets Manage Google Cloud Storage assets Manage BI assets Manage BI assets Manage Google Data Studio assets Manage Preset assets Manage Superset assets Manage API assets Manage file assets Manage Airflow assets Manage Kafka assets Manage Azure Event Hub assets Manage App assets Manage AI assets Manage Insights assets Manage QuickSight assets Manage DocumentDB assets Manage Data Quality assets Manage Data Quality assets Manage Data Quality rules Connector types and icons Data mesh Data mesh Manage data domains Manage data products Data contracts Data contracts Manage data contracts (via CLI) Manage data contracts (via SDK) Profiling and popularity Profiling and popularity Manage column profiling Manage popularity Governance structures Governance structures Custom metadata Custom metadata Create custom metadata Retrieve custom metadata Update custom metadata Delete custom metadata Manage badges Manage options (enumerations) Tag management Tag management Manage Atlan tags Monitor propagation Access control Access control Manage personas Manage purposes Manage policies Access events API token management Run queries on an asset Users and groups Users and groups Create users and groups Retrieve users and groups Update users and groups Delete users and groups Manage SSO group mapping Packages and workflows Packages and workflows Manage workflows Manage workflow schedules Supported packages Supported packages Athena assets Asset import Asset export (basic) API token connection admin BigQuery assets Connection delete Confluent Kafka assets dbt assets DynamoDB assets Databricks assets Databricks miner Fivetran enrichment Glue assets Looker assets Lineage builder Lineage generator (no transformation) MongoDB assets Oracle assets Postgres assets PowerBI assets Redshift assets Relational assets builder Snowflake assets Snowflake miner Sigma assets SQL Server assets Tableau assets File management File management Reference Reference Searching Searching Querying Querying Term-level queries Full text queries Rank feature queries Compound queries Searchable fields Searchable fields Common search fields Glossary-specific search fields Limiting details Sorting search results Paging search results Aggregating search results Events Events Event triggers Event triggers Asset is created Asset is updated Asset is deleted Custom metadata is added Custom metadata is removed Asset is tagged Asset is untagged Lineage is created Event types Event types ENTITY_CREATE ENTITY_UPDATE ENTITY_DELETE BUSINESS_ATTRIBUTE_UPDATE CLASSIFICATION_ADD CLASSIFICATION_DELETE Specifications Specifications Data contract spec OpenLineage spec Types Types Core Core Referenceable Asset Connection Catalog Tag TagAttachment Access control Access control Persona Purpose AuthPolicy AuthService BusinessPolicy BusinessPolicyException BusinessPolicyIncident BusinessPolicyLog Incident Lineage Lineage ColumnProcess BIProcess Resources Resources Link File Readme ReadmeTemplate Badge Workflows Workflows Workflow WorkflowRun Task Structs Structs Action AuthPolicyCondition AuthPolicyValiditySchedule AwsCloudWatchMetric AwsTag AzureTag BadgeCondition BusinessPolicyRule ByocSsoConfig ColumnValueFrequencyMap DbtMetricFilter DbtJobRun GoogleLabel GoogleTag Histogram KafkaTopicConsumption MCRuleComparison MCRuleSchedule PopularityInsights SourceTagAttachment SourceTagAttachmentValue SourceTagAttribute StarredDetails Enumerations Enumerations AdfActivityState ADLSAccessTier ADLSAccountStatus ADLSEncryptionTypes ADLSLeaseState ADLSLeaseStatus ADLSObjectArchiveStatus ADLSObjectType ADLSPerformance ADLSProvisionState ADLSReplicationType ADLSStorageKind APIQueryParamTypeEnum atlas_operation AtlasGlossaryCategoryType AtlasGlossaryTermType AtlasGlossaryType AtlasGlossaryTermAssignmentStatus AtlasGlossaryTermRelationshipStatus AuthPolicyCategory AuthPolicyResourceCategory AuthPolicyType certificate_status DataGlossary DataProductCriticality DataProductSensitivity DataProductStatus DataProductVisibility DomoCardType DynamoDBSecondaryIndexProjectionType DynamoDBStatus file_type FivetranConnectorStatus FivetranProcessStatus google_datastudio_asset_type icon_type incident_severity kafka_topic_cleanup_policy kafka_topic_compression_type matillion_job_type ModelCardinalityType MongoDBCollectionValidationAction MongoDBCollectionValidationLevel OpenLineageRunState powerbi_endorsement query_username_strategy quick_sight_analysis_status quick_sight_dataset_field_type quick_sight_dataset_import_mode quick_sight_folder_type SchemaRegistrySchemaCompatibility SchemaRegistrySchemaType SourceCostUnitType table_type WorkflowRunStatus WorkflowRunType WorkflowStatus WorkflowType Abstractions Abstractions BI Cloud Insight ObjectStore EventStore DataQuality Metric NoSQL SchemaRegistry Glossary Glossary AtlasGlossary AtlasGlossaryCategory AtlasGlossaryTerm Data mesh Data mesh DataDomain DataProduct DataContract Stakeholder StakeholderTitle Relational databases Relational databases Database Schema Table View MaterialisedView Column Query TablePartition CalculationView BigqueryTag DatabricksUnityCatalogTag SnowflakeDynamicTable SnowflakePipe SnowflakeStream SnowflakeTag Procedure Function SQL Query organization Query organization Namespace Collection Folder Cubes Cubes Cube CubeDimension CubeHierarchy CubeField APIs APIs APIPath APISpec APIObject APIQuery APIField Airflow Airflow AirflowDag AirflowTask Amazon Amazon Amazon DynamoDB Amazon DynamoDB DynamoDBTable DynamoDBSecondaryIndex DynamoDBGlobalSecondaryIndex DynamoDBLocalSecondaryIndex AWS S3 AWS S3 S3Bucket S3Object Amazon QuickSight Amazon QuickSight QuickSightAnalysis QuickSightAnalysisVisual QuickSightDashboard QuickSightDashboardVisual QuickSightDataset QuickSightDatasetField QuickSightFolder Anaplan Anaplan AnaplanWorkspace AnaplanApp AnaplanPage AnaplanModel AnaplanModule AnaplanList AnaplanSystemDimension AnaplanDimension AnaplanLineItem AnaplanView Anomalo Anomalo AnomaloCheck App App Application ApplicationField Microsoft Azure Microsoft Azure Azure Data Factory Azure Data Factory AdfActivity AdfDataflow AdfDataset AdfLinkedservice AdfPipeline Azure Data Lake Storage Azure Data Lake Storage ADLSAccount ADLSContainer ADLSObject Azure Event Hub Azure Event Hub AzureEventHub AzureEventHubConsumerGroup Azure Service Bus Azure Service Bus AzureServiceBusNamespace AzureServiceBusSchema AzureServiceBusTopic Cosmos DB Cosmos DB CosmosMongoDBAccount CosmosMongoDBCollection CosmosMongoDBDatabase Cognite Cognite Cognite3DModel CogniteAsset CogniteEvent CogniteFile CogniteSequence CogniteTimeseries Custom Custom CustomEntity Dataverse Dataverse DataverseEntity DataverseAttribute dbt dbt DbtColumnProcess DbtMetric DbtModel DbtModelColumn DbtProcess DbtSource DbtTag DbtTest Domo Domo DomoCard DomoDashboard DomoDataset DomoDatasetColumn DocumentDB DocumentDB DocumentDBCollection DocumentDBDatabase Fivetran Fivetran FivetranConnector Google Google Google Cloud Storage Google Cloud Storage GCSBucket GCSObject Google Data Studio Google Data Studio DataStudioAsset IBM IBM IBM Cognos Cognos CognosDashboard CognosDatasource CognosExploration CognosFile CognosFolder CognosModule CognosPackage CognosReport Kafka Kafka KafkaConsumerGroup KafkaTopic Looker Looker LookerDashboard LookerExplore LookerField LookerFolder LookerLook LookerModel LookerProject LookerQuery LookerTile LookerView Matillion Matillion MatillionComponent MatillionGroup MatillionJob MatillionProject Metabase Metabase MetabaseCollection MetabaseDashboard MetabaseQuestion MicroStrategy MicroStrategy MicroStrategyAttribute MicroStrategyCube MicroStrategyDocument MicroStrategyDossier MicroStrategyFact MicroStrategyMetric MicroStrategyProject MicroStrategyReport MicroStrategyVisualization Mode Mode ModeChart ModeCollection ModeQuery ModeReport ModeWorkspace Models Models ModelAttribute ModelAttributeAssociation ModelDataModel ModelEntity ModelEntityAssociation ModelVersion MongoDB MongoDB MongoDBCollection MongDBDatabase Monte Carlo Monte Carlo MCIncident MCMonitor Power BI Power BI Power BI PowerBIColumn PowerBIDashboard PowerBIDataflow PowerBIDataflowEntityColumn PowerBIDataset PowerBIDatasource PowerBIMeasure PowerBIPage PowerBIReport PowerBITable PowerBITile PowerBIWorkspace Preset Preset PresetChart PresetDashboard PresetDataset PresetWorkspace Qlik Qlik QlikApp QlikChart QlikDataset QlikSheet QlikSpace QlikStream Redash Redash RedashDashboard RedashQuery RedashVisualization Salesforce Salesforce SalesforceDashboard SalesforceField SalesforceObject SalesforceOrganization SalesforceReport SaaS Sigma Sigma SigmaWorkbook SigmaPage SigmaDataElement SigmaDataElementField SigmaDataset SigmaDatasetColumn Sisense Sisense SisenseDashboard SisenseDatamodel SisenseDatamodelTable SisenseFolder SisenseWidget Soda Soda SodaCheck Spark Spark SparkJob Superset Superset SupersetChart SupersetDashboard SupersetDataset Tableau Tableau TableauCalculatedField TableauDashboard TableauDatasource TableauDatasourceField TableauFlow TableauMetric TableauProject TableauSite TableauWorkbook TableauWorksheet ThoughtSpot ThoughtSpot ThoughtspotAnswer ThoughtspotColumn ThoughtspotDashlet ThoughtspotLiveboard ThoughtspotTable ThoughtspotView ThoughtspotWorksheet Endpoints Full reference material ¶ Under this top-level menu you will find full reference materials. These are intended to cover full, in-depth explanations of everything you can use in different areas of Atlan. Searching — detailing all the different mechanisms you can use to search for metadata in Atlan. Events — detailing every type of event that Atlan produces and the triggers that produce them. Endpoints — listing every endpoint available in Atlan cross-referenced with the use cases each endpoint enables. Due to its size, the full reference material for types (models) is under the separate top-level Types menu. 2025-09-04 2023-08-02 Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "topic": "API_SDK",
    "scraped_at": "2025-09-15 00:27:25"
  },
  {
    "title": "Developing with Atlan - Developer",
    "url": "https://developer.atlan.com/concepts/",
    "content": "Developer Toolkits Toolkits Packages Packages Running example Define via template Render your package Develop your logic Test your logic Release (GA) Widget reference Typedefs Typedefs Running example Define via template Render your model Test your model Bind the SDKs Write integration test Test baseline UX Release (GA) Testing Testing Overview Getting started Getting started Other important concepts Documentation conventions Integration options Integration options CLI dbt Java Python Kotlin Scala Clojure Go Events Raw REST API Site map Site map Table of contents Introduction Jumping in Common tasks Common tasks Common asset actions Common asset actions Certify assets Manage announcements Change description Change owners Tag (classify) assets Change custom metadata Link terms to assets Link domains to assets Manage asset READMEs Add asset resources Manage asset relationships with attributes Asset CRUD operations Asset CRUD operations Create an asset Retrieve an asset Update an asset Delete an asset Find and apply suggestions Restore an asset Review changes to an asset Review accesses of an asset Get all assets that... Get all assets that... Search for assets Search examples Lineage Lineage Manage lineage Traverse lineage Bulk updates Bulk updates Combine multiple operations Update multiple assets End-to-end bulk update Event handling Event handling Webhook <> Lambda Webhook <> Lambda Set up Lambda Code your logic Deploy your code Set up webhook Manage your webhook Asset-specific Asset-specific Glossary operations Glossary operations Create objects Retrieval by name Create a hierarchy Categorize terms Traverse category hierarchy Creating assets Creating assets Manage relational assets Manage cube assets Manage object store assets Manage object store assets Manage AWS S3 assets Manage Azure Data Lake Storage assets Manage Google Cloud Storage assets Manage BI assets Manage BI assets Manage Google Data Studio assets Manage Preset assets Manage Superset assets Manage API assets Manage file assets Manage Airflow assets Manage Kafka assets Manage Azure Event Hub assets Manage App assets Manage AI assets Manage Insights assets Manage QuickSight assets Manage DocumentDB assets Manage Data Quality assets Manage Data Quality assets Manage Data Quality rules Connector types and icons Data mesh Data mesh Manage data domains Manage data products Data contracts Data contracts Manage data contracts (via CLI) Manage data contracts (via SDK) Profiling and popularity Profiling and popularity Manage column profiling Manage popularity Governance structures Governance structures Custom metadata Custom metadata Create custom metadata Retrieve custom metadata Update custom metadata Delete custom metadata Manage badges Manage options (enumerations) Tag management Tag management Manage Atlan tags Monitor propagation Access control Access control Manage personas Manage purposes Manage policies Access events API token management Run queries on an asset Users and groups Users and groups Create users and groups Retrieve users and groups Update users and groups Delete users and groups Manage SSO group mapping Packages and workflows Packages and workflows Manage workflows Manage workflow schedules Supported packages Supported packages Athena assets Asset import Asset export (basic) API token connection admin BigQuery assets Connection delete Confluent Kafka assets dbt assets DynamoDB assets Databricks assets Databricks miner Fivetran enrichment Glue assets Looker assets Lineage builder Lineage generator (no transformation) MongoDB assets Oracle assets Postgres assets PowerBI assets Redshift assets Relational assets builder Snowflake assets Snowflake miner Sigma assets SQL Server assets Tableau assets File management File management Reference Reference Searching Searching Querying Querying Term-level queries Full text queries Rank feature queries Compound queries Searchable fields Searchable fields Common search fields Glossary-specific search fields Limiting details Sorting search results Paging search results Aggregating search results Events Events Event triggers Event triggers Asset is created Asset is updated Asset is deleted Custom metadata is added Custom metadata is removed Asset is tagged Asset is untagged Lineage is created Event types Event types ENTITY_CREATE ENTITY_UPDATE ENTITY_DELETE BUSINESS_ATTRIBUTE_UPDATE CLASSIFICATION_ADD CLASSIFICATION_DELETE Specifications Specifications Data contract spec OpenLineage spec Types Types Core Core Referenceable Asset Connection Catalog Tag TagAttachment Access control Access control Persona Purpose AuthPolicy AuthService BusinessPolicy BusinessPolicyException BusinessPolicyIncident BusinessPolicyLog Incident Lineage Lineage ColumnProcess BIProcess Resources Resources Link File Readme ReadmeTemplate Badge Workflows Workflows Workflow WorkflowRun Task Structs Structs Action AuthPolicyCondition AuthPolicyValiditySchedule AwsCloudWatchMetric AwsTag AzureTag BadgeCondition BusinessPolicyRule ByocSsoConfig ColumnValueFrequencyMap DbtMetricFilter DbtJobRun GoogleLabel GoogleTag Histogram KafkaTopicConsumption MCRuleComparison MCRuleSchedule PopularityInsights SourceTagAttachment SourceTagAttachmentValue SourceTagAttribute StarredDetails Enumerations Enumerations AdfActivityState ADLSAccessTier ADLSAccountStatus ADLSEncryptionTypes ADLSLeaseState ADLSLeaseStatus ADLSObjectArchiveStatus ADLSObjectType ADLSPerformance ADLSProvisionState ADLSReplicationType ADLSStorageKind APIQueryParamTypeEnum atlas_operation AtlasGlossaryCategoryType AtlasGlossaryTermType AtlasGlossaryType AtlasGlossaryTermAssignmentStatus AtlasGlossaryTermRelationshipStatus AuthPolicyCategory AuthPolicyResourceCategory AuthPolicyType certificate_status DataGlossary DataProductCriticality DataProductSensitivity DataProductStatus DataProductVisibility DomoCardType DynamoDBSecondaryIndexProjectionType DynamoDBStatus file_type FivetranConnectorStatus FivetranProcessStatus google_datastudio_asset_type icon_type incident_severity kafka_topic_cleanup_policy kafka_topic_compression_type matillion_job_type ModelCardinalityType MongoDBCollectionValidationAction MongoDBCollectionValidationLevel OpenLineageRunState powerbi_endorsement query_username_strategy quick_sight_analysis_status quick_sight_dataset_field_type quick_sight_dataset_import_mode quick_sight_folder_type SchemaRegistrySchemaCompatibility SchemaRegistrySchemaType SourceCostUnitType table_type WorkflowRunStatus WorkflowRunType WorkflowStatus WorkflowType Abstractions Abstractions BI Cloud Insight ObjectStore EventStore DataQuality Metric NoSQL SchemaRegistry Glossary Glossary AtlasGlossary AtlasGlossaryCategory AtlasGlossaryTerm Data mesh Data mesh DataDomain DataProduct DataContract Stakeholder StakeholderTitle Relational databases Relational databases Database Schema Table View MaterialisedView Column Query TablePartition CalculationView BigqueryTag DatabricksUnityCatalogTag SnowflakeDynamicTable SnowflakePipe SnowflakeStream SnowflakeTag Procedure Function SQL Query organization Query organization Namespace Collection Folder Cubes Cubes Cube CubeDimension CubeHierarchy CubeField APIs APIs APIPath APISpec APIObject APIQuery APIField Airflow Airflow AirflowDag AirflowTask Amazon Amazon Amazon DynamoDB Amazon DynamoDB DynamoDBTable DynamoDBSecondaryIndex DynamoDBGlobalSecondaryIndex DynamoDBLocalSecondaryIndex AWS S3 AWS S3 S3Bucket S3Object Amazon QuickSight Amazon QuickSight QuickSightAnalysis QuickSightAnalysisVisual QuickSightDashboard QuickSightDashboardVisual QuickSightDataset QuickSightDatasetField QuickSightFolder Anaplan Anaplan AnaplanWorkspace AnaplanApp AnaplanPage AnaplanModel AnaplanModule AnaplanList AnaplanSystemDimension AnaplanDimension AnaplanLineItem AnaplanView Anomalo Anomalo AnomaloCheck App App Application ApplicationField Microsoft Azure Microsoft Azure Azure Data Factory Azure Data Factory AdfActivity AdfDataflow AdfDataset AdfLinkedservice AdfPipeline Azure Data Lake Storage Azure Data Lake Storage ADLSAccount ADLSContainer ADLSObject Azure Event Hub Azure Event Hub AzureEventHub AzureEventHubConsumerGroup Azure Service Bus Azure Service Bus AzureServiceBusNamespace AzureServiceBusSchema AzureServiceBusTopic Cosmos DB Cosmos DB CosmosMongoDBAccount CosmosMongoDBCollection CosmosMongoDBDatabase Cognite Cognite Cognite3DModel CogniteAsset CogniteEvent CogniteFile CogniteSequence CogniteTimeseries Custom Custom CustomEntity Dataverse Dataverse DataverseEntity DataverseAttribute dbt dbt DbtColumnProcess DbtMetric DbtModel DbtModelColumn DbtProcess DbtSource DbtTag DbtTest Domo Domo DomoCard DomoDashboard DomoDataset DomoDatasetColumn DocumentDB DocumentDB DocumentDBCollection DocumentDBDatabase Fivetran Fivetran FivetranConnector Google Google Google Cloud Storage Google Cloud Storage GCSBucket GCSObject Google Data Studio Google Data Studio DataStudioAsset IBM IBM IBM Cognos Cognos CognosDashboard CognosDatasource CognosExploration CognosFile CognosFolder CognosModule CognosPackage CognosReport Kafka Kafka KafkaConsumerGroup KafkaTopic Looker Looker LookerDashboard LookerExplore LookerField LookerFolder LookerLook LookerModel LookerProject LookerQuery LookerTile LookerView Matillion Matillion MatillionComponent MatillionGroup MatillionJob MatillionProject Metabase Metabase MetabaseCollection MetabaseDashboard MetabaseQuestion MicroStrategy MicroStrategy MicroStrategyAttribute MicroStrategyCube MicroStrategyDocument MicroStrategyDossier MicroStrategyFact MicroStrategyMetric MicroStrategyProject MicroStrategyReport MicroStrategyVisualization Mode Mode ModeChart ModeCollection ModeQuery ModeReport ModeWorkspace Models Models ModelAttribute ModelAttributeAssociation ModelDataModel ModelEntity ModelEntityAssociation ModelVersion MongoDB MongoDB MongoDBCollection MongDBDatabase Monte Carlo Monte Carlo MCIncident MCMonitor Power BI Power BI Power BI PowerBIColumn PowerBIDashboard PowerBIDataflow PowerBIDataflowEntityColumn PowerBIDataset PowerBIDatasource PowerBIMeasure PowerBIPage PowerBIReport PowerBITable PowerBITile PowerBIWorkspace Preset Preset PresetChart PresetDashboard PresetDataset PresetWorkspace Qlik Qlik QlikApp QlikChart QlikDataset QlikSheet QlikSpace QlikStream Redash Redash RedashDashboard RedashQuery RedashVisualization Salesforce Salesforce SalesforceDashboard SalesforceField SalesforceObject SalesforceOrganization SalesforceReport SaaS Sigma Sigma SigmaWorkbook SigmaPage SigmaDataElement SigmaDataElementField SigmaDataset SigmaDatasetColumn Sisense Sisense SisenseDashboard SisenseDatamodel SisenseDatamodelTable SisenseFolder SisenseWidget Soda Soda SodaCheck Spark Spark SparkJob Superset Superset SupersetChart SupersetDashboard SupersetDataset Tableau Tableau TableauCalculatedField TableauDashboard TableauDatasource TableauDatasourceField TableauFlow TableauMetric TableauProject TableauSite TableauWorkbook TableauWorksheet ThoughtSpot ThoughtSpot ThoughtspotAnswer ThoughtspotColumn ThoughtspotDashlet ThoughtspotLiveboard ThoughtspotTable ThoughtspotView ThoughtspotWorksheet Endpoints Table of contents Introduction Jumping in Overall site map ¶ Introduction ¶ If you are new to Atlan, or to developing with Atlan, start with one of the following two options. These will set you up to develop with Atlan, step-by-step. Atlan University Self-paced, video-based walkthrough of the essentials of Atlan as a platform. Atlan Platform Essentials certification Introductory walkthrough Documentation-based walkthrough, including step-by-step examples. Start the walkthrough Jumping in ¶ If you are confident setting yourself up, and instead want to jump straight into specific examples, you can search (upper-right) or use the top-level menu: Common tasks Common operations on assets, that are available across all assets. Discover actions Asset-specific Operations that are specific to certain assets. Focus on a specific kind of asset Governance structures Operations dealing with governance structures, rather than assets. Manage governance structures Samples Real code samples our customers use to solve particular use cases. Review live samples Searching Delve deep into searching and aggregating metadata. Learn more about searching Events Delve deep into the details of the events Atlan triggers. Learn more about events 2022-08-22 2024-10-01 Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "topic": "API_SDK",
    "scraped_at": "2025-09-15 00:27:26"
  },
  {
    "title": "Asset-specific - Developer",
    "url": "https://developer.atlan.com/patterns/",
    "content": "Developer Toolkits Toolkits Packages Packages Running example Define via template Render your package Develop your logic Test your logic Release (GA) Widget reference Typedefs Typedefs Running example Define via template Render your model Test your model Bind the SDKs Write integration test Test baseline UX Release (GA) Testing Testing Overview Getting started Getting started Other important concepts Documentation conventions Integration options Integration options CLI dbt Java Python Kotlin Scala Clojure Go Events Raw REST API Site map Common tasks Common tasks Common asset actions Common asset actions Certify assets Manage announcements Change description Change owners Tag (classify) assets Change custom metadata Link terms to assets Link domains to assets Manage asset READMEs Add asset resources Manage asset relationships with attributes Asset CRUD operations Asset CRUD operations Create an asset Retrieve an asset Update an asset Delete an asset Find and apply suggestions Restore an asset Review changes to an asset Review accesses of an asset Get all assets that... Get all assets that... Search for assets Search examples Lineage Lineage Manage lineage Traverse lineage Bulk updates Bulk updates Combine multiple operations Update multiple assets End-to-end bulk update Event handling Event handling Webhook <> Lambda Webhook <> Lambda Set up Lambda Code your logic Deploy your code Set up webhook Manage your webhook Asset-specific Asset-specific Glossary operations Glossary operations Create objects Retrieval by name Create a hierarchy Categorize terms Traverse category hierarchy Creating assets Creating assets Manage relational assets Manage cube assets Manage object store assets Manage object store assets Manage AWS S3 assets Manage Azure Data Lake Storage assets Manage Google Cloud Storage assets Manage BI assets Manage BI assets Manage Google Data Studio assets Manage Preset assets Manage Superset assets Manage API assets Manage file assets Manage Airflow assets Manage Kafka assets Manage Azure Event Hub assets Manage App assets Manage AI assets Manage Insights assets Manage QuickSight assets Manage DocumentDB assets Manage Data Quality assets Manage Data Quality assets Manage Data Quality rules Connector types and icons Data mesh Data mesh Manage data domains Manage data products Data contracts Data contracts Manage data contracts (via CLI) Manage data contracts (via SDK) Profiling and popularity Profiling and popularity Manage column profiling Manage popularity Governance structures Governance structures Custom metadata Custom metadata Create custom metadata Retrieve custom metadata Update custom metadata Delete custom metadata Manage badges Manage options (enumerations) Tag management Tag management Manage Atlan tags Monitor propagation Access control Access control Manage personas Manage purposes Manage policies Access events API token management Run queries on an asset Users and groups Users and groups Create users and groups Retrieve users and groups Update users and groups Delete users and groups Manage SSO group mapping Packages and workflows Packages and workflows Manage workflows Manage workflow schedules Supported packages Supported packages Athena assets Asset import Asset export (basic) API token connection admin BigQuery assets Connection delete Confluent Kafka assets dbt assets DynamoDB assets Databricks assets Databricks miner Fivetran enrichment Glue assets Looker assets Lineage builder Lineage generator (no transformation) MongoDB assets Oracle assets Postgres assets PowerBI assets Redshift assets Relational assets builder Snowflake assets Snowflake miner Sigma assets SQL Server assets Tableau assets File management File management Reference Reference Searching Searching Querying Querying Term-level queries Full text queries Rank feature queries Compound queries Searchable fields Searchable fields Common search fields Glossary-specific search fields Limiting details Sorting search results Paging search results Aggregating search results Events Events Event triggers Event triggers Asset is created Asset is updated Asset is deleted Custom metadata is added Custom metadata is removed Asset is tagged Asset is untagged Lineage is created Event types Event types ENTITY_CREATE ENTITY_UPDATE ENTITY_DELETE BUSINESS_ATTRIBUTE_UPDATE CLASSIFICATION_ADD CLASSIFICATION_DELETE Specifications Specifications Data contract spec OpenLineage spec Types Types Core Core Referenceable Asset Connection Catalog Tag TagAttachment Access control Access control Persona Purpose AuthPolicy AuthService BusinessPolicy BusinessPolicyException BusinessPolicyIncident BusinessPolicyLog Incident Lineage Lineage ColumnProcess BIProcess Resources Resources Link File Readme ReadmeTemplate Badge Workflows Workflows Workflow WorkflowRun Task Structs Structs Action AuthPolicyCondition AuthPolicyValiditySchedule AwsCloudWatchMetric AwsTag AzureTag BadgeCondition BusinessPolicyRule ByocSsoConfig ColumnValueFrequencyMap DbtMetricFilter DbtJobRun GoogleLabel GoogleTag Histogram KafkaTopicConsumption MCRuleComparison MCRuleSchedule PopularityInsights SourceTagAttachment SourceTagAttachmentValue SourceTagAttribute StarredDetails Enumerations Enumerations AdfActivityState ADLSAccessTier ADLSAccountStatus ADLSEncryptionTypes ADLSLeaseState ADLSLeaseStatus ADLSObjectArchiveStatus ADLSObjectType ADLSPerformance ADLSProvisionState ADLSReplicationType ADLSStorageKind APIQueryParamTypeEnum atlas_operation AtlasGlossaryCategoryType AtlasGlossaryTermType AtlasGlossaryType AtlasGlossaryTermAssignmentStatus AtlasGlossaryTermRelationshipStatus AuthPolicyCategory AuthPolicyResourceCategory AuthPolicyType certificate_status DataGlossary DataProductCriticality DataProductSensitivity DataProductStatus DataProductVisibility DomoCardType DynamoDBSecondaryIndexProjectionType DynamoDBStatus file_type FivetranConnectorStatus FivetranProcessStatus google_datastudio_asset_type icon_type incident_severity kafka_topic_cleanup_policy kafka_topic_compression_type matillion_job_type ModelCardinalityType MongoDBCollectionValidationAction MongoDBCollectionValidationLevel OpenLineageRunState powerbi_endorsement query_username_strategy quick_sight_analysis_status quick_sight_dataset_field_type quick_sight_dataset_import_mode quick_sight_folder_type SchemaRegistrySchemaCompatibility SchemaRegistrySchemaType SourceCostUnitType table_type WorkflowRunStatus WorkflowRunType WorkflowStatus WorkflowType Abstractions Abstractions BI Cloud Insight ObjectStore EventStore DataQuality Metric NoSQL SchemaRegistry Glossary Glossary AtlasGlossary AtlasGlossaryCategory AtlasGlossaryTerm Data mesh Data mesh DataDomain DataProduct DataContract Stakeholder StakeholderTitle Relational databases Relational databases Database Schema Table View MaterialisedView Column Query TablePartition CalculationView BigqueryTag DatabricksUnityCatalogTag SnowflakeDynamicTable SnowflakePipe SnowflakeStream SnowflakeTag Procedure Function SQL Query organization Query organization Namespace Collection Folder Cubes Cubes Cube CubeDimension CubeHierarchy CubeField APIs APIs APIPath APISpec APIObject APIQuery APIField Airflow Airflow AirflowDag AirflowTask Amazon Amazon Amazon DynamoDB Amazon DynamoDB DynamoDBTable DynamoDBSecondaryIndex DynamoDBGlobalSecondaryIndex DynamoDBLocalSecondaryIndex AWS S3 AWS S3 S3Bucket S3Object Amazon QuickSight Amazon QuickSight QuickSightAnalysis QuickSightAnalysisVisual QuickSightDashboard QuickSightDashboardVisual QuickSightDataset QuickSightDatasetField QuickSightFolder Anaplan Anaplan AnaplanWorkspace AnaplanApp AnaplanPage AnaplanModel AnaplanModule AnaplanList AnaplanSystemDimension AnaplanDimension AnaplanLineItem AnaplanView Anomalo Anomalo AnomaloCheck App App Application ApplicationField Microsoft Azure Microsoft Azure Azure Data Factory Azure Data Factory AdfActivity AdfDataflow AdfDataset AdfLinkedservice AdfPipeline Azure Data Lake Storage Azure Data Lake Storage ADLSAccount ADLSContainer ADLSObject Azure Event Hub Azure Event Hub AzureEventHub AzureEventHubConsumerGroup Azure Service Bus Azure Service Bus AzureServiceBusNamespace AzureServiceBusSchema AzureServiceBusTopic Cosmos DB Cosmos DB CosmosMongoDBAccount CosmosMongoDBCollection CosmosMongoDBDatabase Cognite Cognite Cognite3DModel CogniteAsset CogniteEvent CogniteFile CogniteSequence CogniteTimeseries Custom Custom CustomEntity Dataverse Dataverse DataverseEntity DataverseAttribute dbt dbt DbtColumnProcess DbtMetric DbtModel DbtModelColumn DbtProcess DbtSource DbtTag DbtTest Domo Domo DomoCard DomoDashboard DomoDataset DomoDatasetColumn DocumentDB DocumentDB DocumentDBCollection DocumentDBDatabase Fivetran Fivetran FivetranConnector Google Google Google Cloud Storage Google Cloud Storage GCSBucket GCSObject Google Data Studio Google Data Studio DataStudioAsset IBM IBM IBM Cognos Cognos CognosDashboard CognosDatasource CognosExploration CognosFile CognosFolder CognosModule CognosPackage CognosReport Kafka Kafka KafkaConsumerGroup KafkaTopic Looker Looker LookerDashboard LookerExplore LookerField LookerFolder LookerLook LookerModel LookerProject LookerQuery LookerTile LookerView Matillion Matillion MatillionComponent MatillionGroup MatillionJob MatillionProject Metabase Metabase MetabaseCollection MetabaseDashboard MetabaseQuestion MicroStrategy MicroStrategy MicroStrategyAttribute MicroStrategyCube MicroStrategyDocument MicroStrategyDossier MicroStrategyFact MicroStrategyMetric MicroStrategyProject MicroStrategyReport MicroStrategyVisualization Mode Mode ModeChart ModeCollection ModeQuery ModeReport ModeWorkspace Models Models ModelAttribute ModelAttributeAssociation ModelDataModel ModelEntity ModelEntityAssociation ModelVersion MongoDB MongoDB MongoDBCollection MongDBDatabase Monte Carlo Monte Carlo MCIncident MCMonitor Power BI Power BI Power BI PowerBIColumn PowerBIDashboard PowerBIDataflow PowerBIDataflowEntityColumn PowerBIDataset PowerBIDatasource PowerBIMeasure PowerBIPage PowerBIReport PowerBITable PowerBITile PowerBIWorkspace Preset Preset PresetChart PresetDashboard PresetDataset PresetWorkspace Qlik Qlik QlikApp QlikChart QlikDataset QlikSheet QlikSpace QlikStream Redash Redash RedashDashboard RedashQuery RedashVisualization Salesforce Salesforce SalesforceDashboard SalesforceField SalesforceObject SalesforceOrganization SalesforceReport SaaS Sigma Sigma SigmaWorkbook SigmaPage SigmaDataElement SigmaDataElementField SigmaDataset SigmaDatasetColumn Sisense Sisense SisenseDashboard SisenseDatamodel SisenseDatamodelTable SisenseFolder SisenseWidget Soda Soda SodaCheck Spark Spark SparkJob Superset Superset SupersetChart SupersetDashboard SupersetDataset Tableau Tableau TableauCalculatedField TableauDashboard TableauDatasource TableauDatasourceField TableauFlow TableauMetric TableauProject TableauSite TableauWorkbook TableauWorksheet ThoughtSpot ThoughtSpot ThoughtspotAnswer ThoughtspotColumn ThoughtspotDashlet ThoughtspotLiveboard ThoughtspotTable ThoughtspotView ThoughtspotWorksheet Endpoints Asset-specific operations ¶ As developers ourselves, we know that learning is often easiest through example. In this Asset-specific operations section you will find details about managing specific kinds of assets. You may also want to explore: Common tasks Common operations on assets, that are available across all assets. Discover actions Governance structures Operations dealing with governance structures, rather than assets. Manage governance structures 2023-04-12 2024-05-17 Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "topic": "API_SDK",
    "scraped_at": "2025-09-15 00:27:27"
  },
  {
    "title": "Software development kits (SDKs) | Atlan Documentation",
    "url": "https://docs.atlan.com/get-started/how-tos/getting-started-with-the-apis",
    "content": "Get Started Quick Start Guides Developers Software development kits (SDKs) Software development kits (SDKs) You can integrate with Atlan in several ways. We recommend using one of our software development kits (SDKs) , if possible, which: encode best practices, are built for performance, and add validations and simplifications not found in the raw REST APIs themselves. Did you know? Our SDKs are nothing more than client libraries that wrap our underlying REST APIs. They prevent you from needing to reinvent the wheel by wrapping the REST APIs yourself. Tags: api rest-api graphql Previous Custom solutions Next Atlan's open API",
    "topic": "API_SDK",
    "scraped_at": "2025-09-15 00:27:28"
  },
  {
    "title": "Specifications - Developer",
    "url": "https://developer.atlan.com/reference/specs/",
    "content": "Developer Toolkits Toolkits Packages Packages Running example Define via template Render your package Develop your logic Test your logic Release (GA) Widget reference Typedefs Typedefs Running example Define via template Render your model Test your model Bind the SDKs Write integration test Test baseline UX Release (GA) Testing Testing Overview Getting started Getting started Other important concepts Documentation conventions Integration options Integration options CLI dbt Java Python Kotlin Scala Clojure Go Events Raw REST API Site map Common tasks Common tasks Common asset actions Common asset actions Certify assets Manage announcements Change description Change owners Tag (classify) assets Change custom metadata Link terms to assets Link domains to assets Manage asset READMEs Add asset resources Manage asset relationships with attributes Asset CRUD operations Asset CRUD operations Create an asset Retrieve an asset Update an asset Delete an asset Find and apply suggestions Restore an asset Review changes to an asset Review accesses of an asset Get all assets that... Get all assets that... Search for assets Search examples Lineage Lineage Manage lineage Traverse lineage Bulk updates Bulk updates Combine multiple operations Update multiple assets End-to-end bulk update Event handling Event handling Webhook <> Lambda Webhook <> Lambda Set up Lambda Code your logic Deploy your code Set up webhook Manage your webhook Asset-specific Asset-specific Glossary operations Glossary operations Create objects Retrieval by name Create a hierarchy Categorize terms Traverse category hierarchy Creating assets Creating assets Manage relational assets Manage cube assets Manage object store assets Manage object store assets Manage AWS S3 assets Manage Azure Data Lake Storage assets Manage Google Cloud Storage assets Manage BI assets Manage BI assets Manage Google Data Studio assets Manage Preset assets Manage Superset assets Manage API assets Manage file assets Manage Airflow assets Manage Kafka assets Manage Azure Event Hub assets Manage App assets Manage AI assets Manage Insights assets Manage QuickSight assets Manage DocumentDB assets Manage Data Quality assets Manage Data Quality assets Manage Data Quality rules Connector types and icons Data mesh Data mesh Manage data domains Manage data products Data contracts Data contracts Manage data contracts (via CLI) Manage data contracts (via SDK) Profiling and popularity Profiling and popularity Manage column profiling Manage popularity Governance structures Governance structures Custom metadata Custom metadata Create custom metadata Retrieve custom metadata Update custom metadata Delete custom metadata Manage badges Manage options (enumerations) Tag management Tag management Manage Atlan tags Monitor propagation Access control Access control Manage personas Manage purposes Manage policies Access events API token management Run queries on an asset Users and groups Users and groups Create users and groups Retrieve users and groups Update users and groups Delete users and groups Manage SSO group mapping Packages and workflows Packages and workflows Manage workflows Manage workflow schedules Supported packages Supported packages Athena assets Asset import Asset export (basic) API token connection admin BigQuery assets Connection delete Confluent Kafka assets dbt assets DynamoDB assets Databricks assets Databricks miner Fivetran enrichment Glue assets Looker assets Lineage builder Lineage generator (no transformation) MongoDB assets Oracle assets Postgres assets PowerBI assets Redshift assets Relational assets builder Snowflake assets Snowflake miner Sigma assets SQL Server assets Tableau assets File management File management Reference Reference Searching Searching Querying Querying Term-level queries Full text queries Rank feature queries Compound queries Searchable fields Searchable fields Common search fields Glossary-specific search fields Limiting details Sorting search results Paging search results Aggregating search results Events Events Event triggers Event triggers Asset is created Asset is updated Asset is deleted Custom metadata is added Custom metadata is removed Asset is tagged Asset is untagged Lineage is created Event types Event types ENTITY_CREATE ENTITY_UPDATE ENTITY_DELETE BUSINESS_ATTRIBUTE_UPDATE CLASSIFICATION_ADD CLASSIFICATION_DELETE Specifications Specifications Data contract spec OpenLineage spec Types Types Core Core Referenceable Asset Connection Catalog Tag TagAttachment Access control Access control Persona Purpose AuthPolicy AuthService BusinessPolicy BusinessPolicyException BusinessPolicyIncident BusinessPolicyLog Incident Lineage Lineage ColumnProcess BIProcess Resources Resources Link File Readme ReadmeTemplate Badge Workflows Workflows Workflow WorkflowRun Task Structs Structs Action AuthPolicyCondition AuthPolicyValiditySchedule AwsCloudWatchMetric AwsTag AzureTag BadgeCondition BusinessPolicyRule ByocSsoConfig ColumnValueFrequencyMap DbtMetricFilter DbtJobRun GoogleLabel GoogleTag Histogram KafkaTopicConsumption MCRuleComparison MCRuleSchedule PopularityInsights SourceTagAttachment SourceTagAttachmentValue SourceTagAttribute StarredDetails Enumerations Enumerations AdfActivityState ADLSAccessTier ADLSAccountStatus ADLSEncryptionTypes ADLSLeaseState ADLSLeaseStatus ADLSObjectArchiveStatus ADLSObjectType ADLSPerformance ADLSProvisionState ADLSReplicationType ADLSStorageKind APIQueryParamTypeEnum atlas_operation AtlasGlossaryCategoryType AtlasGlossaryTermType AtlasGlossaryType AtlasGlossaryTermAssignmentStatus AtlasGlossaryTermRelationshipStatus AuthPolicyCategory AuthPolicyResourceCategory AuthPolicyType certificate_status DataGlossary DataProductCriticality DataProductSensitivity DataProductStatus DataProductVisibility DomoCardType DynamoDBSecondaryIndexProjectionType DynamoDBStatus file_type FivetranConnectorStatus FivetranProcessStatus google_datastudio_asset_type icon_type incident_severity kafka_topic_cleanup_policy kafka_topic_compression_type matillion_job_type ModelCardinalityType MongoDBCollectionValidationAction MongoDBCollectionValidationLevel OpenLineageRunState powerbi_endorsement query_username_strategy quick_sight_analysis_status quick_sight_dataset_field_type quick_sight_dataset_import_mode quick_sight_folder_type SchemaRegistrySchemaCompatibility SchemaRegistrySchemaType SourceCostUnitType table_type WorkflowRunStatus WorkflowRunType WorkflowStatus WorkflowType Abstractions Abstractions BI Cloud Insight ObjectStore EventStore DataQuality Metric NoSQL SchemaRegistry Glossary Glossary AtlasGlossary AtlasGlossaryCategory AtlasGlossaryTerm Data mesh Data mesh DataDomain DataProduct DataContract Stakeholder StakeholderTitle Relational databases Relational databases Database Schema Table View MaterialisedView Column Query TablePartition CalculationView BigqueryTag DatabricksUnityCatalogTag SnowflakeDynamicTable SnowflakePipe SnowflakeStream SnowflakeTag Procedure Function SQL Query organization Query organization Namespace Collection Folder Cubes Cubes Cube CubeDimension CubeHierarchy CubeField APIs APIs APIPath APISpec APIObject APIQuery APIField Airflow Airflow AirflowDag AirflowTask Amazon Amazon Amazon DynamoDB Amazon DynamoDB DynamoDBTable DynamoDBSecondaryIndex DynamoDBGlobalSecondaryIndex DynamoDBLocalSecondaryIndex AWS S3 AWS S3 S3Bucket S3Object Amazon QuickSight Amazon QuickSight QuickSightAnalysis QuickSightAnalysisVisual QuickSightDashboard QuickSightDashboardVisual QuickSightDataset QuickSightDatasetField QuickSightFolder Anaplan Anaplan AnaplanWorkspace AnaplanApp AnaplanPage AnaplanModel AnaplanModule AnaplanList AnaplanSystemDimension AnaplanDimension AnaplanLineItem AnaplanView Anomalo Anomalo AnomaloCheck App App Application ApplicationField Microsoft Azure Microsoft Azure Azure Data Factory Azure Data Factory AdfActivity AdfDataflow AdfDataset AdfLinkedservice AdfPipeline Azure Data Lake Storage Azure Data Lake Storage ADLSAccount ADLSContainer ADLSObject Azure Event Hub Azure Event Hub AzureEventHub AzureEventHubConsumerGroup Azure Service Bus Azure Service Bus AzureServiceBusNamespace AzureServiceBusSchema AzureServiceBusTopic Cosmos DB Cosmos DB CosmosMongoDBAccount CosmosMongoDBCollection CosmosMongoDBDatabase Cognite Cognite Cognite3DModel CogniteAsset CogniteEvent CogniteFile CogniteSequence CogniteTimeseries Custom Custom CustomEntity Dataverse Dataverse DataverseEntity DataverseAttribute dbt dbt DbtColumnProcess DbtMetric DbtModel DbtModelColumn DbtProcess DbtSource DbtTag DbtTest Domo Domo DomoCard DomoDashboard DomoDataset DomoDatasetColumn DocumentDB DocumentDB DocumentDBCollection DocumentDBDatabase Fivetran Fivetran FivetranConnector Google Google Google Cloud Storage Google Cloud Storage GCSBucket GCSObject Google Data Studio Google Data Studio DataStudioAsset IBM IBM IBM Cognos Cognos CognosDashboard CognosDatasource CognosExploration CognosFile CognosFolder CognosModule CognosPackage CognosReport Kafka Kafka KafkaConsumerGroup KafkaTopic Looker Looker LookerDashboard LookerExplore LookerField LookerFolder LookerLook LookerModel LookerProject LookerQuery LookerTile LookerView Matillion Matillion MatillionComponent MatillionGroup MatillionJob MatillionProject Metabase Metabase MetabaseCollection MetabaseDashboard MetabaseQuestion MicroStrategy MicroStrategy MicroStrategyAttribute MicroStrategyCube MicroStrategyDocument MicroStrategyDossier MicroStrategyFact MicroStrategyMetric MicroStrategyProject MicroStrategyReport MicroStrategyVisualization Mode Mode ModeChart ModeCollection ModeQuery ModeReport ModeWorkspace Models Models ModelAttribute ModelAttributeAssociation ModelDataModel ModelEntity ModelEntityAssociation ModelVersion MongoDB MongoDB MongoDBCollection MongDBDatabase Monte Carlo Monte Carlo MCIncident MCMonitor Power BI Power BI Power BI PowerBIColumn PowerBIDashboard PowerBIDataflow PowerBIDataflowEntityColumn PowerBIDataset PowerBIDatasource PowerBIMeasure PowerBIPage PowerBIReport PowerBITable PowerBITile PowerBIWorkspace Preset Preset PresetChart PresetDashboard PresetDataset PresetWorkspace Qlik Qlik QlikApp QlikChart QlikDataset QlikSheet QlikSpace QlikStream Redash Redash RedashDashboard RedashQuery RedashVisualization Salesforce Salesforce SalesforceDashboard SalesforceField SalesforceObject SalesforceOrganization SalesforceReport SaaS Sigma Sigma SigmaWorkbook SigmaPage SigmaDataElement SigmaDataElementField SigmaDataset SigmaDatasetColumn Sisense Sisense SisenseDashboard SisenseDatamodel SisenseDatamodelTable SisenseFolder SisenseWidget Soda Soda SodaCheck Spark Spark SparkJob Superset Superset SupersetChart SupersetDashboard SupersetDataset Tableau Tableau TableauCalculatedField TableauDashboard TableauDatasource TableauDatasourceField TableauFlow TableauMetric TableauProject TableauSite TableauWorkbook TableauWorksheet ThoughtSpot ThoughtSpot ThoughtspotAnswer ThoughtspotColumn ThoughtspotDashlet ThoughtspotLiveboard ThoughtspotTable ThoughtspotView ThoughtspotWorksheet Endpoints Specifications ¶ At Atlan we are eager to adopt proven standards that are leading the way to simplify the lives of the Humans of Data. These include: Data contracts OpenLineage 2024-07-01 2024-07-01 Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "topic": "API_SDK",
    "scraped_at": "2025-09-15 00:27:29"
  },
  {
    "title": "Discovery | Atlan Documentation",
    "url": "https://docs.atlan.com/product/capabilities/discovery",
    "content": "Use data Discovery On this page Discovery Overview: Atlan's discovery capabilities help users find, understand, and use data assets across your organization. With powerful search, filtering, and browsing features, users can quickly locate relevant data assets, explore their context, and access the information they need to make data-driven decisions. Get started ​ How to search and discover assets For detailed search, filtering, and troubleshooting information, use the sidebar navigation. Tags: discovery search browse capabilities Next Search and discover assets Get started",
    "topic": "Product",
    "scraped_at": "2025-09-15 00:27:30"
  },
  {
    "title": "Insights | Atlan Documentation",
    "url": "https://docs.atlan.com/product/capabilities/insights",
    "content": "Use data Insights On this page Insights ➕ Available via the Insights package Overview: Use Atlan's Insights to query and analyze your data assets. Leverage the visual query builder or write SQL queries to explore your data, create visualizations, and share insights with your team. Get started ​ How to query data Guides ​ Query building ​ How to make a query interactive : Create interactive queries with parameters. How to query without shared credentials : Query data without sharing credentials. How to provide credentials to query data : Configure credentials for querying. Query management ​ How to save and share queries : Save and collaborate on queries with your team. How to schedule a query : Set up automated query execution. Concepts ​ Query builder actions : Learn about the different actions available in the query builder. References ​ Tips and tricks : Handy shortcuts and advanced capabilities for Insights. Troubleshooting ​ Troubleshooting exporting large query results : Resolve issues when exporting large query result sets. Troubleshooting bring your own credentials : Fix credential-related problems when running queries. FAQ ​ Why do I only see tables from the same schema to join from in a visual query : Understand schema-based join limitations. Can I turn off sample data preview for the entire organization : Learn about sample data preview settings. Are there any limits on concurrent queries : Understand query concurrency limits. Can I query any data warehouse or data lake : Learn about supported data sources. How to monitor for runaway queries : Track and manage query performance. Can we restrict who can query our data warehouse : Understand query access controls. How can I identify an insights query in my database access log : Track query execution in logs. How to use parameterized queries : Create dynamic queries with parameters. What controls the frequency of queries : Understand query scheduling and execution. Tags: insights query analysis capabilities Next How to query data Get started Guides Concepts References Troubleshooting FAQ",
    "topic": "Product",
    "scraped_at": "2025-09-15 00:27:32"
  },
  {
    "title": "Lineage | Atlan Documentation",
    "url": "https://docs.atlan.com/product/capabilities/lineage",
    "content": "Use data Lineage On this page Lineage Overview: Data lineage in Atlan helps you understand how data moves across your data landscape. Use lineage to perform root cause analysis, impact analysis, and automate metadata propagation. Get started ​ How to view lineage Guides ​ Lineage Visualization ​ How to download and export lineage : Export lineage information for external use. Concepts ​ What is lineage : Understand the fundamentals of data lineage. What is column-level lineage : Learn about column-level lineage tracking. What are processes : Understand how processes are represented in lineage. What are partial assets : Learn about partial asset representation in lineage. Tags: lineage data-flow dependencies capabilities Next How to view lineage Get started Guides Concepts",
    "topic": "Product",
    "scraped_at": "2025-09-15 00:27:32"
  },
  {
    "title": "Connectors | Atlan Documentation",
    "url": "https://docs.atlan.com/product/connections",
    "content": "Connect data Connectivity Framework Connector Framework Connectors Atlan's connectors enable you to integrate, catalog, and govern metadata from leading data platforms. These connectors help you discover, document, and manage your data assets within your organization's data ecosystem, providing a unified view of your data landscape. Core offerings ​ 🔍 Preflight Checks Verify permissions and configuration before running crawlers for successful metadata extraction. 🔄 Workflow Management Follow recommended sequences for running workflows to ensure proper metadata extraction and lineage construction. 🔌 Connectivity Options Choose from various connectivity methods including direct connections, private network links, and secure agent extraction. 📊 Metadata Extraction Comprehensive crawling of metadata including schemas, tables, views, and lineage information from supported sources. 💡 For optimal results, follow the recommended workflow order: crawl data stores first, then run data quality tools, mine query logs, run extract-load tools, transformation tools, and finally crawl business intelligence tools. Tags: connect data integration connectors atlan data sources Next Manage connectivity",
    "topic": "Product",
    "scraped_at": "2025-09-15 00:27:33"
  },
  {
    "title": "Integrations | Atlan Documentation",
    "url": "https://docs.atlan.com/product/integrations",
    "content": "Configure Atlan Integrations Integrations Atlan integrates with a wide range of tools to help you automate workflows, connect with your favorite apps, and manage identity and access. These integrations connect your data catalog with the tools your teams already use, creating a seamless data experience across your tech stack. Key concepts ​ Integration categories : Atlan offers integrations across five categories: project management, communication, collaboration, automation, and identity management. Connection methods : Most integrations use secure authentication methods like OAuth, API keys, or service accounts. Bi-directional sync : Updates flow between Atlan and integrated tools, ensuring data consistency across platforms. Custom webhooks : Extend Atlan's capabilities by building custom integrations using the provided APIs and webhooks. Core offerings ​ ⚙️ Automation Connect with platforms like AWS Lambda to automate data workflows and streamline routine tasks. 👥 Collaboration Integrate with tools like Slack and Microsoft Teams to enhance team collaboration and knowledge sharing. 💬 Communication Connect with SMTP for real-time alerts. 🔐 Identity management Integrate with identity providers like Okta and Azure AD for seamless authentication and user management. 📋 Project management Connect with tools like Jira and Service Now to link data assets to projects and track data-related tasks. Get started ​ 1 Select an integration Choose from Atlan's available integrations based on your team's tools and workflows. → 2 Configure connection Follow the integration-specific setup guide to establish a secure connection with your tool. → 3 Test and activate Verify the integration is working correctly with a test action, then activate for your organization. 💡 Need a custom integration? Atlan provides APIs and webhooks that let you build custom integrations with any tool in your tech stack. Tags: integrations atlan setup Next Automation Integrations",
    "topic": "Product",
    "scraped_at": "2025-09-15 00:27:34"
  },
  {
    "title": "Administration | Atlan Documentation",
    "url": "https://docs.atlan.com/product/administration",
    "content": "Configure Atlan Administration Administration Atlan's administration features provide comprehensive tools for managing your data workspace. Configure user access, monitor system logs, and customize workspace settings to help your organization's data environment operate efficiently and securely while meeting your specific requirements. Key features ​ 📊 Logs Monitor system events and user activities through comprehensive logs. Track changes and troubleshoot issues with detailed event history. 🧪 Labs Access experimental features and beta functionality. Test new capabilities before they're generally available. 📝 README templates Standardize documentation across your data assets with customizable templates. Maintain consistent information structure. Featured guides ​ View event logs Learn how to access and interpret system event logs Enable labs features Discover how to activate and use experimental features Create README templates Set up standardized templates for asset documentation Tags: atlan documentation Next Allow guests to request updates",
    "topic": "Product",
    "scraped_at": "2025-09-15 00:27:34"
  },
  {
    "title": "What is Atlan? | Atlan Documentation",
    "url": "https://docs.atlan.com/get-started/what-is-atlan",
    "content": "Get Started What is Atlan? On this page What is Atlan? We are a modern data workspace that makes collaboration among diverse users like business, analysts, and engineers easier, increasing efficiency and agility in data projects. We started out as a data team, solving social good problems using data science. We built Atlan for ourselves over the course of 200 data projects, which included India's national data platform used by the prime minister and monitoring the Sustainable Development Goals with the United Nations. Atlan helped us build India's national data platform with an 8-member team, making it the fastest project of its kind to go live in just 12 months - instead of the projected three years. Why we built Atlan ​ Data teams can be diverse: analysts, scientists, engineers, and business users. Diverse people with diverse tools and skillsets mean diverse DNAs. All of it led to chaos, which made our Slack channels look like this... We call this \"collaboration overheard\" ​ We knew we couldn't scale like this, there had to be a better way. We borrowed the principles of Agile from product teams, DevOps from engineering teams, and Lean Manufacturing from supply chain teams. We then experimented for two years and across 200 data projects to create our own idea of what makes data teams successful. We call this DataOps . How Atlan helps data teams ​ With Atlan, analyst teams at Unilever have shipped 100+ additional data projects per quarter, while data science teams at Samsung have saved 50% of their time. Create self-service ecosystems by reducing dependencies ​ Atlan makes all your data assets easily discoverable. No more Slack messages like \"Where's that dataset?\" or long email threads for approvals. With Atlan, you can simply Cmd+K your way to the right data asset. Key capabilities : discovery and search , Visual Query Builder , saved queries , READMEs Improve the agility of your data team ​ Data practitioners spend 30-50% of their time finding and understanding data. Atlan cuts that time by 95%. Your data team will be shipping 2-3 times more projects in no time. Key capabilities : visibility of data quality tests and observability alerts, automated lineage , Atlan AI Promote governance and a sustainable data culture ​ Don't lose sleep trying to figure out if your sensitive data is secure. Build ecosystems of trust, make your team happy, and let Atlan manage governance and security behind the scenes. Key capabilities : tag sensitive data , granular access control , data products Tags: atlan documentation Next Administrators Why we built Atlan How Atlan helps data teams",
    "topic": "Product",
    "scraped_at": "2025-09-15 00:27:35"
  },
  {
    "title": "Administrators | Atlan Documentation",
    "url": "https://docs.atlan.com/get-started/how-tos/quick-start-for-admins",
    "content": "Get Started Quick Start Guides Administrators On this page Administrators User management ​ User management is a critical part of data governance. Atlan's user management capabilities should be a mainstay of how you organize and control access for people in your organization. Add and manage users from the admin center ​ It's super simple to invite and remove users from Atlan from the Admin center . You can also manage existing users by adding them to groups, changing their roles, or set up SSO , SCIM , and SMTP configurations. Manage access control from the governance center ​ The Governance center is where you can build access control mechanisms to manage user access . Personas allow you to group users into teams, such as Financial Analysts or Cloud Engineers , and set policies based on the access those personas should have. Purposes are where you can build policies based on the actions or access that a user might need. For example, you can use Atlan's policy-based access controls to manage access to PII and other sensitive data. This is a best practice for data governance. Once you set these policies, Atlan will enforce them throughout your users' experience. This means that users who don't have access to a particular type of data will not be able to see it. Governance workflows help you set up robust controls on data access management, metadata enrichment, new entity creation, and more, with out-of-the-box workflow templates and automated execution. Asset profile ​ The asset profile in Atlan gives you a quick and clear understanding of what a data asset contains. You can think of the asset profile as the TL;DR about your data. Glossary ​ The Atlan glossary is a rich tool for defining and organizing your data terminology to improve transparency and share knowledge. No need to ask around for what a column name means. The glossary functions as a source of truth for teams to understand their data assets. Start keeping all your definitions in one searchable place. The glossary provides key intel on your data assets so you can quickly understand important attributes of your data, such as: Owners of your data, so you know who to ask for clarification. Certificate status, to easily understand if metadata enrichment is still in progress or the asset is ready to be used. Linked assets that are relevant to the term, so you can explore other helpful material. Did you know? The glossary helps power Atlan's powerful search tool , so tagging and defining assets are critical to helping your team find what they need. Discovery ​ We rely on search bars to find things in almost every corner of the internet. Atlan uses a similar search tool to help you explore your data assets. The discovery tool is Atlan's powerful in-platform search, powered by the terms and descriptions you've added to your data assets. Here are a few of the things that make Atlan's discovery awesome: Every attribute of your data is searchable in Atlan - saved SQL queries, schemas, links, and more. This lets you search far and wide to find exactly what you need. Intelligent keyword recognition sees through your typos to show exactly what you wanted, no matter what you actually typed. Search assets from just about any page in Atlan using Cmd/Ctrl+K or by clicking Search assets across Atlan at the top of any page. Control your search by using facets about your data (such as the verification status or owner) to find what's most important to you. Sort by popularity to quickly discover what assets your teammates are using every day. Tags: get-started quick-start Previous What is Atlan? Next Data consumers User management Asset profile Glossary Discovery",
    "topic": "How_to",
    "scraped_at": "2025-09-15 00:27:39"
  },
  {
    "title": "Set up Snowflake | Atlan Documentation",
    "url": "https://docs.atlan.com/apps/connectors/data-warehouses/snowflake/how-tos/set-up-snowflake",
    "content": "Connect data Data Warehouses Snowflake Get Started Set up Snowflake On this page Set up Snowflake Who can do this? You need your Snowflake administrator to run these commands - you may not have access yourself. Create user and role in Snowflake ​ Create a role and user in Snowflake using the following commands: Create role ​ Create a role in Snowflake using the following commands: CREATE OR REPLACE ROLE atlan_user_role ; GRANT OPERATE , USAGE ON WAREHOUSE \"<warehouse-name>\" TO ROLE atlan_user_role ; Replace <warehouse-name> with the default warehouse to use when running the Snowflake crawler . Atlan requires the following privileges to: OPERATE enables Atlan to start the virtual warehouse to fetch metadata if the warehouse has stopped. USAGE enables Atlan to show or list metadata from Snowflake. This in turn enables the Snowflake crawler to run the SHOW query. Create a user ​ Create a separate user to integrate into Atlan, using one of the following 3 options: With a public key in Snowflake ​ See Snowflake's official guide for details on generating an RSA key-pair . To create a user with a key-pair, replace the value for rsa_public_key with the public key and run the following: CREATE USER atlan_user rsa_public_key = 'MIIBIjANBgkqh...' default_role = atlan_user_role default_warehouse = '<warehouse-name>' display_name = 'Atlan' TYPE = 'SERVICE' Learn more about the SERVICE type property in Snowflake documentation . Did you know? Atlan only supports encrypted private keys with a non-empty passphrase - generally recommended as more secure. An empty passphrase results in workflow failures. To generate an encrypted private key, omit the -nocrypt option. Refer to Snowflake documentation to learn more. With a password in Snowflake ​ Did you know? Snowflake recommends transitioning away from basic authentication using username and password. Change to key-pair authentication for enhanced security. For any existing Snowflake workflows, you can modify the crawler configuration to update the authentication method. To create a user with a password, replace <password> and run the following: CREATE USER atlan_user password = '<password>' default_role = atlan_user_role default_warehouse = '<warehouse-name>' display_name = 'Atlan' TYPE = 'LEGACY_SERVICE' Learn more about the LEGACY_SERVICE type property in Snowflake documentation . Managed through your identity provider (IdP) Private preview ​ This method is currently only available if Okta is your IdP (Snowflake supports) authenticating natively through Okta : Create a user in your identity provider (IdP) and use federated authentication in Snowflake . The password for this user must be maintained solely in the IdP and multi-factor authentication (MFA) must be disabled. Grant role to user ​ To grant the atlan_user_role to the new user: GRANT ROLE atlan_user_role TO USER atlan_user ; Configure OAuth (client credentials flow) with Microsoft Entra ID ​ To configure OAuth authentication using Microsoft Entra ID (formerly Azure AD) with the client credentials flow: Follow Snowflake's documentation to: Register a new application in Microsoft Entra ID Collect the client ID , tenant ID , and client secret Add the required API permissions In Snowflake, create a security integration using the following: CREATE SECURITY INTEGRATION external_oauth_azure_ad TYPE = external_oauth ENABLED = true EXTERNAL_OAUTH_TYPE = azure EXTERNAL_OAUTH_ISSUER = '\\<AZURE_AD_ISSUER\\>' EXTERNAL_OAUTH_JWS_KEYS_URL = '\\<AZURE_AD_JWS_KEY_ENDPOINT\\>' EXTERNAL_OAUTH_AUDIENCE_LIST = ( '\\<SNOWFLAKE_APPLICATION_ID_URI\\>' ) EXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM = 'sub' EXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE = 'login_name' ; Replace the placeholders with actual values from your Azure AD app: <AZURE_AD_ISSUER> → Your tenant's OAuth 2.0 issuer URL <AZURE_AD_JWS_KEY_ENDPOINT> → Azure JWKs URI <SNOWFLAKE_APPLICATION_ID_URI> → Application ID URI of the Azure app Create a Snowflake user with a login name that exactly matches the Azure AD client object ID: CREATE USER oauth_svc_user WITH LOGIN_NAME = '\\<AZURE_AD_CLIENT_OBJECT_ID\\>' -- Use Azure client OBJECT ID DEFAULT_ROLE = \\ < ROLE\\ > DEFAULT_WAREHOUSE = \\ < WAREHOUSE\\ > ; Grant the configured role to this user: GRANT ROLE \\ < ROLE\\ > TO USER oauth_svc_user ; Choose metadata fetching method ​ Atlan supports two methods for fetching metadata from Snowflake - account usage and information schema. You should choose one of these two methods to set up Snowflake: Account usage Information schema Overview Simplified grants but some limitations in functionality Most comprehensive approach, more grant management required Method Views in the SNOWFLAKE database that display object metadata and usage metrics for your account System-defined views and table functions that provide extensive metadata for objects created in your account Permissions User role and account, single grant for SNOWFLAKE database User role and account, multiple grants per database Data latency 45 minutes to 3 hours (varies by view) None Historical data retention 1 year 7 days to 6 months (varies by view or table function) Asset extraction ACCOUNT_USAGE schema INFORMATION_SCHEMA schema View lineage ACCOUNT_USAGE schema INFORMATION_SCHEMA schema Table lineage ACCOUNT_USAGE schema ACCOUNT_USAGE schema Tag import ACCOUNT_USAGE schema ACCOUNT_USAGE schema Usage and popularity ACCOUNT_USAGE schema ACCOUNT_USAGE schema Metadata extraction time Varies by warehouse size. For example, 8 minutes for 10 million assets (recommended for extracting a large number of assets) Varies by warehouse size. For example, 2+ hours for 10 million assets Extraction limitations External table location data, procedures, and primary and foreign keys None Grant permissions for account usage method ​ danger If you want to set warehouse timeouts when using this method, set a large value initially for the workflow to succeed. Once the workflow has succeeded, adjust the value to be twice the extraction time. This method uses the views in SNOWFLAKE.ACCOUNT_USAGE (or a copied version of this schema) to fetch the metadata from Snowflake into Atlan. You can be more granular with permissions using this method, but there are limitations with this approach . To crawl assets, generate lineage, and import tags ​ If you also want to be able to preview and query the data, you can use the preview and query existing assets permissions instead. Snowflake stores all tag objects in the ACCOUNT_USAGE schema. If you're using the account usage method to crawl metadata in Atlan or you have configured the Snowflake miner , you need to grant the same permissions to import tags as required for crawling Snowflake assets. Note that object tagging in Snowflake currently requires Enterprise Edition or higher . To use the default SNOWFLAKE database and ACCOUNT_USAGE schema and also mine Snowflake's query history (for lineage), grant these permissions: USE ROLE ACCOUNTADMIN ; GRANT IMPORTED PRIVILEGES ON DATABASE SNOWFLAKE TO ROLE atlan_user_role ; The ACCOUNTADMIN role is required to grant privileges on the SNOWFLAKE database due to the following reasons: By default, only the ACCOUNTADMIN role can access the SNOWFLAKE database. To enable other roles to access the database and schemas and query the views, a user with the ACCOUNTADMIN role needs to grant IMPORTED PRIVILEGES on the SNOWFLAKE database to the desired roles. To use a copied or cloned version of this default schema, where you can also remove any sensitive data for security purposes, grant these permissions: GRANT USAGE ON DATABASE \"<copied-database>\" TO ROLE atlan_user_role ; GRANT USAGE ON SCHEMA \"<copied-schema>\" IN DATABASE \"<copied-database>\" TO ROLE atlan_user_role ; GRANT REFERENCES ON ALL VIEWS IN DATABASE \"<copied-database>\" TO ROLE atlan_user_role ; Replace <copied-database> with the copied Snowflake database name. Replace <copied-schema> with the copied Snowflake ACCOUNT_USAGE schema name. The grants for the copied version can't be used on the original SNOWFLAKE database. This is because Snowflake produces an error that granular grants can't be given to imported databases. When using a cloned or copied version, verify that the table or view definition remains unchanged as in your SNOWFLAKE database. If the format is different. For example, a column is missing and it no longer qualifies as a clone. To crawl streams ​ To crawl streams, provide the following permissions: To crawl current streams: GRANT USAGE ON ALL SCHEMAS IN DATABASE \"<database-name>\" TO ROLE atlan_user_role ; GRANT REFERENCES ON ALL TABLES IN DATABASE \"<database-name>\" TO ROLE atlan_user_role ; GRANT SELECT ON ALL STREAMS IN DATABASE \"<database-name>\" TO ROLE atlan_user_role ; Replace <database-name> with the Snowflake database name. To crawl future streams: GRANT USAGE ON FUTURE SCHEMAS IN DATABASE \"<database-name>\" TO ROLE atlan_user_role ; GRANT REFERENCES ON FUTURE TABLES IN DATABASE \"<database-name>\" TO ROLE atlan_user_role ; GRANT SELECT ON FUTURE STREAMS IN DATABASE \"<database-name>\" TO ROLE atlan_user_role ; Replace <database-name> with the Snowflake database name. (Optional) To preview and query existing assets ​ To query and preview data within assets that already exist in Snowflake, add these permissions: GRANT USAGE ON DATABASE \"<database-name>\" TO ROLE atlan_user_role ; GRANT USAGE ON ALL SCHEMAS IN DATABASE \"<database-name>\" TO ROLE atlan_user_role ; GRANT SELECT ON ALL TABLES IN DATABASE \"<database-name>\" TO ROLE atlan_user_role ; GRANT SELECT ON ALL EXTERNAL TABLES IN DATABASE \"<database-name>\" TO ROLE atlan_user_role ; GRANT SELECT ON ALL VIEWS IN DATABASE \"<database-name>\" TO ROLE atlan_user_role ; GRANT SELECT ON ALL MATERIALIZED VIEWS IN DATABASE \"<database-name>\" TO ROLE atlan_user_role ; GRANT SELECT ON ALL STREAMS IN DATABASE \"<database-name>\" TO ROLE atlan_user_role ; GRANT MONITOR ON PIPE \"<pipe-name>\" TO ROLE atlan_user_role ; Replace <database-name> with the database you want to be able to preview an",
    "topic": "How_to",
    "scraped_at": "2025-09-15 00:27:41"
  },
  {
    "title": "Set up Databricks | Atlan Documentation",
    "url": "https://docs.atlan.com/apps/connectors/data-warehouses/databricks/how-tos/set-up-databricks",
    "content": "Connect data Data Warehouses Databricks Get Started Set up Databricks On this page Set up Databricks Atlan supports three authentication methods for fetching metadata from Databricks. You can set up any of the following authentication methods: Personal access token authentication AWS service principal authentication Azure service principal authentication Personal access token authentication ​ Who can do this? Check that you have Admin and Databricks SQL access for the Databricks workspace. This is required for both cluster options described below. If you don't have this access, contact your Databricks administrator. Grant user access to workspace ​ To grant workspace access to the user creating a personal access token: From the left menu of the account console, click Workspaces and then select a workspace to which you want to add the user. From the tabs along the top of your workspace page, click the Permissions tab. In the upper right of the Permissions page, click Add permissions . In the Add permissions dialog, enter the following details: For User, group, or service principal , select the user to grant access. For Permission , click the dropdown and select workspace User. Generate a personal access token ​ You can generate a personal access token in your Databricks workspace to the authenticate the integration in Atlan . To generate a personal access token: From the top right of your Databricks workspace, click your Databricks username, and then from the dropdown, click User Settings . Under the Settings menu, click Developer . On the Developer page, next to Access tokens , click Manage . On the Access tokens page, click the Generate new token button. In the Generate new token dialog: For Comment , enter a description of the token's intended use - for example, Atlan crawler . For Lifetime (days) , consider removing the number. This enables the token to be used indefinitely - it won't need to be refreshed. Important! If you do enter a number, remember that you need to periodically regenerate it and update Atlan's crawler configuration with the new token each time. At the bottom of the dialog, click Generate . Copy and save the generated token in a secure location, and then click Done . Select a cluster ​ Did you know? Atlan recommends using serverless SQL warehouses for instant compute availability. To enable serverless SQL warehouses, refer to Databricks documentation for AWS Databricks workspaces or Microsoft documentation for Azure Databricks workspaces. You can set up personal access token authentication for your Databricks instance using one of the following cluster options: Interactive cluster SQL warehouse (formerly SQL endpoint) Interactive cluster ​ To confirm an all-purpose interactive cluster is configured: From the left menu of any page of your Databricks instance, click Compute . Under the All-purpose clusters tab, verify you have a cluster defined. Click the link under the Name column of the table to open your cluster. Under the Configuration tab, verify the Autopilot options to Terminate after ... minutes is enabled. At the bottom of the Configuration tab, expand the Advanced options expandable. Under the Advanced options expandable, open the JDBC/ODBC tab. Confirm that all of the fields in this tab are populated, and copy them for use in crawling: Server Hostname , Port , and HTTP Path . SQL warehouse (formerly SQL endpoint) ​ To confirm a SQL warehouse is configured: From the left menu of any page of your Databricks instance, open the dropdown just below the databricks logo and change to SQL . From the refreshed left menu, click SQL Warehouses . Click the link under the Name column of the table to open your SQL warehouse. Under the Connection details tab, confirm that all of the fields are populated and copy them for use in crawling: Server hostname , Port , and HTTP path . AWS service principal authentication ​ Who can do this? You need your AWS Databricks account admin to create a service principal and manage OAuth credentials for the service principal and your AWS Databricks workspace admin to add the service principal to your AWS Databricks workspace - you may not have access yourself. You need the following to authenticate the connection in Atlan: Client ID Client secret Create a service principal ​ You can create a service principal directly in your Databricks account or from a Databricks workspace. Identity federation enabled on your workspaces: Databricks recommends creating the service principal in the account and assigning it to workspaces. Identity federation disabled on your workspaces: Databricks recommends that you create your service principal from a workspace. Identity federation enabled ​ To create a service principal from your Databricks account, with identify federation enabled: Log in to your Databricks account console as an account admin. From the left menu of the account console, click User management . From the tabs along the top of the User management page, click the Service principals tab. In the upper right of the Service principals page, click Add service principal . On the Add service principal page, enter a name for the service principal and then click Add . Once the service principal has been created, you can assign it to your identity federated workspace. From the left menu of the account console, click Workspaces and then select a workspace to which you want to add the service principal. From the tabs along the top of your workspace page, click the Permissions tab. In the upper right of the Permissions page, click Add permissions . In the Add permissions dialog, enter the following details: For User, group, or service principal , select the service principal you created. For Permission , click the dropdown and select workspace User. Identity federation disabled ​ To create a service principal from a Databricks workspace, with identity federation disabled: Log in to your AWS Databricks workspace as a workspace admin. From the top right of your workspace, click your username, and then from the dropdown, click Admin Settings . In the left menu of the Settings page, under the Workspace admin subheading, click Identity and access . On the Identity and access page, under Management and permissions , next to Service principals , click Manage . In the upper right of the Service principals page, click Add service principal . In the Add service principal dialog, click the Add new button. For New service principal display name , enter a name for the service principal and then click Add . Create an OAuth secret for the service principal ​ You need to create an OAuth secret to authenticate to Databricks REST APIs. To create an OAuth secret for the service principal : Log in to your Databricks account console as an account admin. From the left menu of the account console, click User management . From the tabs along the top of the User management page, click the Service principals tab. In the upper right of the Service principals page, select the service principal you created . On the service principal page, under OAuth secrets , click Generate secret . From the Generate secret dialog, copy the Secret and Client ID and store it in a secure location. danger Note that this secret is only revealed once during creation. The client ID is the same as the application ID of the service principal. Once you've copied the client ID and secret, click Done . Azure service principal authentication ​ Who can do this? You need your Azure Databricks account admin to create a service principal and your Azure Databricks workspace admin to add the service principal to your Azure Databricks workspace - you may not have access yourself. You need the following to authenticate the connection in Atlan: Client ID (application ID) Client secret Tenant ID (directory ID) Create a service principal ​ To use service principals on Azure Databricks , an admin user must create a new Microsoft Entra ID (formerly Azure Active Directory) application and then add it to the Azure Databricks workspace to use as a service principal. To create a service principal: Sign in to the Azure portal . If you have access to multiple tenants, subscriptions, or directories, click the Directories + subscriptions (directory with filter) icon in the top menu to switch to the directory in which you want to create the service principal. In_Search resources, services, and docs_, search for and select Microsoft Entra ID . Click**+ Add and select App registration**. For_Name_, enter a name for the application. In the_Supported account types_section, select Accounts in this organizational directory only (Single tenant) and then click Register . On the application page's_Overview_page, in the_Essentials_section, copy and store the following values in a secure location: Application (client) ID Directory (tenant) ID To generate a client secret, within_Manage_, click Certificates & secrets . On the_Client secrets_tab, click New client secret . In the_Add a client secret_dialog, enter the following details: For Description , enter a description for the client secret. For_Expires_, select an expiry time period for the client secret and then click Add . Copy and store the client secret's_Value_in a secure place. Add a service principal to your account ​ To add a service principal to your Azure Databricks account: Log in to your Azure Databricks account console as an account admin. From the left menu of the account console, click User management . From the tabs along the top of the User management page, click the Service principals tab. In the upper right of the Service principals page, click Add service principal . On the Add service principal page, enter a name for the service principal. Under UUID , paste the Application (client) ID for the service principal. Click Add . Assign a service principal to a workspace ​ To add users to a workspace using the account console, the workspace must be enabled for identity federation. Workspace admins",
    "topic": "How_to",
    "scraped_at": "2025-09-15 00:27:42"
  },
  {
    "title": "Asset-specific - Developer",
    "url": "https://developer.atlan.com/patterns/",
    "content": "Developer Toolkits Toolkits Packages Packages Running example Define via template Render your package Develop your logic Test your logic Release (GA) Widget reference Typedefs Typedefs Running example Define via template Render your model Test your model Bind the SDKs Write integration test Test baseline UX Release (GA) Testing Testing Overview Getting started Getting started Other important concepts Documentation conventions Integration options Integration options CLI dbt Java Python Kotlin Scala Clojure Go Events Raw REST API Site map Common tasks Common tasks Common asset actions Common asset actions Certify assets Manage announcements Change description Change owners Tag (classify) assets Change custom metadata Link terms to assets Link domains to assets Manage asset READMEs Add asset resources Manage asset relationships with attributes Asset CRUD operations Asset CRUD operations Create an asset Retrieve an asset Update an asset Delete an asset Find and apply suggestions Restore an asset Review changes to an asset Review accesses of an asset Get all assets that... Get all assets that... Search for assets Search examples Lineage Lineage Manage lineage Traverse lineage Bulk updates Bulk updates Combine multiple operations Update multiple assets End-to-end bulk update Event handling Event handling Webhook <> Lambda Webhook <> Lambda Set up Lambda Code your logic Deploy your code Set up webhook Manage your webhook Asset-specific Asset-specific Glossary operations Glossary operations Create objects Retrieval by name Create a hierarchy Categorize terms Traverse category hierarchy Creating assets Creating assets Manage relational assets Manage cube assets Manage object store assets Manage object store assets Manage AWS S3 assets Manage Azure Data Lake Storage assets Manage Google Cloud Storage assets Manage BI assets Manage BI assets Manage Google Data Studio assets Manage Preset assets Manage Superset assets Manage API assets Manage file assets Manage Airflow assets Manage Kafka assets Manage Azure Event Hub assets Manage App assets Manage AI assets Manage Insights assets Manage QuickSight assets Manage DocumentDB assets Manage Data Quality assets Manage Data Quality assets Manage Data Quality rules Connector types and icons Data mesh Data mesh Manage data domains Manage data products Data contracts Data contracts Manage data contracts (via CLI) Manage data contracts (via SDK) Profiling and popularity Profiling and popularity Manage column profiling Manage popularity Governance structures Governance structures Custom metadata Custom metadata Create custom metadata Retrieve custom metadata Update custom metadata Delete custom metadata Manage badges Manage options (enumerations) Tag management Tag management Manage Atlan tags Monitor propagation Access control Access control Manage personas Manage purposes Manage policies Access events API token management Run queries on an asset Users and groups Users and groups Create users and groups Retrieve users and groups Update users and groups Delete users and groups Manage SSO group mapping Packages and workflows Packages and workflows Manage workflows Manage workflow schedules Supported packages Supported packages Athena assets Asset import Asset export (basic) API token connection admin BigQuery assets Connection delete Confluent Kafka assets dbt assets DynamoDB assets Databricks assets Databricks miner Fivetran enrichment Glue assets Looker assets Lineage builder Lineage generator (no transformation) MongoDB assets Oracle assets Postgres assets PowerBI assets Redshift assets Relational assets builder Snowflake assets Snowflake miner Sigma assets SQL Server assets Tableau assets File management File management Reference Reference Searching Searching Querying Querying Term-level queries Full text queries Rank feature queries Compound queries Searchable fields Searchable fields Common search fields Glossary-specific search fields Limiting details Sorting search results Paging search results Aggregating search results Events Events Event triggers Event triggers Asset is created Asset is updated Asset is deleted Custom metadata is added Custom metadata is removed Asset is tagged Asset is untagged Lineage is created Event types Event types ENTITY_CREATE ENTITY_UPDATE ENTITY_DELETE BUSINESS_ATTRIBUTE_UPDATE CLASSIFICATION_ADD CLASSIFICATION_DELETE Specifications Specifications Data contract spec OpenLineage spec Types Types Core Core Referenceable Asset Connection Catalog Tag TagAttachment Access control Access control Persona Purpose AuthPolicy AuthService BusinessPolicy BusinessPolicyException BusinessPolicyIncident BusinessPolicyLog Incident Lineage Lineage ColumnProcess BIProcess Resources Resources Link File Readme ReadmeTemplate Badge Workflows Workflows Workflow WorkflowRun Task Structs Structs Action AuthPolicyCondition AuthPolicyValiditySchedule AwsCloudWatchMetric AwsTag AzureTag BadgeCondition BusinessPolicyRule ByocSsoConfig ColumnValueFrequencyMap DbtMetricFilter DbtJobRun GoogleLabel GoogleTag Histogram KafkaTopicConsumption MCRuleComparison MCRuleSchedule PopularityInsights SourceTagAttachment SourceTagAttachmentValue SourceTagAttribute StarredDetails Enumerations Enumerations AdfActivityState ADLSAccessTier ADLSAccountStatus ADLSEncryptionTypes ADLSLeaseState ADLSLeaseStatus ADLSObjectArchiveStatus ADLSObjectType ADLSPerformance ADLSProvisionState ADLSReplicationType ADLSStorageKind APIQueryParamTypeEnum atlas_operation AtlasGlossaryCategoryType AtlasGlossaryTermType AtlasGlossaryType AtlasGlossaryTermAssignmentStatus AtlasGlossaryTermRelationshipStatus AuthPolicyCategory AuthPolicyResourceCategory AuthPolicyType certificate_status DataGlossary DataProductCriticality DataProductSensitivity DataProductStatus DataProductVisibility DomoCardType DynamoDBSecondaryIndexProjectionType DynamoDBStatus file_type FivetranConnectorStatus FivetranProcessStatus google_datastudio_asset_type icon_type incident_severity kafka_topic_cleanup_policy kafka_topic_compression_type matillion_job_type ModelCardinalityType MongoDBCollectionValidationAction MongoDBCollectionValidationLevel OpenLineageRunState powerbi_endorsement query_username_strategy quick_sight_analysis_status quick_sight_dataset_field_type quick_sight_dataset_import_mode quick_sight_folder_type SchemaRegistrySchemaCompatibility SchemaRegistrySchemaType SourceCostUnitType table_type WorkflowRunStatus WorkflowRunType WorkflowStatus WorkflowType Abstractions Abstractions BI Cloud Insight ObjectStore EventStore DataQuality Metric NoSQL SchemaRegistry Glossary Glossary AtlasGlossary AtlasGlossaryCategory AtlasGlossaryTerm Data mesh Data mesh DataDomain DataProduct DataContract Stakeholder StakeholderTitle Relational databases Relational databases Database Schema Table View MaterialisedView Column Query TablePartition CalculationView BigqueryTag DatabricksUnityCatalogTag SnowflakeDynamicTable SnowflakePipe SnowflakeStream SnowflakeTag Procedure Function SQL Query organization Query organization Namespace Collection Folder Cubes Cubes Cube CubeDimension CubeHierarchy CubeField APIs APIs APIPath APISpec APIObject APIQuery APIField Airflow Airflow AirflowDag AirflowTask Amazon Amazon Amazon DynamoDB Amazon DynamoDB DynamoDBTable DynamoDBSecondaryIndex DynamoDBGlobalSecondaryIndex DynamoDBLocalSecondaryIndex AWS S3 AWS S3 S3Bucket S3Object Amazon QuickSight Amazon QuickSight QuickSightAnalysis QuickSightAnalysisVisual QuickSightDashboard QuickSightDashboardVisual QuickSightDataset QuickSightDatasetField QuickSightFolder Anaplan Anaplan AnaplanWorkspace AnaplanApp AnaplanPage AnaplanModel AnaplanModule AnaplanList AnaplanSystemDimension AnaplanDimension AnaplanLineItem AnaplanView Anomalo Anomalo AnomaloCheck App App Application ApplicationField Microsoft Azure Microsoft Azure Azure Data Factory Azure Data Factory AdfActivity AdfDataflow AdfDataset AdfLinkedservice AdfPipeline Azure Data Lake Storage Azure Data Lake Storage ADLSAccount ADLSContainer ADLSObject Azure Event Hub Azure Event Hub AzureEventHub AzureEventHubConsumerGroup Azure Service Bus Azure Service Bus AzureServiceBusNamespace AzureServiceBusSchema AzureServiceBusTopic Cosmos DB Cosmos DB CosmosMongoDBAccount CosmosMongoDBCollection CosmosMongoDBDatabase Cognite Cognite Cognite3DModel CogniteAsset CogniteEvent CogniteFile CogniteSequence CogniteTimeseries Custom Custom CustomEntity Dataverse Dataverse DataverseEntity DataverseAttribute dbt dbt DbtColumnProcess DbtMetric DbtModel DbtModelColumn DbtProcess DbtSource DbtTag DbtTest Domo Domo DomoCard DomoDashboard DomoDataset DomoDatasetColumn DocumentDB DocumentDB DocumentDBCollection DocumentDBDatabase Fivetran Fivetran FivetranConnector Google Google Google Cloud Storage Google Cloud Storage GCSBucket GCSObject Google Data Studio Google Data Studio DataStudioAsset IBM IBM IBM Cognos Cognos CognosDashboard CognosDatasource CognosExploration CognosFile CognosFolder CognosModule CognosPackage CognosReport Kafka Kafka KafkaConsumerGroup KafkaTopic Looker Looker LookerDashboard LookerExplore LookerField LookerFolder LookerLook LookerModel LookerProject LookerQuery LookerTile LookerView Matillion Matillion MatillionComponent MatillionGroup MatillionJob MatillionProject Metabase Metabase MetabaseCollection MetabaseDashboard MetabaseQuestion MicroStrategy MicroStrategy MicroStrategyAttribute MicroStrategyCube MicroStrategyDocument MicroStrategyDossier MicroStrategyFact MicroStrategyMetric MicroStrategyProject MicroStrategyReport MicroStrategyVisualization Mode Mode ModeChart ModeCollection ModeQuery ModeReport ModeWorkspace Models Models ModelAttribute ModelAttributeAssociation ModelDataModel ModelEntity ModelEntityAssociation ModelVersion MongoDB MongoDB MongoDBCollection MongDBDatabase Monte Carlo Monte Carlo MCIncident MCMonitor Power BI Power BI Power BI PowerBIColumn PowerBIDashboard PowerBIDataflow PowerBIDataflowEntityColumn PowerBIDataset PowerBIDatasource PowerBIMeasure PowerBIPage PowerBIReport PowerBITable PowerBITile PowerBIWorkspace Preset Preset PresetChart PresetDashboard PresetDataset PresetWorkspace Qlik Qlik QlikApp QlikChart QlikDataset QlikSheet QlikSpace QlikStream Redash Redash RedashDashboard RedashQuery RedashVisualization Salesforce Salesforce SalesforceDashboard SalesforceField SalesforceObject SalesforceOrganization SalesforceReport SaaS Sigma Sigma SigmaWorkbook SigmaPage SigmaDataElement SigmaDataElementField SigmaDataset SigmaDatasetColumn Sisense Sisense SisenseDashboard SisenseDatamodel SisenseDatamodelTable SisenseFolder SisenseWidget Soda Soda SodaCheck Spark Spark SparkJob Superset Superset SupersetChart SupersetDashboard SupersetDataset Tableau Tableau TableauCalculatedField TableauDashboard TableauDatasource TableauDatasourceField TableauFlow TableauMetric TableauProject TableauSite TableauWorkbook TableauWorksheet ThoughtSpot ThoughtSpot ThoughtspotAnswer ThoughtspotColumn ThoughtspotDashlet ThoughtspotLiveboard ThoughtspotTable ThoughtspotView ThoughtspotWorksheet Endpoints Asset-specific operations ¶ As developers ourselves, we know that learning is often easiest through example. In this Asset-specific operations section you will find details about managing specific kinds of assets. You may also want to explore: Common tasks Common operations on assets, that are available across all assets. Discover actions Governance structures Operations dealing with governance structures, rather than assets. Manage governance structures 2023-04-12 2024-05-17 Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "topic": "Best_Practices",
    "scraped_at": "2025-09-15 00:27:54"
  },
  {
    "title": "Bulk updates - Developer",
    "url": "https://developer.atlan.com/patterns/bulk/",
    "content": "Developer Toolkits Toolkits Packages Packages Running example Define via template Render your package Develop your logic Test your logic Release (GA) Widget reference Typedefs Typedefs Running example Define via template Render your model Test your model Bind the SDKs Write integration test Test baseline UX Release (GA) Testing Testing Overview Getting started Getting started Other important concepts Documentation conventions Integration options Integration options CLI dbt Java Python Kotlin Scala Clojure Go Events Raw REST API Site map Common tasks Common tasks Common asset actions Common asset actions Certify assets Manage announcements Change description Change owners Tag (classify) assets Change custom metadata Link terms to assets Link domains to assets Manage asset READMEs Add asset resources Manage asset relationships with attributes Asset CRUD operations Asset CRUD operations Create an asset Retrieve an asset Update an asset Delete an asset Find and apply suggestions Restore an asset Review changes to an asset Review accesses of an asset Get all assets that... Get all assets that... Search for assets Search examples Lineage Lineage Manage lineage Traverse lineage Bulk updates Bulk updates Combine multiple operations Update multiple assets End-to-end bulk update Event handling Event handling Webhook <> Lambda Webhook <> Lambda Set up Lambda Code your logic Deploy your code Set up webhook Manage your webhook Asset-specific Asset-specific Glossary operations Glossary operations Create objects Retrieval by name Create a hierarchy Categorize terms Traverse category hierarchy Creating assets Creating assets Manage relational assets Manage cube assets Manage object store assets Manage object store assets Manage AWS S3 assets Manage Azure Data Lake Storage assets Manage Google Cloud Storage assets Manage BI assets Manage BI assets Manage Google Data Studio assets Manage Preset assets Manage Superset assets Manage API assets Manage file assets Manage Airflow assets Manage Kafka assets Manage Azure Event Hub assets Manage App assets Manage AI assets Manage Insights assets Manage QuickSight assets Manage DocumentDB assets Manage Data Quality assets Manage Data Quality assets Manage Data Quality rules Connector types and icons Data mesh Data mesh Manage data domains Manage data products Data contracts Data contracts Manage data contracts (via CLI) Manage data contracts (via SDK) Profiling and popularity Profiling and popularity Manage column profiling Manage popularity Governance structures Governance structures Custom metadata Custom metadata Create custom metadata Retrieve custom metadata Update custom metadata Delete custom metadata Manage badges Manage options (enumerations) Tag management Tag management Manage Atlan tags Monitor propagation Access control Access control Manage personas Manage purposes Manage policies Access events API token management Run queries on an asset Users and groups Users and groups Create users and groups Retrieve users and groups Update users and groups Delete users and groups Manage SSO group mapping Packages and workflows Packages and workflows Manage workflows Manage workflow schedules Supported packages Supported packages Athena assets Asset import Asset export (basic) API token connection admin BigQuery assets Connection delete Confluent Kafka assets dbt assets DynamoDB assets Databricks assets Databricks miner Fivetran enrichment Glue assets Looker assets Lineage builder Lineage generator (no transformation) MongoDB assets Oracle assets Postgres assets PowerBI assets Redshift assets Relational assets builder Snowflake assets Snowflake miner Sigma assets SQL Server assets Tableau assets File management File management Reference Reference Searching Searching Querying Querying Term-level queries Full text queries Rank feature queries Compound queries Searchable fields Searchable fields Common search fields Glossary-specific search fields Limiting details Sorting search results Paging search results Aggregating search results Events Events Event triggers Event triggers Asset is created Asset is updated Asset is deleted Custom metadata is added Custom metadata is removed Asset is tagged Asset is untagged Lineage is created Event types Event types ENTITY_CREATE ENTITY_UPDATE ENTITY_DELETE BUSINESS_ATTRIBUTE_UPDATE CLASSIFICATION_ADD CLASSIFICATION_DELETE Specifications Specifications Data contract spec OpenLineage spec Types Types Core Core Referenceable Asset Connection Catalog Tag TagAttachment Access control Access control Persona Purpose AuthPolicy AuthService BusinessPolicy BusinessPolicyException BusinessPolicyIncident BusinessPolicyLog Incident Lineage Lineage ColumnProcess BIProcess Resources Resources Link File Readme ReadmeTemplate Badge Workflows Workflows Workflow WorkflowRun Task Structs Structs Action AuthPolicyCondition AuthPolicyValiditySchedule AwsCloudWatchMetric AwsTag AzureTag BadgeCondition BusinessPolicyRule ByocSsoConfig ColumnValueFrequencyMap DbtMetricFilter DbtJobRun GoogleLabel GoogleTag Histogram KafkaTopicConsumption MCRuleComparison MCRuleSchedule PopularityInsights SourceTagAttachment SourceTagAttachmentValue SourceTagAttribute StarredDetails Enumerations Enumerations AdfActivityState ADLSAccessTier ADLSAccountStatus ADLSEncryptionTypes ADLSLeaseState ADLSLeaseStatus ADLSObjectArchiveStatus ADLSObjectType ADLSPerformance ADLSProvisionState ADLSReplicationType ADLSStorageKind APIQueryParamTypeEnum atlas_operation AtlasGlossaryCategoryType AtlasGlossaryTermType AtlasGlossaryType AtlasGlossaryTermAssignmentStatus AtlasGlossaryTermRelationshipStatus AuthPolicyCategory AuthPolicyResourceCategory AuthPolicyType certificate_status DataGlossary DataProductCriticality DataProductSensitivity DataProductStatus DataProductVisibility DomoCardType DynamoDBSecondaryIndexProjectionType DynamoDBStatus file_type FivetranConnectorStatus FivetranProcessStatus google_datastudio_asset_type icon_type incident_severity kafka_topic_cleanup_policy kafka_topic_compression_type matillion_job_type ModelCardinalityType MongoDBCollectionValidationAction MongoDBCollectionValidationLevel OpenLineageRunState powerbi_endorsement query_username_strategy quick_sight_analysis_status quick_sight_dataset_field_type quick_sight_dataset_import_mode quick_sight_folder_type SchemaRegistrySchemaCompatibility SchemaRegistrySchemaType SourceCostUnitType table_type WorkflowRunStatus WorkflowRunType WorkflowStatus WorkflowType Abstractions Abstractions BI Cloud Insight ObjectStore EventStore DataQuality Metric NoSQL SchemaRegistry Glossary Glossary AtlasGlossary AtlasGlossaryCategory AtlasGlossaryTerm Data mesh Data mesh DataDomain DataProduct DataContract Stakeholder StakeholderTitle Relational databases Relational databases Database Schema Table View MaterialisedView Column Query TablePartition CalculationView BigqueryTag DatabricksUnityCatalogTag SnowflakeDynamicTable SnowflakePipe SnowflakeStream SnowflakeTag Procedure Function SQL Query organization Query organization Namespace Collection Folder Cubes Cubes Cube CubeDimension CubeHierarchy CubeField APIs APIs APIPath APISpec APIObject APIQuery APIField Airflow Airflow AirflowDag AirflowTask Amazon Amazon Amazon DynamoDB Amazon DynamoDB DynamoDBTable DynamoDBSecondaryIndex DynamoDBGlobalSecondaryIndex DynamoDBLocalSecondaryIndex AWS S3 AWS S3 S3Bucket S3Object Amazon QuickSight Amazon QuickSight QuickSightAnalysis QuickSightAnalysisVisual QuickSightDashboard QuickSightDashboardVisual QuickSightDataset QuickSightDatasetField QuickSightFolder Anaplan Anaplan AnaplanWorkspace AnaplanApp AnaplanPage AnaplanModel AnaplanModule AnaplanList AnaplanSystemDimension AnaplanDimension AnaplanLineItem AnaplanView Anomalo Anomalo AnomaloCheck App App Application ApplicationField Microsoft Azure Microsoft Azure Azure Data Factory Azure Data Factory AdfActivity AdfDataflow AdfDataset AdfLinkedservice AdfPipeline Azure Data Lake Storage Azure Data Lake Storage ADLSAccount ADLSContainer ADLSObject Azure Event Hub Azure Event Hub AzureEventHub AzureEventHubConsumerGroup Azure Service Bus Azure Service Bus AzureServiceBusNamespace AzureServiceBusSchema AzureServiceBusTopic Cosmos DB Cosmos DB CosmosMongoDBAccount CosmosMongoDBCollection CosmosMongoDBDatabase Cognite Cognite Cognite3DModel CogniteAsset CogniteEvent CogniteFile CogniteSequence CogniteTimeseries Custom Custom CustomEntity Dataverse Dataverse DataverseEntity DataverseAttribute dbt dbt DbtColumnProcess DbtMetric DbtModel DbtModelColumn DbtProcess DbtSource DbtTag DbtTest Domo Domo DomoCard DomoDashboard DomoDataset DomoDatasetColumn DocumentDB DocumentDB DocumentDBCollection DocumentDBDatabase Fivetran Fivetran FivetranConnector Google Google Google Cloud Storage Google Cloud Storage GCSBucket GCSObject Google Data Studio Google Data Studio DataStudioAsset IBM IBM IBM Cognos Cognos CognosDashboard CognosDatasource CognosExploration CognosFile CognosFolder CognosModule CognosPackage CognosReport Kafka Kafka KafkaConsumerGroup KafkaTopic Looker Looker LookerDashboard LookerExplore LookerField LookerFolder LookerLook LookerModel LookerProject LookerQuery LookerTile LookerView Matillion Matillion MatillionComponent MatillionGroup MatillionJob MatillionProject Metabase Metabase MetabaseCollection MetabaseDashboard MetabaseQuestion MicroStrategy MicroStrategy MicroStrategyAttribute MicroStrategyCube MicroStrategyDocument MicroStrategyDossier MicroStrategyFact MicroStrategyMetric MicroStrategyProject MicroStrategyReport MicroStrategyVisualization Mode Mode ModeChart ModeCollection ModeQuery ModeReport ModeWorkspace Models Models ModelAttribute ModelAttributeAssociation ModelDataModel ModelEntity ModelEntityAssociation ModelVersion MongoDB MongoDB MongoDBCollection MongDBDatabase Monte Carlo Monte Carlo MCIncident MCMonitor Power BI Power BI Power BI PowerBIColumn PowerBIDashboard PowerBIDataflow PowerBIDataflowEntityColumn PowerBIDataset PowerBIDatasource PowerBIMeasure PowerBIPage PowerBIReport PowerBITable PowerBITile PowerBIWorkspace Preset Preset PresetChart PresetDashboard PresetDataset PresetWorkspace Qlik Qlik QlikApp QlikChart QlikDataset QlikSheet QlikSpace QlikStream Redash Redash RedashDashboard RedashQuery RedashVisualization Salesforce Salesforce SalesforceDashboard SalesforceField SalesforceObject SalesforceOrganization SalesforceReport SaaS Sigma Sigma SigmaWorkbook SigmaPage SigmaDataElement SigmaDataElementField SigmaDataset SigmaDatasetColumn Sisense Sisense SisenseDashboard SisenseDatamodel SisenseDatamodelTable SisenseFolder SisenseWidget Soda Soda SodaCheck Spark Spark SparkJob Superset Superset SupersetChart SupersetDashboard SupersetDataset Tableau Tableau TableauCalculatedField TableauDashboard TableauDatasource TableauDatasourceField TableauFlow TableauMetric TableauProject TableauSite TableauWorkbook TableauWorksheet ThoughtSpot ThoughtSpot ThoughtspotAnswer ThoughtspotColumn ThoughtspotDashlet ThoughtspotLiveboard ThoughtspotTable ThoughtspotView ThoughtspotWorksheet Endpoints Bulk updates ¶ For most of the write operations covered in the above sections, you can also: Combine multiple operations together Make changes to multiple assets at the same time Optimize changes These each allow you to optimize your work. Rather than making a separate API call for each change or each asset, you can make a single API call that includes all your changes — even across many assets. Of course, in order to change multiple assets you also need to first know which assets to change. To do this, there is a common end-to-end bulk update pattern you can follow. 2023-04-12 2024-04-22 Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "topic": "Best_Practices",
    "scraped_at": "2025-09-15 00:27:55"
  },
  {
    "title": "Event handling - Developer",
    "url": "https://developer.atlan.com/patterns/events/",
    "content": "Developer Toolkits Toolkits Packages Packages Running example Define via template Render your package Develop your logic Test your logic Release (GA) Widget reference Typedefs Typedefs Running example Define via template Render your model Test your model Bind the SDKs Write integration test Test baseline UX Release (GA) Testing Testing Overview Getting started Getting started Other important concepts Documentation conventions Integration options Integration options CLI dbt Java Python Kotlin Scala Clojure Go Events Raw REST API Site map Common tasks Common tasks Common asset actions Common asset actions Certify assets Manage announcements Change description Change owners Tag (classify) assets Change custom metadata Link terms to assets Link domains to assets Manage asset READMEs Add asset resources Manage asset relationships with attributes Asset CRUD operations Asset CRUD operations Create an asset Retrieve an asset Update an asset Delete an asset Find and apply suggestions Restore an asset Review changes to an asset Review accesses of an asset Get all assets that... Get all assets that... Search for assets Search examples Lineage Lineage Manage lineage Traverse lineage Bulk updates Bulk updates Combine multiple operations Update multiple assets End-to-end bulk update Event handling Event handling Webhook <> Lambda Webhook <> Lambda Set up Lambda Code your logic Deploy your code Set up webhook Manage your webhook Asset-specific Asset-specific Glossary operations Glossary operations Create objects Retrieval by name Create a hierarchy Categorize terms Traverse category hierarchy Creating assets Creating assets Manage relational assets Manage cube assets Manage object store assets Manage object store assets Manage AWS S3 assets Manage Azure Data Lake Storage assets Manage Google Cloud Storage assets Manage BI assets Manage BI assets Manage Google Data Studio assets Manage Preset assets Manage Superset assets Manage API assets Manage file assets Manage Airflow assets Manage Kafka assets Manage Azure Event Hub assets Manage App assets Manage AI assets Manage Insights assets Manage QuickSight assets Manage DocumentDB assets Manage Data Quality assets Manage Data Quality assets Manage Data Quality rules Connector types and icons Data mesh Data mesh Manage data domains Manage data products Data contracts Data contracts Manage data contracts (via CLI) Manage data contracts (via SDK) Profiling and popularity Profiling and popularity Manage column profiling Manage popularity Governance structures Governance structures Custom metadata Custom metadata Create custom metadata Retrieve custom metadata Update custom metadata Delete custom metadata Manage badges Manage options (enumerations) Tag management Tag management Manage Atlan tags Monitor propagation Access control Access control Manage personas Manage purposes Manage policies Access events API token management Run queries on an asset Users and groups Users and groups Create users and groups Retrieve users and groups Update users and groups Delete users and groups Manage SSO group mapping Packages and workflows Packages and workflows Manage workflows Manage workflow schedules Supported packages Supported packages Athena assets Asset import Asset export (basic) API token connection admin BigQuery assets Connection delete Confluent Kafka assets dbt assets DynamoDB assets Databricks assets Databricks miner Fivetran enrichment Glue assets Looker assets Lineage builder Lineage generator (no transformation) MongoDB assets Oracle assets Postgres assets PowerBI assets Redshift assets Relational assets builder Snowflake assets Snowflake miner Sigma assets SQL Server assets Tableau assets File management File management Reference Reference Searching Searching Querying Querying Term-level queries Full text queries Rank feature queries Compound queries Searchable fields Searchable fields Common search fields Glossary-specific search fields Limiting details Sorting search results Paging search results Aggregating search results Events Events Event triggers Event triggers Asset is created Asset is updated Asset is deleted Custom metadata is added Custom metadata is removed Asset is tagged Asset is untagged Lineage is created Event types Event types ENTITY_CREATE ENTITY_UPDATE ENTITY_DELETE BUSINESS_ATTRIBUTE_UPDATE CLASSIFICATION_ADD CLASSIFICATION_DELETE Specifications Specifications Data contract spec OpenLineage spec Types Types Core Core Referenceable Asset Connection Catalog Tag TagAttachment Access control Access control Persona Purpose AuthPolicy AuthService BusinessPolicy BusinessPolicyException BusinessPolicyIncident BusinessPolicyLog Incident Lineage Lineage ColumnProcess BIProcess Resources Resources Link File Readme ReadmeTemplate Badge Workflows Workflows Workflow WorkflowRun Task Structs Structs Action AuthPolicyCondition AuthPolicyValiditySchedule AwsCloudWatchMetric AwsTag AzureTag BadgeCondition BusinessPolicyRule ByocSsoConfig ColumnValueFrequencyMap DbtMetricFilter DbtJobRun GoogleLabel GoogleTag Histogram KafkaTopicConsumption MCRuleComparison MCRuleSchedule PopularityInsights SourceTagAttachment SourceTagAttachmentValue SourceTagAttribute StarredDetails Enumerations Enumerations AdfActivityState ADLSAccessTier ADLSAccountStatus ADLSEncryptionTypes ADLSLeaseState ADLSLeaseStatus ADLSObjectArchiveStatus ADLSObjectType ADLSPerformance ADLSProvisionState ADLSReplicationType ADLSStorageKind APIQueryParamTypeEnum atlas_operation AtlasGlossaryCategoryType AtlasGlossaryTermType AtlasGlossaryType AtlasGlossaryTermAssignmentStatus AtlasGlossaryTermRelationshipStatus AuthPolicyCategory AuthPolicyResourceCategory AuthPolicyType certificate_status DataGlossary DataProductCriticality DataProductSensitivity DataProductStatus DataProductVisibility DomoCardType DynamoDBSecondaryIndexProjectionType DynamoDBStatus file_type FivetranConnectorStatus FivetranProcessStatus google_datastudio_asset_type icon_type incident_severity kafka_topic_cleanup_policy kafka_topic_compression_type matillion_job_type ModelCardinalityType MongoDBCollectionValidationAction MongoDBCollectionValidationLevel OpenLineageRunState powerbi_endorsement query_username_strategy quick_sight_analysis_status quick_sight_dataset_field_type quick_sight_dataset_import_mode quick_sight_folder_type SchemaRegistrySchemaCompatibility SchemaRegistrySchemaType SourceCostUnitType table_type WorkflowRunStatus WorkflowRunType WorkflowStatus WorkflowType Abstractions Abstractions BI Cloud Insight ObjectStore EventStore DataQuality Metric NoSQL SchemaRegistry Glossary Glossary AtlasGlossary AtlasGlossaryCategory AtlasGlossaryTerm Data mesh Data mesh DataDomain DataProduct DataContract Stakeholder StakeholderTitle Relational databases Relational databases Database Schema Table View MaterialisedView Column Query TablePartition CalculationView BigqueryTag DatabricksUnityCatalogTag SnowflakeDynamicTable SnowflakePipe SnowflakeStream SnowflakeTag Procedure Function SQL Query organization Query organization Namespace Collection Folder Cubes Cubes Cube CubeDimension CubeHierarchy CubeField APIs APIs APIPath APISpec APIObject APIQuery APIField Airflow Airflow AirflowDag AirflowTask Amazon Amazon Amazon DynamoDB Amazon DynamoDB DynamoDBTable DynamoDBSecondaryIndex DynamoDBGlobalSecondaryIndex DynamoDBLocalSecondaryIndex AWS S3 AWS S3 S3Bucket S3Object Amazon QuickSight Amazon QuickSight QuickSightAnalysis QuickSightAnalysisVisual QuickSightDashboard QuickSightDashboardVisual QuickSightDataset QuickSightDatasetField QuickSightFolder Anaplan Anaplan AnaplanWorkspace AnaplanApp AnaplanPage AnaplanModel AnaplanModule AnaplanList AnaplanSystemDimension AnaplanDimension AnaplanLineItem AnaplanView Anomalo Anomalo AnomaloCheck App App Application ApplicationField Microsoft Azure Microsoft Azure Azure Data Factory Azure Data Factory AdfActivity AdfDataflow AdfDataset AdfLinkedservice AdfPipeline Azure Data Lake Storage Azure Data Lake Storage ADLSAccount ADLSContainer ADLSObject Azure Event Hub Azure Event Hub AzureEventHub AzureEventHubConsumerGroup Azure Service Bus Azure Service Bus AzureServiceBusNamespace AzureServiceBusSchema AzureServiceBusTopic Cosmos DB Cosmos DB CosmosMongoDBAccount CosmosMongoDBCollection CosmosMongoDBDatabase Cognite Cognite Cognite3DModel CogniteAsset CogniteEvent CogniteFile CogniteSequence CogniteTimeseries Custom Custom CustomEntity Dataverse Dataverse DataverseEntity DataverseAttribute dbt dbt DbtColumnProcess DbtMetric DbtModel DbtModelColumn DbtProcess DbtSource DbtTag DbtTest Domo Domo DomoCard DomoDashboard DomoDataset DomoDatasetColumn DocumentDB DocumentDB DocumentDBCollection DocumentDBDatabase Fivetran Fivetran FivetranConnector Google Google Google Cloud Storage Google Cloud Storage GCSBucket GCSObject Google Data Studio Google Data Studio DataStudioAsset IBM IBM IBM Cognos Cognos CognosDashboard CognosDatasource CognosExploration CognosFile CognosFolder CognosModule CognosPackage CognosReport Kafka Kafka KafkaConsumerGroup KafkaTopic Looker Looker LookerDashboard LookerExplore LookerField LookerFolder LookerLook LookerModel LookerProject LookerQuery LookerTile LookerView Matillion Matillion MatillionComponent MatillionGroup MatillionJob MatillionProject Metabase Metabase MetabaseCollection MetabaseDashboard MetabaseQuestion MicroStrategy MicroStrategy MicroStrategyAttribute MicroStrategyCube MicroStrategyDocument MicroStrategyDossier MicroStrategyFact MicroStrategyMetric MicroStrategyProject MicroStrategyReport MicroStrategyVisualization Mode Mode ModeChart ModeCollection ModeQuery ModeReport ModeWorkspace Models Models ModelAttribute ModelAttributeAssociation ModelDataModel ModelEntity ModelEntityAssociation ModelVersion MongoDB MongoDB MongoDBCollection MongDBDatabase Monte Carlo Monte Carlo MCIncident MCMonitor Power BI Power BI Power BI PowerBIColumn PowerBIDashboard PowerBIDataflow PowerBIDataflowEntityColumn PowerBIDataset PowerBIDatasource PowerBIMeasure PowerBIPage PowerBIReport PowerBITable PowerBITile PowerBIWorkspace Preset Preset PresetChart PresetDashboard PresetDataset PresetWorkspace Qlik Qlik QlikApp QlikChart QlikDataset QlikSheet QlikSpace QlikStream Redash Redash RedashDashboard RedashQuery RedashVisualization Salesforce Salesforce SalesforceDashboard SalesforceField SalesforceObject SalesforceOrganization SalesforceReport SaaS Sigma Sigma SigmaWorkbook SigmaPage SigmaDataElement SigmaDataElementField SigmaDataset SigmaDatasetColumn Sisense Sisense SisenseDashboard SisenseDatamodel SisenseDatamodelTable SisenseFolder SisenseWidget Soda Soda SodaCheck Spark Spark SparkJob Superset Superset SupersetChart SupersetDashboard SupersetDataset Tableau Tableau TableauCalculatedField TableauDashboard TableauDatasource TableauDatasourceField TableauFlow TableauMetric TableauProject TableauSite TableauWorkbook TableauWorksheet ThoughtSpot ThoughtSpot ThoughtspotAnswer ThoughtspotColumn ThoughtspotDashlet ThoughtspotLiveboard ThoughtspotTable ThoughtspotView ThoughtspotWorksheet Endpoints Event handling ¶ If you want to process metadata as it evolves, in real-time, then you'll want to tap into events. Currently in Atlan, you can create webhooks that will send all metadata activity to a target URL of your choice. In this section you'll find common scenarios to write such a target to handle these events: Webhook <> Lambda handling events through an AWS Lambda function 2023-03-06 2024-03-14 Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "topic": "Best_Practices",
    "scraped_at": "2025-09-15 00:27:56"
  },
  {
    "title": "Creating assets - Developer",
    "url": "https://developer.atlan.com/patterns/create/",
    "content": "Developer Toolkits Toolkits Packages Packages Running example Define via template Render your package Develop your logic Test your logic Release (GA) Widget reference Typedefs Typedefs Running example Define via template Render your model Test your model Bind the SDKs Write integration test Test baseline UX Release (GA) Testing Testing Overview Getting started Getting started Other important concepts Documentation conventions Integration options Integration options CLI dbt Java Python Kotlin Scala Clojure Go Events Raw REST API Site map Common tasks Common tasks Common asset actions Common asset actions Certify assets Manage announcements Change description Change owners Tag (classify) assets Change custom metadata Link terms to assets Link domains to assets Manage asset READMEs Add asset resources Manage asset relationships with attributes Asset CRUD operations Asset CRUD operations Create an asset Retrieve an asset Update an asset Delete an asset Find and apply suggestions Restore an asset Review changes to an asset Review accesses of an asset Get all assets that... Get all assets that... Search for assets Search examples Lineage Lineage Manage lineage Traverse lineage Bulk updates Bulk updates Combine multiple operations Update multiple assets End-to-end bulk update Event handling Event handling Webhook <> Lambda Webhook <> Lambda Set up Lambda Code your logic Deploy your code Set up webhook Manage your webhook Asset-specific Asset-specific Glossary operations Glossary operations Create objects Retrieval by name Create a hierarchy Categorize terms Traverse category hierarchy Creating assets Creating assets Manage relational assets Manage cube assets Manage object store assets Manage object store assets Manage AWS S3 assets Manage Azure Data Lake Storage assets Manage Google Cloud Storage assets Manage BI assets Manage BI assets Manage Google Data Studio assets Manage Preset assets Manage Superset assets Manage API assets Manage file assets Manage Airflow assets Manage Kafka assets Manage Azure Event Hub assets Manage App assets Manage AI assets Manage Insights assets Manage QuickSight assets Manage DocumentDB assets Manage Data Quality assets Manage Data Quality assets Manage Data Quality rules Connector types and icons Data mesh Data mesh Manage data domains Manage data products Data contracts Data contracts Manage data contracts (via CLI) Manage data contracts (via SDK) Profiling and popularity Profiling and popularity Manage column profiling Manage popularity Governance structures Governance structures Custom metadata Custom metadata Create custom metadata Retrieve custom metadata Update custom metadata Delete custom metadata Manage badges Manage options (enumerations) Tag management Tag management Manage Atlan tags Monitor propagation Access control Access control Manage personas Manage purposes Manage policies Access events API token management Run queries on an asset Users and groups Users and groups Create users and groups Retrieve users and groups Update users and groups Delete users and groups Manage SSO group mapping Packages and workflows Packages and workflows Manage workflows Manage workflow schedules Supported packages Supported packages Athena assets Asset import Asset export (basic) API token connection admin BigQuery assets Connection delete Confluent Kafka assets dbt assets DynamoDB assets Databricks assets Databricks miner Fivetran enrichment Glue assets Looker assets Lineage builder Lineage generator (no transformation) MongoDB assets Oracle assets Postgres assets PowerBI assets Redshift assets Relational assets builder Snowflake assets Snowflake miner Sigma assets SQL Server assets Tableau assets File management File management Reference Reference Searching Searching Querying Querying Term-level queries Full text queries Rank feature queries Compound queries Searchable fields Searchable fields Common search fields Glossary-specific search fields Limiting details Sorting search results Paging search results Aggregating search results Events Events Event triggers Event triggers Asset is created Asset is updated Asset is deleted Custom metadata is added Custom metadata is removed Asset is tagged Asset is untagged Lineage is created Event types Event types ENTITY_CREATE ENTITY_UPDATE ENTITY_DELETE BUSINESS_ATTRIBUTE_UPDATE CLASSIFICATION_ADD CLASSIFICATION_DELETE Specifications Specifications Data contract spec OpenLineage spec Types Types Core Core Referenceable Asset Connection Catalog Tag TagAttachment Access control Access control Persona Purpose AuthPolicy AuthService BusinessPolicy BusinessPolicyException BusinessPolicyIncident BusinessPolicyLog Incident Lineage Lineage ColumnProcess BIProcess Resources Resources Link File Readme ReadmeTemplate Badge Workflows Workflows Workflow WorkflowRun Task Structs Structs Action AuthPolicyCondition AuthPolicyValiditySchedule AwsCloudWatchMetric AwsTag AzureTag BadgeCondition BusinessPolicyRule ByocSsoConfig ColumnValueFrequencyMap DbtMetricFilter DbtJobRun GoogleLabel GoogleTag Histogram KafkaTopicConsumption MCRuleComparison MCRuleSchedule PopularityInsights SourceTagAttachment SourceTagAttachmentValue SourceTagAttribute StarredDetails Enumerations Enumerations AdfActivityState ADLSAccessTier ADLSAccountStatus ADLSEncryptionTypes ADLSLeaseState ADLSLeaseStatus ADLSObjectArchiveStatus ADLSObjectType ADLSPerformance ADLSProvisionState ADLSReplicationType ADLSStorageKind APIQueryParamTypeEnum atlas_operation AtlasGlossaryCategoryType AtlasGlossaryTermType AtlasGlossaryType AtlasGlossaryTermAssignmentStatus AtlasGlossaryTermRelationshipStatus AuthPolicyCategory AuthPolicyResourceCategory AuthPolicyType certificate_status DataGlossary DataProductCriticality DataProductSensitivity DataProductStatus DataProductVisibility DomoCardType DynamoDBSecondaryIndexProjectionType DynamoDBStatus file_type FivetranConnectorStatus FivetranProcessStatus google_datastudio_asset_type icon_type incident_severity kafka_topic_cleanup_policy kafka_topic_compression_type matillion_job_type ModelCardinalityType MongoDBCollectionValidationAction MongoDBCollectionValidationLevel OpenLineageRunState powerbi_endorsement query_username_strategy quick_sight_analysis_status quick_sight_dataset_field_type quick_sight_dataset_import_mode quick_sight_folder_type SchemaRegistrySchemaCompatibility SchemaRegistrySchemaType SourceCostUnitType table_type WorkflowRunStatus WorkflowRunType WorkflowStatus WorkflowType Abstractions Abstractions BI Cloud Insight ObjectStore EventStore DataQuality Metric NoSQL SchemaRegistry Glossary Glossary AtlasGlossary AtlasGlossaryCategory AtlasGlossaryTerm Data mesh Data mesh DataDomain DataProduct DataContract Stakeholder StakeholderTitle Relational databases Relational databases Database Schema Table View MaterialisedView Column Query TablePartition CalculationView BigqueryTag DatabricksUnityCatalogTag SnowflakeDynamicTable SnowflakePipe SnowflakeStream SnowflakeTag Procedure Function SQL Query organization Query organization Namespace Collection Folder Cubes Cubes Cube CubeDimension CubeHierarchy CubeField APIs APIs APIPath APISpec APIObject APIQuery APIField Airflow Airflow AirflowDag AirflowTask Amazon Amazon Amazon DynamoDB Amazon DynamoDB DynamoDBTable DynamoDBSecondaryIndex DynamoDBGlobalSecondaryIndex DynamoDBLocalSecondaryIndex AWS S3 AWS S3 S3Bucket S3Object Amazon QuickSight Amazon QuickSight QuickSightAnalysis QuickSightAnalysisVisual QuickSightDashboard QuickSightDashboardVisual QuickSightDataset QuickSightDatasetField QuickSightFolder Anaplan Anaplan AnaplanWorkspace AnaplanApp AnaplanPage AnaplanModel AnaplanModule AnaplanList AnaplanSystemDimension AnaplanDimension AnaplanLineItem AnaplanView Anomalo Anomalo AnomaloCheck App App Application ApplicationField Microsoft Azure Microsoft Azure Azure Data Factory Azure Data Factory AdfActivity AdfDataflow AdfDataset AdfLinkedservice AdfPipeline Azure Data Lake Storage Azure Data Lake Storage ADLSAccount ADLSContainer ADLSObject Azure Event Hub Azure Event Hub AzureEventHub AzureEventHubConsumerGroup Azure Service Bus Azure Service Bus AzureServiceBusNamespace AzureServiceBusSchema AzureServiceBusTopic Cosmos DB Cosmos DB CosmosMongoDBAccount CosmosMongoDBCollection CosmosMongoDBDatabase Cognite Cognite Cognite3DModel CogniteAsset CogniteEvent CogniteFile CogniteSequence CogniteTimeseries Custom Custom CustomEntity Dataverse Dataverse DataverseEntity DataverseAttribute dbt dbt DbtColumnProcess DbtMetric DbtModel DbtModelColumn DbtProcess DbtSource DbtTag DbtTest Domo Domo DomoCard DomoDashboard DomoDataset DomoDatasetColumn DocumentDB DocumentDB DocumentDBCollection DocumentDBDatabase Fivetran Fivetran FivetranConnector Google Google Google Cloud Storage Google Cloud Storage GCSBucket GCSObject Google Data Studio Google Data Studio DataStudioAsset IBM IBM IBM Cognos Cognos CognosDashboard CognosDatasource CognosExploration CognosFile CognosFolder CognosModule CognosPackage CognosReport Kafka Kafka KafkaConsumerGroup KafkaTopic Looker Looker LookerDashboard LookerExplore LookerField LookerFolder LookerLook LookerModel LookerProject LookerQuery LookerTile LookerView Matillion Matillion MatillionComponent MatillionGroup MatillionJob MatillionProject Metabase Metabase MetabaseCollection MetabaseDashboard MetabaseQuestion MicroStrategy MicroStrategy MicroStrategyAttribute MicroStrategyCube MicroStrategyDocument MicroStrategyDossier MicroStrategyFact MicroStrategyMetric MicroStrategyProject MicroStrategyReport MicroStrategyVisualization Mode Mode ModeChart ModeCollection ModeQuery ModeReport ModeWorkspace Models Models ModelAttribute ModelAttributeAssociation ModelDataModel ModelEntity ModelEntityAssociation ModelVersion MongoDB MongoDB MongoDBCollection MongDBDatabase Monte Carlo Monte Carlo MCIncident MCMonitor Power BI Power BI Power BI PowerBIColumn PowerBIDashboard PowerBIDataflow PowerBIDataflowEntityColumn PowerBIDataset PowerBIDatasource PowerBIMeasure PowerBIPage PowerBIReport PowerBITable PowerBITile PowerBIWorkspace Preset Preset PresetChart PresetDashboard PresetDataset PresetWorkspace Qlik Qlik QlikApp QlikChart QlikDataset QlikSheet QlikSpace QlikStream Redash Redash RedashDashboard RedashQuery RedashVisualization Salesforce Salesforce SalesforceDashboard SalesforceField SalesforceObject SalesforceOrganization SalesforceReport SaaS Sigma Sigma SigmaWorkbook SigmaPage SigmaDataElement SigmaDataElementField SigmaDataset SigmaDatasetColumn Sisense Sisense SisenseDashboard SisenseDatamodel SisenseDatamodelTable SisenseFolder SisenseWidget Soda Soda SodaCheck Spark Spark SparkJob Superset Superset SupersetChart SupersetDashboard SupersetDataset Tableau Tableau TableauCalculatedField TableauDashboard TableauDatasource TableauDatasourceField TableauFlow TableauMetric TableauProject TableauSite TableauWorkbook TableauWorksheet ThoughtSpot ThoughtSpot ThoughtspotAnswer ThoughtspotColumn ThoughtspotDashlet ThoughtspotLiveboard ThoughtspotTable ThoughtspotView ThoughtspotWorksheet Endpoints Table of contents API-first models Asset creation order Creating assets ¶ API-first models ¶ There are several types in Atlan that are intended for use primarily through the APIs and SDKs: Relational databases, schemas, tables, views, columns (and more) Object store assets: AWS S3 buckets and objects Azure Data Lake Storage accounts, containers, and objects Google Cloud Storage buckets and objects Business intelligence assets: Google Data Studio sources and reports Preset workspaces, dashboards, charts, and datasets Superset dashboards, charts, and datasets API specs, paths, objects, queries and fields App assets AI assets (AI models, AI applications) Insights assets Asset creation order ¶ When creating data assets in Atlan, the order in which you create them is important. At the top level of all data assets in Atlan is the Connection . Connections are the basis for access control, so you must create (or use an existing) connection before you can create any other assets. You must then create each subsequent level of the data asset's structure(s) in parent-first order. You can bulk-create assets at the same level While parent assets must exist before creating child assets, you can create multiple assets at the same level all at the same time. Example: relational database structure You must first create a Connection (or decide to reuse an existing one). You can then create any number Database s within that connection, at the same time. You can then create any number of Schema s within any of those databases, at the same time. You can then create any number of Table s or View s within any of those schemas, at the same time. And you can then finally create any number of Column s within any of those tables or views, at the same time. 2023-04-12 2025-07-29 Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "topic": "Best_Practices",
    "scraped_at": "2025-09-15 00:27:57"
  },
  {
    "title": "Domo | Atlan Documentation",
    "content": "On this page Overview: Catalog Domo dashboards, cards, and datasets in Atlan. Gain visibility into lineage, usage, and governance for your Domo analytics assets. Get started ​ Follow these steps to connect and catalog Domo assets in Atlan: Set up the connector Crawl assets References ​ What does Atlan crawl from Domo? : Detailed list of Domo asset types and metadata fields that Atlan can extract and catalog. Preflight checks for Domo : Technical checks and requirements needed for a successful Domo integration. Troubleshooting ​ Troubleshooting connectivity : Solutions for common issues encountered when connecting Atlan to Domo, including permissions and network problems. Get started References Troubleshooting",
    "url": "https://docs.atlan.com/apps/connectors/business-intelligence/domo",
    "scraped_at": "2025-09-15 19:51:40",
    "content_length": 718,
    "topic": "API_SDK"
  },
  {
    "title": "Crawl on-premises Databricks | Atlan Documentation",
    "content": "On this page Once you have set up the databricks-extractor tool , you can extract metadata from your on-premises Databricks instances by completing the following steps. Run databricks-extractor ​ Crawl all Databricks connections ​ To crawl all Databricks connections using the databricks-extractor tool: Log into the server with Docker Compose installed. Change to the directory containing the compose file. Run Docker Compose: sudo docker-compose up Crawl a specific connection ​ To crawl a specific Databricks connection using the databricks-extractor tool: Log into the server with Docker Compose installed. Change to the directory containing the compose file. Run Docker Compose: sudo docker-compose up <connection-name> (Replace <connection-name> with the name of the connection from the services section of the compose file.) (Optional) Review generated files ​ The databricks-extractor tool will generate many folders with JSON files for each service . For example: catalogs schemas tables You can inspect the metadata and make sure it is acceptable for providing metadata to Atlan. Upload generated files to S3 ​ To provide Atlan access to the extracted metadata, you will need to upload the metadata to an S3 bucket. Did you know? We recommend uploading to the same S3 bucket as Atlan uses to avoid access issues. Reach out to your Data Success Manager to get the details of your Atlan bucket. To create your own bucket, refer to the Create your own S3 bucket section of the dbt documentation. (The steps will be exactly the same.) To upload the metadata to S3: Ensure that all files for a particular connection have the same prefix. For example, output/databricks-example/catalogs/success/result-0.json , output/databricks-example/schemas/{{catalog_name}}/success/result-0.json , output/databricks-example/tables/{{catalog_name}}/success/result-0.json , and so on. Upload the files to the S3 bucket using your preferred method. For example, to upload all files using the AWS CLI : aws s3 cp output/databricks-example s3://my-bucket/metadata/databricks-example --recursive Crawl metadata in Atlan ​ Once you have extracted metadata on-premises and uploaded the results to S3, you can crawl the metadata into Atlan: How to crawl Databricks Be sure to select Offline for the Extraction method . Run databricks-extractor (Optional) Review generated files Upload generated files to S3 Crawl metadata in Atlan",
    "url": "https://docs.atlan.com/apps/connectors/data-warehouses/databricks/how-tos/crawl-on-premises-databricks",
    "scraped_at": "2025-09-15 19:51:41",
    "content_length": 2413,
    "topic": "API_SDK"
  },
  {
    "title": "SisenseDatamodelTable - Developer",
    "content": "SisenseDatamodelTable ¶ Instance of a Sisense datamodel table in Atlan. Complete reference This is a complete reference for the SisenseDatamodelTable object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. SisenseDatamodelTable inherits its attributes and relationships from these other types: classDiagram direction RL class SisenseDatamodelTable link SisenseDatamodelTable \"../sisensedatamodeltable\" class Sisense { <<abstract>> } link Sisense \"../sisense\" Sisense <|-- SisenseDatamodelTable : extends class BI { <<abstract>> } link BI \"../bi\" BI <|-- Sisense : extends class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- BI : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from SisenseDatamodelTable 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) These attributes are specific to instances of SisenseDatamodelTable (and all of its subtypes). sisenseDatamodelQualifiedName ¶ Unique name of the datamodel in which this datamodel table exists. sisenseDatamodelTableColumnCount ¶ Number of columns present in this datamodel table. sisenseDatamodelTableExpression ¶ SQL expression of this datamodel table. sisenseDatamodelTableIsHidden ¶ Whether this datamodel table is hidden in Sisense (true) or not (false). sisenseDatamodelTableIsMaterialized ¶ Whether this datamodel table is materialised (true) or not (false). sisenseDatamodelTableLiveQuerySettings ¶ JSON specifying the LiveQuery settings of this datamodel table. sisenseDatamodelTableSchedule ¶ JSON specifying the refresh schedule of this datamodel table. sisenseDatamodelTableType ¶ Type of this datamodel table, for example: 'base' for regular tables, 'custom' for SQL expression-based tables. Relationships ¶ Inherited relationships These relationships are inherited from SisenseDatamodelTable 's supertypes: anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos inputToAirflowTasks ( AirflowTask ) ¶ Tasks to which this asset provides input. inputToProcesses ( Process ) ¶ Processes to which this asset provides input. inputToSparkJobs ( SparkJob ) ¶ TBC modelImplementedAttributes ( ModelAttribute ) ¶ Attributes implemented by this asset. modelImplementedEntities ( ModelEntity ) ¶ Entities implemented by this asset. outputFromAirflowTasks ( AirflowTask ) ¶ Tasks from which this asset is output. outputFromProcesses ( Process ) ¶ Processes from which this asset is produced as output. outputFromSparkJobs ( SparkJob ) ¶ TBC These relationships are specific to instances of SisenseDatamodelTable (and all of its subtypes). sisenseDatamodel ( SisenseDatamodel ) ¶ Datamodel in which this datamodel table exists. sisenseWidgets ( SisenseWidget ) ¶ TBC Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/sisensedatamodeltable/",
    "scraped_at": "2025-09-15 19:51:43",
    "content_length": 20041,
    "topic": "SSO"
  },
  {
    "title": "Cloud - Developer",
    "content": "Cloud ¶ Base class for cloud assets. Complete reference This is a complete reference for the Cloud object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. Cloud inherits its attributes and relationships from these other types: classDiagram direction RL class Cloud { <<abstract>> } link Cloud \"../cloud\" class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Cloud : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from Cloud 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) Relationships ¶ Inherited relationships These relationships are inherited from Cloud 's supertypes: anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/cloud/",
    "scraped_at": "2025-09-15 19:51:45",
    "content_length": 17961,
    "topic": "SSO"
  },
  {
    "title": "SnowflakeTag - Developer",
    "content": "SnowflakeTag ¶ Instance of a Snowflake tag in Atlan. Complete reference This is a complete reference for the SnowflakeTag object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. SnowflakeTag inherits its attributes and relationships from these other types: classDiagram direction RL class SnowflakeTag link SnowflakeTag \"../snowflaketag\" class Tag { <<abstract>> } link Tag \"../tag\" Tag <|-- SnowflakeTag : extends class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- Tag : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends class SQL { <<abstract>> } link SQL \"../sql\" SQL <|-- SnowflakeTag : extends class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- SQL : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from SnowflakeTag 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) calculationViewName ¶ Simple name of the calculation view in which this SQL asset exists, or empty if it does not exist within a calculation view. calculationViewQualifiedName ¶ Unique name of the calculation view in which this SQL asset exists, or empty if it does not exist within a calculation view. databaseName ¶ Simple name of the database in which this SQL asset exists, or empty if it does not exist within a database. databaseQualifiedName ¶ Unique name of the database in which this SQL asset exists, or empty if it does not exist within a database. isProfiled ¶ Whether this asset has been profiled (true) or not (false). lastProfiledAt ¶ Time (epoch) at which this asset was last profiled, in milliseconds. queryCount ¶ Number of times this asset has been queried. queryCountUpdatedAt ¶ Time (epoch) at which the query count was last updated, in milliseconds. queryUserCount ¶ Number of unique users who have queried this asset. queryUserMap ¶ Map of unique users who have queried this asset to the number of times they have queried it. schemaName ¶ Simple name of the schema in which this SQL asset exists, or empty if it does not exist within a schema. schemaQualifiedName ¶ Unique name of the schema in which this SQL asset exists, or empty if it does not exist within a schema. tableName ¶ Simple name of the table in which this SQL asset exists, or empty if it does not exist within a table. tableQualifiedName ¶ Unique name of the table in which this SQL asset exists, or empty if it does not exist within a table. viewName ¶ Simple name of the view in which this SQL asset exists, or empty if it does not exist within a view. viewQualifiedName ¶ Unique name of the view in which this SQL asset exists, or empty if it does not exist within a view. mappedClassificationName ¶ Name of the classification in Atlan that is mapped to this tag. (1) Uses a different name in SDKs mappedAtlanTagName mapped_atlan_tag_name tagAllowedValues ¶ Allowed values for the tag in the source system. These are denormalized from tagAttributes for ease of querying. tagAttributes ¶ Attributes associated with the tag in the source system. tagId ¶ Unique identifier of the tag in the source system. Relationships ¶ Inherited relationships These relationships are inherited from SnowflakeTag 's supertypes: anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos inputToAirflowTasks ( AirflowTask ) ¶ Tasks to which this asset provides input. inputToProcesses ( Process ) ¶ Processes to which this asset provides input. inputToSparkJobs ( SparkJob ) ¶ TBC modelImplementedAttributes ( ModelAttribute ) ¶ Attributes implemented by this asset. modelImplementedEntities ( ModelEntity ) ¶ Entities implemented by this asset. outputFromAirflowTasks ( AirflowTask ) ¶ Tasks from which this asset is output. outputFromProcesses ( Process ) ¶ Processes from which this asset is produced as output. outputFromSparkJobs ( SparkJob ) ¶ TBC dbtModels ( DbtModel ) ¶ TBC dbtSources ( DbtSource ) ¶ TBC dbtTests ( DbtTest ) ¶ TBC sqlDBTSources ( DbtSource ) ¶ TBC sqlDbtModels ( DbtModel ) ¶ TBC These relationships are specific to instances of SnowflakeTag (and all of its subtypes). atlanSchema ( Schema ) ¶ Schema in which this Snowflake tag exists. (1) Uses a different name in SDKs schema schema Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/snowflaketag/",
    "scraped_at": "2025-09-15 19:51:46",
    "content_length": 21643,
    "topic": "SSO"
  },
  {
    "title": "13 docs tagged with \"data-sources\" | Atlan Documentation",
    "content": "Column Level Lineage Data lineage shows the upstream and downstream dependencies of an asset. For a more granular view of these dependencies, you can view column-level lineage. Connectors Learn how to connect your data sources to Atlan. Explore supported connectors, integration patterns, and best practices for unified catalog management. Data and metadata persistence Learn about data and metadata persistence. Download and export lineage Understanding the flow of data from the source to its destination is a critical need for many organizations. To help you build trust in your data assets, Atlan allows you to [view](#view-impacted-assets), [download](#download-lineage), and [export](#export-impacted-assets) your impacted assets and share it with others in your organization. Download impacted assets in Google Sheets Once you've [connected Atlan with Google Sheets](/product/integrations/collaboration/spreadsheets/how-tos/integrate-atlan-with-google-sheets), you can download impacted assets in Google Sheets. This can help you assess the downstream impact of any changes made to an upstream asset for [impact analysis](/product/capabilities/lineage/concepts/what-is-lineage#impact-analysis). How can Atlan generate upstream lineage from the data warehouse layer? Learn about how can atlan generate upstream lineage from the data warehouse layer?. How to obtain upstream lineage if I connect to a Tableau data asset? Learn about how to obtain upstream lineage if i connect to a tableau data asset?. Troubleshooting Amazon MSK connectivity Learn about troubleshooting amazon msk connectivity. Troubleshooting Microsoft Power BI connectivity Learn about troubleshooting microsoft power bi connectivity. Troubleshooting MongoDB connectivity Learn about troubleshooting mongodb connectivity. Troubleshooting Qlik Sense Cloud connectivity Learn about troubleshooting qlik sense cloud connectivity. Troubleshooting ThoughtSpot connectivity Learn about troubleshooting thoughtspot connectivity. What do the numbers in lineage view mean? Learn about what do the numbers in lineage view mean?.",
    "url": "https://docs.atlan.com/tags/data-sources",
    "scraped_at": "2025-09-15 19:51:47",
    "content_length": 2093,
    "topic": "SSO"
  },
  {
    "title": "ThoughtspotView - Developer",
    "content": "ThoughtspotView ¶ Instance of a Thoughtspot view in Atlan. Complete reference This is a complete reference for the ThoughtspotView object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. ThoughtspotView inherits its attributes and relationships from these other types: classDiagram direction RL class ThoughtspotView link ThoughtspotView \"../thoughtspotview\" class Thoughtspot { <<abstract>> } link Thoughtspot \"../thoughtspot\" Thoughtspot <|-- ThoughtspotView : extends class BI { <<abstract>> } link BI \"../bi\" BI <|-- Thoughtspot : extends class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- BI : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from ThoughtspotView 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) thoughtspotChartType ¶ TBC thoughtspotColumnCount ¶ Number of Columns. thoughtspotJoinCount ¶ Total number of data table joins executed for analysis. thoughtspotQuestionText ¶ TBC Relationships ¶ Inherited relationships These relationships are inherited from ThoughtspotView 's supertypes: anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos inputToAirflowTasks ( AirflowTask ) ¶ Tasks to which this asset provides input. inputToProcesses ( Process ) ¶ Processes to which this asset provides input. inputToSparkJobs ( SparkJob ) ¶ TBC modelImplementedAttributes ( ModelAttribute ) ¶ Attributes implemented by this asset. modelImplementedEntities ( ModelEntity ) ¶ Entities implemented by this asset. outputFromAirflowTasks ( AirflowTask ) ¶ Tasks from which this asset is output. outputFromProcesses ( Process ) ¶ Processes from which this asset is produced as output. outputFromSparkJobs ( SparkJob ) ¶ TBC These relationships are specific to instances of ThoughtspotView (and all of its subtypes). thoughtspotColumns ( ThoughtspotColumn ) ¶ TBC Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/thoughtspotview/",
    "scraped_at": "2025-09-15 19:51:49",
    "content_length": 19190,
    "topic": "SSO"
  },
  {
    "title": "BusinessPolicyException - Developer",
    "content": "BusinessPolicyException ¶ Exception to a business policy Complete reference This is a complete reference for the BusinessPolicyException object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. BusinessPolicyException inherits its attributes and relationships from these other types: classDiagram direction RL class BusinessPolicyException link BusinessPolicyException \"../businesspolicyexception\" class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- BusinessPolicyException : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from BusinessPolicyException 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) These attributes are specific to instances of BusinessPolicyException (and all of its subtypes). businessPolicyExceptionFilterDSL ¶ Business Policy Exception Filter ES DSL to denote the associate asset/s involved. businessPolicyExceptionGroups ¶ List of groups who are part of this exception businessPolicyExceptionUsers ¶ List of users who are part of this exception businessPolicyQualifiedName ¶ Unique name of the business policy through which this asset is accessible. Relationships ¶ Inherited relationships These relationships are inherited from BusinessPolicyException 's supertypes: anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos These relationships are specific to instances of BusinessPolicyException (and all of its subtypes). businessPolicyForException ( BusinessPolicy ) ¶ Business policies related to exception Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/businesspolicyexception/",
    "scraped_at": "2025-09-15 19:51:51",
    "content_length": 18768,
    "topic": "SSO"
  },
  {
    "title": "8 docs tagged with \"app\" | Atlan Documentation",
    "content": "Automatically assign roles based on group names Learn how to automatically assign roles and sub-roles to users in Atlan based on their group memberships using the group-role sync app. Generate lineage between assets App Learn how to generate lineage between assets across two connections in Atlan by matching table names using the Lineage Generator (no transformations) app. Ingest Data Models Learn how to ingest a data model into Atlan using the Data Model Ingestion app and an Excel input file. Lineage Generator (no transformations) Learn how Atlan can generate upstream lineage from the data warehouse layer, including configuration options and behavior. Send alerts for workflow events Learn how to configure alerts for workflow events in Atlan via email or Google Chat. Source asset type Detailed parsing rules and configuration details for all supported source asset types in the Lineage Generator (no transformations) app. Source owner manager Reference for source owner management capabilities and configuration in stewardship workflows User Role Sync Complete configuration reference for the User Role Sync app properties and settings.",
    "url": "https://docs.atlan.com/tags/app",
    "scraped_at": "2025-09-15 19:51:52",
    "content_length": 1146,
    "topic": "SSO"
  },
  {
    "title": "12 docs tagged with \"metadata\" | Atlan Documentation",
    "content": "Atlan MCP Overview Learn what the Atlan MCP server is, what it enables, and how to connect using Remote or Local setup. Enable embedded metadata in Tableau Learn how to enable embedded Atlan metadata in Tableau dashboards for seamless data context and governance. How does Atlan handle lineage from Spark jobs? Learn about how does atlan handle lineage from spark jobs?. Is there a way to build lineage from NetSuite to Snowflake? Learn about is there a way to build lineage from netsuite to snowflake?. OpenLineage configuration and facets Learn about openlineage configuration and facets. Playbooks Create and manage automated workflows for metadata management and data governance. Troubleshooting Amazon DynamoDB connectivity Learn about troubleshooting amazon dynamodb connectivity. Troubleshooting IBM Cognos Analytics connectivity Learn about troubleshooting ibm cognos analytics connectivity. Troubleshooting Tableau connectivity Learn about troubleshooting tableau connectivity. What does Atlan crawl from CrateDB? Complete list of CrateDB assets and metadata properties extracted by Atlan during crawling What does Atlan crawl from Dagster Learn about the Dagster metadata that Atlan captures and visualizes Why is my Databricks lineage API not working? Learn about why is my databricks lineage api not working?.",
    "url": "https://docs.atlan.com/tags/metadata",
    "scraped_at": "2025-09-15 19:51:53",
    "content_length": 1321,
    "topic": "API_SDK"
  },
  {
    "title": "5 docs tagged with \"slack\" | Atlan Documentation",
    "content": "Collaboration Integrations Integrate Atlan with collaboration tools like Microsoft Teams and Slack. Slack Integrate Atlan with Slack to enable collaboration and notifications. What does Atlan do with each Slack permission? Learn about what does atlan do with each slack permission?. What is included in the Slack integration? Learn about the features and capabilities of the Slack integration with Atlan. What is the difference between Copy Link and Share on Slack or Teams? Learn about what is the difference between copy link and share on slack or teams?.",
    "url": "https://docs.atlan.com/tags/slack",
    "scraped_at": "2025-09-15 19:51:55",
    "content_length": 557,
    "topic": "API_SDK"
  },
  {
    "title": "Set up Amazon Redshift | Atlan Documentation",
    "content": "On this page Who can do this? You will need your Amazon Redshift administrator to run these commands - you may not have access yourself. Atlan supports fetching metadata from Amazon Redshift for the following types of deployment: Provisioned RA3 DC2 Serverless danger If you're using the DC2 node type, Redshift restricts cross-database joins and metadata access to a single database. For more information, see Considerations - Amazon Redshift . Because of this restriction, you must set up a separate workflow for each database you want to crawl. Grant permissions ​ For all supported authentication mechanisms except IAM role authentication on serverless deployment , you must first grant the following permissions on Amazon Redshift. For IAM role authentication on serverless deployment only, skip to this step . Create a group and user ​ To create a group and user, run the following commands: CREATE GROUP atlan_users ; CREATE USER atlan_user password '<pass>' IN GROUP atlan_users ; Replace <pass> with the password for the atlan_user being created. To crawl Amazon Redshift , for Username , you must enter the username you configured for the database user. For example, atlan_user . Grant required permissions to group ​ To grant the minimum required permissions, run the following commands: GRANT USAGE ON SCHEMA <schema_name> TO GROUP atlan_users; GRANT SELECT ON pg_catalog.svv_table_info TO GROUP atlan_users; Replace <schema_name> with the name of your schema. Repeat the above commands for all the databases in your schema( <schema_name> ). The permissions are used for the following: SVV_TABLE_INFO is used to obtain information on the table ID to table/schema/database relation. External schema ​ If your Redshift instance setup external schemas, you must grant permissions for each schema. Grant USAGE permissions ​ For external schemas, use the following command to grant USAGE permission: GRANT USAGE ON SCHEMA <schema_name> TO GROUP atlan_users; Replace <schema_name> with the name of your schema. Repeat this command for all external schemas. Did you know? If your external tables are sourced from Amazon S3 and AWS Glue Catalog, granting only the USAGE permission is sufficient, provided that the IAM role associated with the Redshift cluster has read access to the data. (Optional) Grant SELECT permissions ​ For Redshift-based external schemas, you must explicitly grant SELECT along with USAGE permissions to allow metadata crawling. Use the following command to grant this permission: GRANT SELECT ON ALL TABLES IN SCHEMA <schema_name> TO GROUP atlan_users; Replace <schema_name> with the name of your schema. Repeat the command for all the Redshift-based external schemas. Verify external schema permissions ​ Follow these steps to verify permissions granted to your external schema: Log in to the system using the IAM role created earlier. Run the following command using any database viewer tool: SELECT * FROM SVV_EXTERNAL_TABLES WHERE schema_name = '<external_schema_name>' Replace <external_schema_name> with the name of your external schema. If the tables appear in the results, the permissions are correctly configured. If you can't provide SELECT or USAGE access, create a cloned schema and grant access to the atlan_users group. For more information, see Cloned schema for restricted access section. Cloned schema for restricted access ​ If you can't grant USAGE or SELECT permissions to the atlan_users group, you must create a cloned schema containing the necessary metadata tables. Then, grant permissions to the cloned schema. Follow these steps to create a cloned schema and provide required permissions: Log in as dbadmin . Create a new schema and give it a meaningful name. For example, atlan . Clone the following views as tables from the pg_catalog schema into the cloned schema: pg_views SVV_TABLES SVV_EXTERNAL_TABLES SVV_COLUMNS Clone the following views as tables from the information_schema into the cloned schema: key_column_usage as information_schema_key_column_usage table_constraints as information_schema_table_constraints Grant USAGE and SELECT access to the atlan_users group on the cloned schema: GRANT USAGE ON SCHEMA <cloned_schema_name> TO GROUP atlan_users; GRANT SELECT ON ALL TABLES IN SCHEMA <cloned_schema_name> TO GROUP atlan_users; Replace <cloned_schema_name> with the name of your cloned schema. Since Atlan relies on these tables to crawl metadata, schedule a cron job to refresh the cloned tables periodically. Did you know? You can reach out to Atlan support if you need assistance with setting up a Cloned Schema. (Optional) Grant permissions for role-based authentication on serverless ​ For IAM role-based authentication on Amazon Redshift serverless deployment only, you must first grant the following permissions on Amazon Redshift. Create a role ​ To create a role, run the following commands: CREATE ROLE atlan_role ; Grant required permissions to role ​ To grant the minimum required permissions, run the following commands: GRANT USAGE ON SCHEMA <schema_name> TO GROUP atlan_users; GRANT SELECT ON pg_catalog.svv_table_info TO GROUP atlan_users; Replace <schema_name> with the name of your schema. Repeat the above commands for all the databases in your schema( <schema_name> ). The permissions are used for the following: SVV_TABLE_INFO is used to obtain information on the table ID to table/schema/database relation. External schema ​ If your Redshift setup uses external schemas, you must grant permissions for each schema. You can do this in one of the following ways: Grant USAGE permissions ​ For external schemas, use the following command to grant USAGE permission: GRANT USAGE ON SCHEMA <schema_name> TO GROUP atlan_users; Replace <schema_name> with the name of your schema. Repeat this command for all external schemas. Did you know? If your external tables are sourced from Amazon S3 and AWS Glue Catalog, granting only the USAGE permission is sufficient, provided that the IAM role associated with the Redshift cluster has read access to the data. (Optional) Grant SELECT permissions ​ For Redshift-based external schemas, you must explicitly grant SELECT along with USAGE permissions to allow metadata crawling. Use the following command to grant this permission: GRANT SELECT ON ALL TABLES IN SCHEMA <schema_name> TO GROUP atlan_users; Replace <schema_name> with the name of your schema. Repeat the command for all the Redshift-based external schemas. Verify external schema permissions ​ Follow these steps to verify permissions granted to your external schema: Log in to the system using the IAM role created earlier. Run the following command using the Amazon Redshift Data API : SELECT * FROM SVV_EXTERNAL_TABLES WHERE schema_name = '<external_schema_name>' Replace <external_schema_name> with the name of your external schema. If the tables appear in the results, the permissions are correctly configured. If you can't provide SELECT or USAGE access, create a cloned schema and grant access to the atlan_users group. For more information, see Cloned schema for restricted access section. Cloned schema for restricted access ​ If you can't grant USAGE or SELECT permissions to the atlan_users group, you must create a cloned schema containing the necessary metadata tables. Then, grant permissions to the cloned schema. Follow these steps to create a cloned schema and provide required permissions: Log in as dbadmin . Create a new schema and give it a meaningful name. For example, atlan . Clone the following views as tables from the pg_catalog schema into the cloned schema: pg_views SVV_TABLES SVV_EXTERNAL_TABLES SVV_COLUMNS Clone the following views as tables from the information_schema into the cloned schema: key_column_usage as information_schema_key_column_usage table_constraints as information_schema_table_constraints Grant USAGE and SELECT access to the atlan_users group on the cloned schema: GRANT USAGE ON SCHEMA <cloned_schema_name> TO GROUP atlan_users; GRANT SELECT ON ALL TABLES IN SCHEMA <cloned_schema_name> TO GROUP atlan_users; Replace <cloned_schema_name> with the name of your cloned schema. Since Atlan relies on these tables to crawl metadata, schedule a cron job to refresh the cloned tables periodically. Did you know? You can reach out to Atlan support if you need assistance with setting up a Cloned Schema. Grant additional permissions for mining query history ​ Did you know? For mining query history from Redshift Serverless, permissions on STL and SVL views are not required as they do not exist in serverless deployment. To grant the additional permissions needed to mine query history, run the following commands: GRANT SELECT on pg_catalog . stl_ddltext to GROUP atlan_users ; GRANT SELECT on pg_catalog . stl_query to GROUP atlan_users ; GRANT SELECT on pg_catalog . stl_connection_log to GROUP atlan_users ; GRANT SELECT on pg_catalog . stl_undone to GROUP atlan_users ; GRANT SELECT on pg_catalog . stl_insert to GROUP atlan_users ; GRANT SELECT on pg_catalog . svl_statementtext to GROUP atlan_users ; ALTER USER atlan_user SYSLOG ACCESS UNRESTRICTED ; The additional permissions are used for the following: STL_DDLTEXT is used for DDL queries. STL_QUERY is used for DML and regular queries. STL_CONNECTION_LOG is used to obtain the session ID that a query is part of. STL_UNDONE is used to obtain information about transactions that have been undone or rolled back. STL_INSERT is used to obtain the table ID used in the insert queries. SVL_STATEMENTTEXT is used to obtain the query text for all queries. SYSLOG ACCESS UNRESTRICTED is used to access all queries performed by any user in the system tables above. To use basic authentication, your setup is now complete. To configure IAM-based authentication, you need to continue with the following steps. (Optional) Create IAM policy ​ All IAM-based authentication mechanisms require an IAM policy to be created. For all supported authentication mechanisms except IAM role authentication on serverless deployment , create the following IAM policy. For IAM role authentication on serverless deployment only, skip to this step . To create an IAM policy with the necessary permissions follow the steps in the AWS Identity and Access Management User Guide . Create the policy using the following JSON: { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Effect\" : \"Allow\" , \"Action\" : [ \"redshift:GetClusterCredentials\" ] , \"Resource\" : [ \"arn:aws:redshift:<region>:<account_id>:dbuser:<redshift_cluster_identifier>/atlan_user\" , \"arn:aws:redshift:<region>:<account_id>:dbname:<redshift_cluster_identifier>/<database>\" ] } ] } Replace <region> with the AWS region of your Redshift instance. Replace <account_id> with your account ID. Replace <redshift_cluster_identifier> with your Redshift cluster identifier. Replace <database> with the name of the Redshift database. (Optional) Create IAM policy for role-based authentication on serverless ​ For IAM role-based authentication on Amazon Redshift serverless deployment only, create an IAM policy with the necessary permissions. Follow the steps in the AWS Identity and Access Management User Guide . Create the policy using the following JSON: { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Effect\" : \"Allow\" , \"Action\" : [ \"redshift-serverless:GetCredentials\" ] , \"Resource\" : [ \"arn:aws:redshift-serverless:<region>:<account_id>:workgroup/<workgroup_identifier>\" , ] } ] } Replace <region> with the AWS region of your Amazon Redshift instance. Replace <account_id> with your AWS account ID. Replace <workgroup_identifier> with your Amazon Redshift serverless workgroup identifier. Configure tag for IAM role: { RedshiftDbRoles : <role> } Replace <role> with the role you created . (Optional) Choose IAM-based authentication mechanism ​ Using the policy created above, configure one of the following options for authentication. User-based authentication ​ To configure user-based authentication: Create an AWS IAM user by following the steps in the AWS Identity and Access Management User Guide . On the Set permissions page, attach the policy created in the previous step to this user. Once the user is created, view or download the user's access key ID and secret access key . danger This will be your only opportunity to view or download the access keys. You will not have access to them again after leaving the user creation screen. Role delegation-based authentication ​ To configure role delegation-based authentication: Raise a support ticket to get the ARN of the Node Instance Role for your Atlan EKS cluster. Create a new role in your AWS account by following the steps in the AWS Identity and Access Management User Guide . When prompted for policies, attach the policy created in the previous step to this role. When prompted, create a trust relationship for the role using the following trust policy. (Replace <atlan_nodeinstance_role_arn> with the ARN received from Atlan support.) { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Effect\" : \"Allow\" , \"Principal\" : { \"AWS\" : \"<atlan_nodeinstance_role_arn>\" } , \"Action\" : \"sts:AssumeRole\" , \"Condition\" : { } } ] } (Optional) To use an external ID for additional security, paste the external ID into the policy: { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Effect\" : \"Allow\" , \"Principal\" : { \"AWS\" : \"<atlan_nodeinstance_role_arn>\" } , \"Action\" : \"sts:AssumeRole\" , \"Condition\" : { \"StringEquals\" : { \"sts:ExternalId\" : \"<atlan_external_id>\" } } } ] } Replace <atlan_external_id> with the external ID you want to use. Now, reach out to Atlan support with: The name of the role you created above. The ID of the AWS account where the role was created. danger Wait until the support team confirms the account is allowlisted to assume the role before running the crawler. Grant permissions (Optional) Grant permissions for role-based authentication on serverless Grant additional permissions for mining query history (Optional) Create IAM policy (Optional) Create IAM policy for role-based authentication on serverless (Optional) Choose IAM-based authentication mechanism",
    "url": "https://docs.atlan.com/apps/connectors/data-warehouses/amazon-redshift/how-tos/set-up-amazon-redshift",
    "scraped_at": "2025-09-15 19:51:56",
    "content_length": 14074,
    "topic": "SSO"
  },
  {
    "title": "3 docs tagged with \"application sdk\" | Atlan Documentation",
    "content": "Build custom app Create a local file extraction application from scratch using the patterns and tools you learned Run your first sample app Download and run the Hello World sample application to see an Atlan app in action Set up your development environment Set up your local development environment to start building applications with the Application SDK",
    "url": "https://docs.atlan.com/tags/application-sdk",
    "scraped_at": "2025-09-15 19:51:57",
    "content_length": 355,
    "topic": "API_SDK"
  },
  {
    "title": "What does Atlan crawl from Sisense? | Atlan Documentation",
    "content": "On this page Once you've crawled Sisense , you can use connector-specific filters for quick asset discovery. The following filters are currently supported for these asset types: Dashboards: Widget count filter - filter dashboards by widget count Data models: Type filter - filter data models by live or extract (formerly called Elasticube) type Data model tables: Tags filter - filter data model tables by Sisense tags Is hidden filter - use this filter to find hidden data model tables Atlan crawls and maps the following assets and properties from Sisense. danger Currently, Atlan only represents the assets marked with 🔀 in lineage. Column-level lineage is not supported at present. Dashboards 🔀 ​ Atlan maps dashboards from Sisense to its SisenseDashboard asset type. Source property Atlan property Where in Atlan title name asset profile and overview sidebar desc description asset profile and overview sidebar created createdAt properties sidebar lastUpdated updatedAt properties sidebar calculated by Atlan widgetCount asset filter and overview sidebar generated using the dashboard ID sourceURL View in Sisense button on asset profile Widgets 🔀 ​ Atlan maps widgets from Sisense to its SisenseWidget asset type. Source property Atlan property Where in Atlan title name asset profile and overview sidebar desc description asset profile and overview sidebar created createdAt properties sidebar lastUpdated updatedAt properties sidebar calculated by Atlan columnCount overview sidebar subType subType API only size size API only Data models ​ Atlan maps data models from Sisense to its SisenseDataModel asset type. Source property Atlan property Where in Atlan name name asset profile and overview sidebar desc description asset profile and overview sidebar created createdAt properties sidebar lastUpdated updatedAt properties sidebar calculated by Atlan tableCount API only server server API only revision revision API only lastBuildTime lastBuildTime API only lastSuccessfulBuildTime lastSuccessfulBuildTime API only type type asset filter and overview sidebar relationshipType relationshipType API only Data model tables 🔀 ​ Atlan maps data model tables from Sisense to its SisenseDataModelTable asset type. Source property Atlan property Where in Atlan name name asset profile and overview sidebar description description asset profile and overview sidebar created createdAt properties sidebar lastUpdated updatedAt properties sidebar calculated by Atlan columnCount overview sidebar type type API only expression expression API only isMaterialized isMaterialized API only isHidden isHidden asset filter and overview sidebar schedule schedule API only liveQuerySettings liveQuerySettings API only tags assetTags properties sidebar Folders ​ Atlan maps folders from Sisense to its SisenseFolder asset type. Source property Atlan property Where in Atlan name name asset profile and overview sidebar created createdAt properties sidebar lastUpdated updatedAt properties sidebar Dashboards 🔀 Widgets 🔀 Data models Data model tables 🔀 Folders",
    "url": "https://docs.atlan.com/apps/connectors/business-intelligence/sisense/references/what-does-atlan-crawl-from-sisense",
    "scraped_at": "2025-09-15 19:51:58",
    "content_length": 3048,
    "topic": "API_SDK"
  },
  {
    "title": "query_username_strategy - Developer",
    "content": "query_username_strategy ¶ TBC Complete reference This is a complete reference for the query_username_strategy enumeration in Atlan, showing all of its possible values. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. Valid values ¶ connectionUsername atlanUsername Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/enums/query_username_strategy/",
    "scraped_at": "2025-09-15 19:52:00",
    "content_length": 576,
    "topic": "API_SDK"
  },
  {
    "title": "Preflight checks for Snowflake | Atlan Documentation",
    "content": "On this page Before running the Snowflake crawler , you can run preflight checks to perform the necessary technical validations. The following preflight checks will be completed: Database and schema check ​ Information schema ​ ✅ Check successful ❌ Check failed for $missingObjectName Account usage ​ ✅ Check successful ❌ Check failed for $missingObjectName Warehouse access ​ ✅ Check successful ❌ Operation cannot be performed / User is not authorized to perform this action / Cannot be resumed because resource monitor has exceeded its quota Miner ​ Did you know? Once you have crawled assets from Snowflake, you can mine query history . Query history view ​ ✅ Check successful ❌ Cannot access query history table. Please run the command in your Snowflake instance: GRANT IMPORTED PRIVILEGES ON DATABASE snowflake TO ROLE atlan_user_role; Access history view ​ ✅ Check successful ❌ Check failed. Something went wrong with your request. Sessions view ​ ✅ Check successful ❌ Check failed. Something went wrong with your request. S3 ​ ✅ Check successful if the bucket, region, and prefix combination is valid and the S3 credential passed is accessible. ❌ Check failed with error code <AWS error code> - <AWS SDK ERR message> For example: Miner S3 credentials: failed with error code: NoSuchBucket Database and schema check Warehouse access Miner",
    "url": "https://docs.atlan.com/apps/connectors/data-warehouses/snowflake/references/preflight-checks-for-snowflake",
    "scraped_at": "2025-09-15 19:52:01",
    "content_length": 1344,
    "topic": "API_SDK"
  },
  {
    "title": "SlackDiscussionReporter - Developer",
    "content": "SlackDiscussionReporter ¶ This content has moved! We have moved our samples to a separate, dedicated site: https://solutions.atlan.com . This document is no longer being maintained. Extracts counts of the number of Slack conversations tracked against each asset, producing an Excel workbook consisting of 1 worksheet with the following columns: Column name Usage Qualified name Unique name of the asset. Type Type of the asset. Name Human-readable name of the asset. Slack Number of discussions through Slack linked to this asset. Link Link to the asset in Atlan. Configuration ¶ You can configure the following options for this reporter as environment variables: ATLAN_BASE_URL ¶ URL for your Atlan tenant (for example: https://tenant.atlan.com ). ATLAN_API_KEY ¶ API token to use when accessing Atlan. BATCH_SIZE ¶ Defines how many records the API calls attempt to retrieve on each request. (Defaults to 50 if not specified.) FILE_PREFIX ¶ Defines what the Excel file's name will start with. (Defaults to slack-discussion-report if not specified.) REGION ¶ Defines the AWS region of the S3 bucket where you want to write the Excel file output. BUCKET ¶ Defines the S3 bucket where you want the reporter to store the Excel file output. (Note that there is no default value for this, so this must be sent for the utility to run via a Lambda function and produce consumable output — if blank (default) the reporter produces a local Excel file.) Lambda configuration ¶ To use this reporter as an AWS Lambda function, you can configure the same variables as above, but send them in a JSON structure: Lambda configuration { \"BATCH_SIZE\" : \"50\" , \"FILE_PREFIX\" : \"slack-discussion-report\" , \"REGION\" : \"ap-south-1\" , \"BUCKET\" : \"\" } Logging ¶ By default, only messages at INFO and above will be logged (to the console). You can change this level by copying the main/resources/log4j2.xml from the source repo and modifying it to give: more detail ( DEBUG will log every API request and response, including their full payloads) less detail ( WARN will only print warnings and errors, ERROR only errors). Running the reporters locally ¶ You can run the reporters locally on any machine with network access to your Atlan tenant. When run in this mode, the reporter will read the input Excel file locally on the machine running the reporter. If you want to change any of the settings , you can simply prepend the command with the environment variables. You can run the SlackDiscussionReporter by downloading the pre-compiled jar files for both: With this approach you only need a JRE installed, as you will be using pre-compiled code. Requires at least Java 11, though 17+ is recommended You must have a Java 11 (or higher) JRE installed to use the samples. If possible, we recommend using Java 17 (or higher) for significantly improved performance. macOS Windows Windows Linux Using Gradle Run SlackDiscussionReporter from pre-compiled jar files 1 2 3 4 5 6 export ATLAN_BASE_URL = https://tenant.atlan.com # (1) export ATLAN_API_KEY = eyNnCJd2T9Y8fEsbdx... export FILE_PREFIX = slack java \\ -cp atlan-java-...-jar-with-dependencies.jar:atlan-java-samples-...-jar-with-dependencies.jar \\ com.atlan.samples.reporters.SlackDiscussionReporter # (2) Export environment variables for the configuration you want to use. At a minimum: ATLAN_BASE_URL giving the URL of your Atlan tenant ATLAN_API_KEY giving the value of an API token with access to that tenant to load the assets Overriding the configuration Note that you can specify any optional overrides as environment variables before running the reporter in the same way. For example, you could use export FILE_PREFIX=slack to change the prefix of the file the reporter will produce. (Optional) If you want to override the logging settings, also add -Dlog4j.configurationFile=./log4j2.xml just before the canonical classname, pointing to your modified version of the log4j2.xml file. Within the directory containing the downloaded jar files, run the java command providing at least two arguments: The two jar files, separated by a : . The canonical classname of the SlackDiscussionReporter . Replace the ... with proper version numbers Don't forget to replace the ... in the -cp argument's values with proper version numbers, or running this will not work. Run SlackDiscussionReporter from pre-compiled jar files 1 2 3 4 5 $env :ATLAN_BASE_URL = \"https://tenant.atlan.com\" # (1) $env :ATLAN_API_KEY = \"eyNnCJd2T9Y8fEsbdx...\" $env :FILE_PREFIX = \"slack\" $env :CLASSPATH = \"atlan-java-...-jar-with-dependencies.jar;atlan-java-samples-...-jar-with-dependencies.jar\" # (2) java com.atlan.samples.reporters.SlackDiscussionReporter # (3) Export environment variables for the configuration you want to use. At a minimum: ATLAN_BASE_URL giving the URL of your Atlan tenant ATLAN_API_KEY giving the value of an API token with access to that tenant to load the assets Overriding the configuration Note that you can specify any optional overrides as environment variables before running the reporter in the same way. For example, you could use $env:FILE_PREFIX=\"slack\" to change the prefix of the file the reporter will produce. (Optional) If you want to override the logging settings, also add -Dlog4j.configurationFile=./log4j2.xml just before the canonical classname, pointing to your modified version of the log4j2.xml file. Note that on windows you must surround the value of the variable in double-quotes! In our experience, it seems that the java -cp command does not always work on Windows. Therefore, ensure you set the $env:CLASSPATH environment variable to include the names of the downloaded jar files, separated by a ; . Replace the ... with proper version numbers Don't forget to replace the ... in the -cp argument's values with proper version numbers, or running this will not work. Within the directory containing the downloaded jar files, run the java command providing the canonical classname of the SlackDiscussionReporter . Run SlackDiscussionReporter from pre-compiled jar files 1 2 3 4 5 6 export ATLAN_BASE_URL = https://tenant.atlan.com # (1) export ATLAN_API_KEY = eyNnCJd2T9Y8fEsbdx... export FILE_PREFIX = slack java \\ -cp atlan-java-...-jar-with-dependencies.jar:atlan-java-samples-...-jar-with-dependencies.jar \\ com.atlan.samples.reporters.SlackDiscussionReporter # (2) Export environment variables for the configuration you want to use. At a minimum: ATLAN_BASE_URL giving the URL of your Atlan tenant ATLAN_API_KEY giving the value of an API token with access to that tenant to load the assets Overriding the configuration Note that you can specify any optional overrides as environment variables before running the reporter in the same way. For example, you could use export FILE_PREFIX=slack to change the prefix of the file the reporter will produce. (Optional) If you want to override the logging settings, also add -Dlog4j.configurationFile=./log4j2.xml just before the canonical classname, pointing to your modified version of the log4j2.xml file. Within the directory containing the downloaded jar files, run the java command providing at least two arguments: The two jar files, separated by a : . The canonical classname of the SlackDiscussionReporter . Replace the ... with proper version numbers Don't forget to replace the ... in the -cp argument's values with proper version numbers, or running this will not work. You can also run the SlackDiscussionReporter from a clone of the samples repository: If you want to change the sample code provided to include additional logic, this is your best option. You have full control over all of the code this way and can make any changes you like before running it. Additional requirements You will need a JDK installed to run this way, not only the JRE, as the code must be compiled locally before it can be executed. The computer on which you run the code must also have network access to be able to configure Gradle itself and download the necessary dependencies of the code from Maven Central. Run SlackDiscussionReporter from a clone of the GitHub repo export FILE_PREFIX = slack ./gradlew SlackDiscussionReporter # (1)! Within the root directory of your local clone of the repo, run the Gradle task for the SlackDiscussionReporter . Overriding the configuration Note that you can specify any optional overrides as environment variables before running the loader. You can either do this in the same line where you run the command, or by exporting them first for example using export FILE_PREFIX=slack . Example output 18:04:33.705 [main] INFO com.atlan.samples.reporters.SlackDiscussionReporter - Creating Excel file (streaming)... 18:04:37.244 [main] INFO com.atlan.samples.reporters.SlackDiscussionReporter - Investigating 7 linked resources in https://tenant.atlan.com in batches of: 50 18:04:37.660 [ForkJoinPool.commonPool-worker-2] INFO com.atlan.samples.reporters.SlackDiscussionReporter - ... processed 0/7 (0%) 18:04:37.660 [main] INFO com.atlan.samples.reporters.SlackDiscussionReporter - Writing report to file: slack-discussion-report-20230906-170435-471.xlsx More details If there are many links in assets, you will see multiple lines (one per batch) about the extraction of the asset links (Slack discussions). The final line will always tell you the name of the Excel file that it produced. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/samples/reporters/slack/",
    "scraped_at": "2025-09-15 19:52:02",
    "content_length": 9501,
    "topic": "API_SDK"
  },
  {
    "title": "ThoughtSpot | Atlan Documentation",
    "content": "On this page Overview: Catalog ThoughtSpot liveboards, visualizations, and worksheets in Atlan. Gain visibility into lineage, usage, and governance for your ThoughtSpot analytics assets. Get started ​ Follow these steps to connect and catalog ThoughtSpot assets in Atlan: Set up the connector Crawl assets References ​ What does Atlan crawl from ThoughtSpot? : Detailed list of ThoughtSpot asset types and metadata fields that Atlan can extract and catalog. Troubleshooting ​ Troubleshooting connectivity : Solutions for common issues encountered when connecting Atlan to ThoughtSpot, including permissions and network problems. Get started References Troubleshooting",
    "url": "https://docs.atlan.com/apps/connectors/business-intelligence/thoughtspot",
    "scraped_at": "2025-09-15 19:52:05",
    "content_length": 667,
    "topic": "API_SDK"
  },
  {
    "title": "DataverseEntity - Developer",
    "content": "DataverseEntity ¶ Instances of DataverseEntity in Atlan. Complete reference This is a complete reference for the DataverseEntity object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. DataverseEntity inherits its attributes and relationships from these other types: classDiagram direction RL class DataverseEntity link DataverseEntity \"../dataverseentity\" class Dataverse { <<abstract>> } link Dataverse \"../dataverse\" Dataverse <|-- DataverseEntity : extends class SaaS { <<abstract>> } link SaaS \"../saas\" SaaS <|-- Dataverse : extends class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- SaaS : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from DataverseEntity 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) dataverseIsAuditEnabled ¶ Indicator if DataverseEntity has auditing enabled. dataverseIsCustom ¶ Indicator if DataverseEntity is custom built. dataverseIsCustomizable ¶ Indicator if DataverseEntity is customizable. These attributes are specific to instances of DataverseEntity (and all of its subtypes). dataverseEntitySchemaName ¶ Schema Name of the DataverseEntity. dataverseEntityTableType ¶ Table Type of the DataverseEntity. Relationships ¶ Inherited relationships These relationships are inherited from DataverseEntity 's supertypes: anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos inputToAirflowTasks ( AirflowTask ) ¶ Tasks to which this asset provides input. inputToProcesses ( Process ) ¶ Processes to which this asset provides input. inputToSparkJobs ( SparkJob ) ¶ TBC modelImplementedAttributes ( ModelAttribute ) ¶ Attributes implemented by this asset. modelImplementedEntities ( ModelEntity ) ¶ Entities implemented by this asset. outputFromAirflowTasks ( AirflowTask ) ¶ Tasks from which this asset is output. outputFromProcesses ( Process ) ¶ Processes from which this asset is produced as output. outputFromSparkJobs ( SparkJob ) ¶ TBC These relationships are specific to instances of DataverseEntity (and all of its subtypes). dataverseAttributes ( DataverseAttribute ) ¶ DataverseAttribute assets contained within this DataverseEntity. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/dataverseentity/",
    "scraped_at": "2025-09-15 19:52:06",
    "content_length": 19501,
    "topic": "SSO"
  },
  {
    "title": "CognosExploration - Developer",
    "content": "CognosExploration ¶ Instance of a Cognos Exploration in Atlan. Complete reference This is a complete reference for the CognosExploration object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. CognosExploration inherits its attributes and relationships from these other types: classDiagram direction RL class CognosExploration link CognosExploration \"../cognosexploration\" class Cognos { <<abstract>> } link Cognos \"../cognos\" Cognos <|-- CognosExploration : extends class BI { <<abstract>> } link BI \"../bi\" BI <|-- Cognos : extends class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- BI : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from CognosExploration 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) cognosDefaultScreenTip ¶ Tooltip text present for the Cognos asset cognosId ¶ ID of the asset in Cognos cognosIsDisabled ¶ Whether the Cognos asset is diabled cognosIsHidden ¶ Whether the Cognos asset is hidden from the ui cognosParentName ¶ Name of the parent asset in Cognos cognosParentQualifiedName ¶ Qualified name of the parent asset in Cognos cognosPath ¶ Path of the asset in Cognos. E.g. /content/folder[@name='Folder Name'] cognosType ¶ Cognos type of the Cognos asset. E.g. report, dashboard, package, etc. cognosVersion ¶ Version of the Cognos asset Relationships ¶ Inherited relationships These relationships are inherited from CognosExploration 's supertypes: anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos inputToAirflowTasks ( AirflowTask ) ¶ Tasks to which this asset provides input. inputToProcesses ( Process ) ¶ Processes to which this asset provides input. inputToSparkJobs ( SparkJob ) ¶ TBC modelImplementedAttributes ( ModelAttribute ) ¶ Attributes implemented by this asset. modelImplementedEntities ( ModelEntity ) ¶ Entities implemented by this asset. outputFromAirflowTasks ( AirflowTask ) ¶ Tasks from which this asset is output. outputFromProcesses ( Process ) ¶ Processes from which this asset is produced as output. outputFromSparkJobs ( SparkJob ) ¶ TBC These relationships are specific to instances of CognosExploration (and all of its subtypes). cognosFolder ( CognosFolder ) ¶ TBC Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/cognosexploration/",
    "scraped_at": "2025-09-15 19:52:08",
    "content_length": 19558,
    "topic": "SSO"
  },
  {
    "title": "SisenseWidget - Developer",
    "content": "SisenseWidget ¶ Instance of a Sisense widget in Atlan. Complete reference This is a complete reference for the SisenseWidget object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. SisenseWidget inherits its attributes and relationships from these other types: classDiagram direction RL class SisenseWidget link SisenseWidget \"../sisensewidget\" class Sisense { <<abstract>> } link Sisense \"../sisense\" Sisense <|-- SisenseWidget : extends class BI { <<abstract>> } link BI \"../bi\" BI <|-- Sisense : extends class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- BI : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from SisenseWidget 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) These attributes are specific to instances of SisenseWidget (and all of its subtypes). sisenseWidgetColumnCount ¶ Number of columns used in this widget. sisenseWidgetDashboardQualifiedName ¶ Unique name of the dashboard in which this widget exists. sisenseWidgetFolderQualifiedName ¶ Unique name of the folder in which this widget exists. sisenseWidgetSize ¶ Size of this widget. sisenseWidgetSubType ¶ Subtype of this widget. Relationships ¶ Inherited relationships These relationships are inherited from SisenseWidget 's supertypes: anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos inputToAirflowTasks ( AirflowTask ) ¶ Tasks to which this asset provides input. inputToProcesses ( Process ) ¶ Processes to which this asset provides input. inputToSparkJobs ( SparkJob ) ¶ TBC modelImplementedAttributes ( ModelAttribute ) ¶ Attributes implemented by this asset. modelImplementedEntities ( ModelEntity ) ¶ Entities implemented by this asset. outputFromAirflowTasks ( AirflowTask ) ¶ Tasks from which this asset is output. outputFromProcesses ( Process ) ¶ Processes from which this asset is produced as output. outputFromSparkJobs ( SparkJob ) ¶ TBC These relationships are specific to instances of SisenseWidget (and all of its subtypes). sisenseDashboard ( SisenseDashboard ) ¶ Dashboard in which this widget exists. sisenseDatamodelTables ( SisenseDatamodelTable ) ¶ TBC sisenseFolder ( SisenseFolder ) ¶ Folder in which this widget exists. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/sisensewidget/",
    "scraped_at": "2025-09-15 19:52:10",
    "content_length": 19552,
    "topic": "SSO"
  },
  {
    "title": "kafka_topic_compression_type - Developer",
    "content": "kafka_topic_compression_type ¶ TBC Complete reference This is a complete reference for the kafka_topic_compression_type enumeration in Atlan, showing all of its possible values. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. Valid values ¶ uncompressed zstd lz4 snappy gzip producer Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/enums/kafka_topic_compression_type/",
    "scraped_at": "2025-09-15 19:52:11",
    "content_length": 596,
    "topic": "API_SDK"
  },
  {
    "title": "IBM Cognos Analytics | Atlan Documentation",
    "content": "On this page Overview: Catalog reports, dashboards, and data modules from IBM Cognos Analytics in Atlan to enable discovery, lineage, and governance for your analytics assets. Get started ​ Follow these steps to connect and catalog IBM Cognos Analytics assets in Atlan: Set up the connector : Configure Atlan to connect to your IBM Cognos Analytics environment. Crawl assets : Extract and catalog IBM Cognos Analytics reports, dashboards, and data modules. Guides ​ Set up on-premises access : Configure Atlan to connect to IBM Cognos Analytics environments that are isolated from the public internet Crawl on-premises IBM Cognos Analytics : Step-by-step instructions for extracting metadata from on-premises IBM Cognos Analytics instances. References ​ What does Atlan crawl from IBM Cognos Analytics? : Detailed list of IBM Cognos Analytics asset types and metadata fields that Atlan can extract and catalog. Troubleshooting ​ Troubleshooting connectivity : Solutions for common issues encountered when connecting Atlan to IBM Cognos Analytics, including permissions and network problems. Get started Guides References Troubleshooting",
    "url": "https://docs.atlan.com/apps/connectors/business-intelligence/ibm-cognos-analytics",
    "scraped_at": "2025-09-15 19:52:12",
    "content_length": 1136,
    "topic": "API_SDK"
  },
  {
    "title": "DataProductSensitivity - Developer",
    "content": "DataProductSensitivity ¶ Information sensitivity of a data product. Complete reference This is a complete reference for the DataProductSensitivity enumeration in Atlan, showing all of its possible values. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. Valid values ¶ Public Internal Confidential Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/enums/dataproductsensitivity/",
    "scraped_at": "2025-09-15 19:52:14",
    "content_length": 609,
    "topic": "API_SDK"
  },
  {
    "title": "Troubleshooting MicroStrategy connectivity | Atlan Documentation",
    "content": "On this page Is the certified status in MicroStrategy mapped to the certificates field in Atlan? ​ No, the certified status in MicroStrategy is not mapped to the certificates field in Atlan. While the MicroStrategy certified field only supports a yes or no status, the certification field in Atlan supports multiple values. However, if your assets have been certified in MicroStrategy, you can view that information in the Properties tab of the asset sidebar in Atlan. Is the owner field in MicroStrategy mapped to the owners field in Atlan? ​ No, the asset owner in MicroStrategy is displayed as the source owner in the Overview section of the asset sidebar in Atlan. How is the upstream lineage for source tables calculated for cubes and reports? ​ Cubes or reports do not directly reference SQL tables or columns - they import attributes and metrics. Attributes can directly reference columns of SQL tables while metrics may reference an attribute, a fact, or another metric. Upstream lineage for cubes and reports is created by aggregating all the directly referenced SQL tables of the attributes and metrics that cubes and reports are sourced from. Why am I not seeing upstream lineage for attributes, facts, and metrics? ​ Atlan currently does not support upstream lineage for schema objects like attributes, facts, and metrics. Why are datasets created in a dossier missing from lineage? ​ Atlan currently does not support lineage for datasets directly created in a dossier due to limitations of the MicroStrategy REST APIs. The complete metadata required for creating lineage is unavailable. Does Atlan support document visualizations? ​ Atlan currently does not support document visualizations due to limitations of the MicroStrategy REST APIs. The complete metadata required for supporting document visualizations is unavailable.",
    "url": "https://docs.atlan.com/apps/connectors/business-intelligence/microstrategy/troubleshooting/troubleshooting-microstrategy-connectivity",
    "scraped_at": "2025-09-15 19:52:15",
    "content_length": 1839,
    "topic": "API_SDK"
  },
  {
    "title": "2 docs tagged with \"stewardship\" | Atlan Documentation",
    "content": "Source owner manager Reference for source owner management capabilities and configuration in stewardship workflows Stewardship Learn how to implement data stewardship in Atlan through automated workflows, policies, and task management.",
    "url": "https://docs.atlan.com/tags/stewardship",
    "scraped_at": "2025-09-15 19:52:16",
    "content_length": 235,
    "topic": "HOW_TO"
  },
  {
    "title": "Troubleshooting Metabase connectivity | Atlan Documentation",
    "content": "On this page Why are assets missing for a collection? ​ Check permissions attached to the Atlan group . The group should have View permission for the collection. Why are Metabase questions missing for a dashboard? ​ Check the Metabase question's collection. Was the collection excluded by the metadata filters configured when crawling Metabase ? If so, you can modify the workflow and re-run it .",
    "url": "https://docs.atlan.com/apps/connectors/business-intelligence/metabase/troubleshooting/troubleshooting-metabase-connectivity",
    "scraped_at": "2025-09-15 19:52:17",
    "content_length": 396,
    "topic": "HOW_TO"
  },
  {
    "title": "BusinessPolicyIncident - Developer",
    "content": "BusinessPolicyIncident ¶ Incident of business policy Complete reference This is a complete reference for the BusinessPolicyIncident object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. BusinessPolicyIncident inherits its attributes and relationships from these other types: classDiagram direction RL class BusinessPolicyIncident link BusinessPolicyIncident \"../businesspolicyincident\" class Incident { <<abstract>> } link Incident \"../incident\" Incident <|-- BusinessPolicyIncident : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Incident : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from BusinessPolicyIncident 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) incidentSeverity ¶ Status of this asset's severity. These attributes are specific to instances of BusinessPolicyIncident (and all of its subtypes). businessPolicyIncidentFilterDSL ¶ Filter ES DSL to denote the associate asset/s involved. businessPolicyIncidentNoncompliantCount ¶ count of noncompliant assets in the incident businessPolicyIncidentRelatedPolicyGUIDs ¶ policy ids related to this incident Relationships ¶ Inherited relationships These relationships are inherited from BusinessPolicyIncident 's supertypes: anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/businesspolicyincident/",
    "scraped_at": "2025-09-15 19:52:19",
    "content_length": 18593,
    "topic": "SSO"
  },
  {
    "title": "Namespace - Developer",
    "content": "Namespace ¶ Base class for query collections and folders. Complete reference This is a complete reference for the Namespace object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. Namespace inherits its attributes and relationships from these other types: classDiagram direction RL class Namespace { <<abstract>> } link Namespace \"../namespace\" class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Namespace : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from Namespace 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) Relationships ¶ Inherited relationships These relationships are inherited from Namespace 's supertypes: anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos These relationships are specific to instances of Namespace (and all of its subtypes). childrenFolders ( Folder ) ¶ Folders that exist within this namespace. childrenQueries ( Query ) ¶ Queries that exist within this namespace. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/namespace/",
    "scraped_at": "2025-09-15 19:52:21",
    "content_length": 18241,
    "topic": "SSO"
  },
  {
    "title": "CognosDashboard - Developer",
    "content": "CognosDashboard ¶ Instance of a Cognos Dashboard in Atlan. Complete reference This is a complete reference for the CognosDashboard object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. CognosDashboard inherits its attributes and relationships from these other types: classDiagram direction RL class CognosDashboard link CognosDashboard \"../cognosdashboard\" class Cognos { <<abstract>> } link Cognos \"../cognos\" Cognos <|-- CognosDashboard : extends class BI { <<abstract>> } link BI \"../bi\" BI <|-- Cognos : extends class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- BI : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from CognosDashboard 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) cognosDefaultScreenTip ¶ Tooltip text present for the Cognos asset cognosId ¶ ID of the asset in Cognos cognosIsDisabled ¶ Whether the Cognos asset is diabled cognosIsHidden ¶ Whether the Cognos asset is hidden from the ui cognosParentName ¶ Name of the parent asset in Cognos cognosParentQualifiedName ¶ Qualified name of the parent asset in Cognos cognosPath ¶ Path of the asset in Cognos. E.g. /content/folder[@name='Folder Name'] cognosType ¶ Cognos type of the Cognos asset. E.g. report, dashboard, package, etc. cognosVersion ¶ Version of the Cognos asset Relationships ¶ Inherited relationships These relationships are inherited from CognosDashboard 's supertypes: anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos inputToAirflowTasks ( AirflowTask ) ¶ Tasks to which this asset provides input. inputToProcesses ( Process ) ¶ Processes to which this asset provides input. inputToSparkJobs ( SparkJob ) ¶ TBC modelImplementedAttributes ( ModelAttribute ) ¶ Attributes implemented by this asset. modelImplementedEntities ( ModelEntity ) ¶ Entities implemented by this asset. outputFromAirflowTasks ( AirflowTask ) ¶ Tasks from which this asset is output. outputFromProcesses ( Process ) ¶ Processes from which this asset is produced as output. outputFromSparkJobs ( SparkJob ) ¶ TBC These relationships are specific to instances of CognosDashboard (and all of its subtypes). cognosFolder ( CognosFolder ) ¶ TBC Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/cognosdashboard/",
    "scraped_at": "2025-09-15 19:52:22",
    "content_length": 19536,
    "topic": "SSO"
  },
  {
    "title": "WorkflowType - Developer",
    "content": "WorkflowType ¶ Defines the possible types of a workflow. Complete reference This is a complete reference for the WorkflowType enumeration in Atlan, showing all of its possible values. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. Valid values ¶ DATA_ACCESS POLICY CHANGE_MANAGEMENT PUBLICATION_MANAGEMENT IMPACT_ANALYSIS REVOKE_DATA_ACCESS Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/enums/workflowtype/",
    "scraped_at": "2025-09-15 19:52:24",
    "content_length": 654,
    "topic": "API_SDK"
  },
  {
    "title": "Update — Apr 19 - Developer",
    "content": "Weekly update ¶ This week we: Added creator() helpers for Airflow assets Further enhanced the (experimental) typedef toolkit Fixed a number of bugs Custom types ¶ In the toolkit, we've added: Further elements for generating the UX. A truncated index option for very long string attributes. We've fixed: The inclusion of attributeDefs in the output for all typedefs, even if empty. Python ¶ We've added: An AssetFilterGroup enum for persona personalization. creator() helper methods for Airflow assets. We've fixed: Accessibility of qualified_name in related glossary objects. Logic for removing parent category relationships through AtlasGlossaryCategory objects. Lineage list performance by avoiding unnecessary page retrievals using the hasMore attribute to short-circuit. An issue where explicit assignment of None to asset attributes in a bulk request followed by a client.asset.save() resulted in exclusion from the request payload. An issue with multiple remove/append relationships where values could be left out of a request due to the underlying dictionary management. Kotlin (and Java) ¶ We've added: creator() helper methods for Airflow assets. We've fixed: Accessibility of qualifiedName so it can still be accessed easily even if it is embedded in uniqueAttributes . Tracking of GUID assignments in batch operations when a real, existing GUID is provided as input in the batch and is thus re-used as-is rather than being re-assigned. Learn more ¶ Python SDK release notes Java SDK release notes Custom packages Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/news/2024/04/19/update--apr-19/",
    "scraped_at": "2025-09-15 19:52:25",
    "content_length": 1700,
    "topic": "API_SDK"
  },
  {
    "title": "AtlasGlossaryTermType - Developer",
    "content": "AtlasGlossaryTermType ¶ Defines type if the Glossary Term Complete reference This is a complete reference for the AtlasGlossaryTermType enumeration in Atlan, showing all of its possible values. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. Valid values ¶ DOCUMENT Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/enums/atlasglossarytermtype/",
    "scraped_at": "2025-09-15 19:52:27",
    "content_length": 578,
    "topic": "API_SDK"
  },
  {
    "title": "DbtSource - Developer",
    "content": "DbtSource ¶ Instance of a dbt source asset in Atlan. Complete reference This is a complete reference for the DbtSource object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. DbtSource inherits its attributes and relationships from these other types: classDiagram direction RL class DbtSource link DbtSource \"../dbtsource\" class Dbt { <<abstract>> } link Dbt \"../dbt\" Dbt <|-- DbtSource : extends class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- Dbt : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from DbtSource 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) dbtAccountName ¶ TBC dbtAlias ¶ TBC dbtConnectionContext ¶ TBC dbtEnvironmentDbtVersion ¶ TBC dbtEnvironmentName ¶ TBC dbtJobLastRun ¶ TBC dbtJobName ¶ TBC dbtJobNextRun ¶ TBC dbtJobNextRunHumanized ¶ TBC dbtJobRuns ¶ List of latest DBT job runs across all environments dbtJobSchedule ¶ TBC dbtJobScheduleCronHumanized ¶ TBC dbtJobStatus ¶ TBC dbtMeta ¶ TBC dbtPackageName ¶ TBC dbtProjectName ¶ TBC dbtSemanticLayerProxyUrl ¶ TBC dbtTags ¶ TBC dbtUniqueId ¶ TBC These attributes are specific to instances of DbtSource (and all of its subtypes). dbtFreshnessCriteria ¶ TBC dbtState ¶ TBC Relationships ¶ Inherited relationships These relationships are inherited from DbtSource 's supertypes: anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos inputToAirflowTasks ( AirflowTask ) ¶ Tasks to which this asset provides input. inputToProcesses ( Process ) ¶ Processes to which this asset provides input. inputToSparkJobs ( SparkJob ) ¶ TBC modelImplementedAttributes ( ModelAttribute ) ¶ Attributes implemented by this asset. modelImplementedEntities ( ModelEntity ) ¶ Entities implemented by this asset. outputFromAirflowTasks ( AirflowTask ) ¶ Tasks from which this asset is output. outputFromProcesses ( Process ) ¶ Processes from which this asset is produced as output. outputFromSparkJobs ( SparkJob ) ¶ TBC These relationships are specific to instances of DbtSource (and all of its subtypes). dbtTests ( DbtTest ) ¶ TBC sqlAsset ( SQL ) ¶ TBC (1) Uses a different name in SDKs primarySqlAsset primary_sql_asset sqlAssets ( SQL ) ¶ TBC Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/dbtsource/",
    "scraped_at": "2025-09-15 19:52:28",
    "content_length": 19530,
    "topic": "SSO"
  },
  {
    "title": "Workflows - Developer",
    "content": "Workflow ¶ These are the model elements in Atlan related to governance workflows. Reference documentation This is reference documentation covering the entire Atlan model. It is not the best place to start when trying to understand how to manage resources in Atlan. classDiagram direction RL class Workflow link Workflow \"../workflow\" class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Workflow : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends class WorkflowRun link WorkflowRun \"../entities/workflowrun\" Asset <|-- WorkflowRun : extends class Task link Task \"../entities/task\" Asset <|-- Task : extends Properties ¶ These attributes are specific to instances of Workflow (and all of its subtypes). workflowActionChoices ¶ List of workflow action choices. workflowConfig ¶ Details of the workflow. workflowCreatedBy ¶ Username of the user who created this workflow. workflowDeletedAt ¶ Deletion time of this workflow. workflowRunExpiresIn ¶ Time duration after which a run of this workflow will expire. workflowStatus ¶ Status of the workflow. workflowTemplateGuid ¶ GUID of the workflow template from which this workflow was created. workflowType ¶ Type of the workflow. workflowUpdatedBy ¶ Username of the user who updated this workflow. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/workflow/",
    "scraped_at": "2025-09-15 19:52:30",
    "content_length": 1497,
    "topic": "API_SDK"
  },
  {
    "title": "Event handlers - Developer",
    "content": "Event handlers ¶ This content has moved! We have moved our samples to a separate, dedicated site: https://solutions.atlan.com . This document is no longer being maintained. The event handlers provide examples to process metadata creation, update and deletion events in real-time: ScoreCalculator calculates a completeness score for an asset any time the asset changes, and populates the result into custom metadata on the asset. VerificationEnforcer checks whether an asset that has been given a certificate of VERIFIED is worthy of it, and if not automatically reverts the certificate to DRAFT with an explanatory message. Setting up the event handlers ¶ To set up the event handlers, follow the instructions in the handling webhooks via AWS Lambda pattern. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/samples/events/",
    "scraped_at": "2025-09-15 19:52:31",
    "content_length": 935,
    "topic": "API_SDK"
  },
  {
    "title": "25 docs tagged with \"rest-api\" | Atlan Documentation",
    "content": "API authentication Learn about api authentication. Atlan's open API Learn about atlan's open api. Connectors and capabilities Learn about connectors and capabilities. Databricks connectivity Learn about troubleshooting databricks connectivity. Generate HAR files and console logs Atlan is built on [REST APIs](https://apidocs.atlan.com/), so you can see the requests being sent by the UI to the API gateway through your browser's developer console. How can Atlan generate upstream lineage from the data warehouse layer? Learn about how can atlan generate upstream lineage from the data warehouse layer?. How do I fully delete glossary terms or archived items? Learn about how do i fully delete glossary terms or archived items?. How does a Snowflake connection know that a table referenced in LookML is actually the same table? Learn about how does a snowflake connection know that a table referenced in lookml is actually the same table?. How to obtain upstream lineage if I connect to a Tableau data asset? Learn about how to obtain upstream lineage if i connect to a tableau data asset?. Integrate Google Cloud Composer/OpenLineage To integrate Google Cloud Composer/OpenLineage with Atlan, complete the following steps. To learn more about OpenLineage, refer to [OpenLineage configuration and facets](/product/connections/references/openlineage-configuration-and-facets). Is there a way to build lineage from NetSuite to Snowflake? Learn about is there a way to build lineage from netsuite to snowflake?. Provider package versions for OpenLineage Learn about provider package versions for openlineage. Set up an AWS private network link to Databricks For all details, see [Databricks documentation](https://docs.databricks.com/administration-guide/cloud-configurations/aws/privatelink.html). Set up Qlik Sense Cloud :::warning Who can do this? You will need your Qlik Sense Cloud tenant administrator to complete these steps - you may not have access yourself. Set up Qlik Sense Enterprise on Windows :::warning Who can do this? You will need your Qlik Sense Enterprise on Windows administrator to complete these steps - you may not have access yourself. Set up Sigma :::warning Who can do this? You will probably need your Sigma administrator to complete these steps - you may not have access yourself. Software development kits (SDKs) Learn about software development kits (sdks). Support and Technical Help Complete guide to getting support, understanding API limits, and accessing technical assistance for Atlan. Supported sources Learn about supported sources. Troubleshooting IBM Cognos Analytics connectivity Learn about troubleshooting ibm cognos analytics connectivity. Troubleshooting Matillion connectivity Learn about troubleshooting matillion connectivity. Troubleshooting Qlik Sense Cloud connectivity Learn about troubleshooting qlik sense cloud connectivity. Troubleshooting Sigma connectivity Learn about troubleshooting sigma connectivity. Troubleshooting Trino connectivity Learn about troubleshooting trino connectivity. Why is my Databricks lineage API not working? Learn about why is my databricks lineage api not working?.",
    "url": "https://docs.atlan.com/tags/rest-api",
    "scraped_at": "2025-09-15 19:52:32",
    "content_length": 3149,
    "topic": "SSO"
  },
  {
    "title": "Crawl Qlik Sense Cloud | Atlan Documentation",
    "content": "On this page Once you have configured the Qlik Sense Cloud permissions , you can establish a connection between Atlan and Qlik Sense Cloud. To crawl metadata from Qlik Sense Cloud, review th e order of operations and then complete the following steps. Select the source ​ To select Qlik Sense Cloud as your source: In the top right of any screen in Atlan, navigate to +New and click New Workflow . From the Marketplace page, click Qlik Sense Assets . In the right panel, click Setup Workflow . Provide your credentials ​ To enter your Qlik Sense Cloud credentials: For Host , enter the tenant URL for your Qlik Sense Cloud instance. For Port , enter the port number for your Qlik Sense Cloud instance. For Authentication , API key is the default option. For API Key , enter the API key you copied from your Qlik Sense Cloud instance. Click the Test Authentication button to confirm connectivity to Qlik Sense Cloud. Once authentication is successful, navigate to the bottom of the screen and click Next . Configure the connection ​ To complete the Qlik Sense Cloud connection configuration: Provide a Connection Name that represents your source environment. For example, you might use values like production , development , gold , or analytics . (Optional) To change the users who are able to manage this connection, change the users or groups listed under Connection Admins . danger If you do not specify any user or group, no one will be able to manage the connection - not even admins. Navigate to the bottom of the screen and click Next to proceed. Configure the crawler ​ Before running the Qlik Sense Cloud crawler, you can further configure it. On the Metadata page, you can override the defaults for any of these options: To select the assets you want to exclude from crawling, click Exclude Spaces . (This will default to no assets if none are specified.) To select the assets you want to include in crawling, click Include Spaces . (This will default to all assets, if none are specified.) Did you know? If an asset appears in both the include and exclude filters, the exclude filter takes precedence. Run the crawler ​ To run the Qlik Sense Cloud crawler, after completing the steps above: To check for any permissions or other configuration issues before running the crawler, click Preflight checks . You can either: To run the crawler once immediately, at the bottom of the screen, click the Run button. To schedule the crawler to run hourly, daily, weekly, or monthly, at the bottom of the screen, click the Schedule Run button. Once the crawler has completed running, you will see the assets on Atlan's asset page! 🎉 Select the source Provide your credentials Configure the connection Configure the crawler Run the crawler",
    "url": "https://docs.atlan.com/apps/connectors/business-intelligence/qlik-sense-cloud/how-tos/crawl-qlik-sense-cloud",
    "scraped_at": "2025-09-15 19:52:33",
    "content_length": 2737,
    "topic": "API_SDK"
  },
  {
    "title": "PowerBI - Developer",
    "content": "Power BI PowerBI ¶ Base class for Power BI assets. Reference documentation This is reference documentation covering the entire Atlan model. It is not the best place to start when trying to understand managing Power BI assets in Atlan. For that, we would suggest starting with either: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. classDiagram direction RL class PowerBI { <<abstract>> } link PowerBI \"../powerbi\" class BI { <<abstract>> } link BI \"../entities/bi\" BI <|-- PowerBI : extends class Catalog { <<abstract>> } link Catalog \"../entities/catalog\" Catalog <|-- BI : extends class Asset { <<abstract>> } link Asset \"../entities/asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../entities/referenceable\" Referenceable <|-- Asset : extends class PowerBIReport link PowerBIReport \"../entities/powerbireport\" PowerBI <|-- PowerBIReport : extends class PowerBIMeasure link PowerBIMeasure \"../entities/powerbimeasure\" PowerBI <|-- PowerBIMeasure : extends class PowerBIColumn link PowerBIColumn \"../entities/powerbicolumn\" PowerBI <|-- PowerBIColumn : extends class PowerBITable link PowerBITable \"../entities/powerbitable\" PowerBI <|-- PowerBITable : extends class PowerBITile link PowerBITile \"../entities/powerbitile\" PowerBI <|-- PowerBITile : extends class PowerBIDatasource link PowerBIDatasource \"../entities/powerbidatasource\" PowerBI <|-- PowerBIDatasource : extends class PowerBIWorkspace link PowerBIWorkspace \"../entities/powerbiworkspace\" PowerBI <|-- PowerBIWorkspace : extends class PowerBIDataset link PowerBIDataset \"../entities/powerbidataset\" PowerBI <|-- PowerBIDataset : extends class PowerBIDashboard link PowerBIDashboard \"../entities/powerbidashboard\" PowerBI <|-- PowerBIDashboard : extends class PowerBIDataflow link PowerBIDataflow \"../entities/powerbidataflow\" PowerBI <|-- PowerBIDataflow : extends class PowerBIPage link PowerBIPage \"../entities/powerbipage\" PowerBI <|-- PowerBIPage : extends class PowerBIDataflowEntityColumn link PowerBIDataflowEntityColumn \"../entities/powerbidataflowentitycolumn\" PowerBI <|-- PowerBIDataflowEntityColumn : extends Properties ¶ These attributes are specific to instances of PowerBI (and all of its subtypes). powerBIEndorsement ¶ Endorsement status of this asset, in Power BI. powerBIFormatString ¶ Format of this asset, as specified in the FORMAT_STRING of the MDX cell property. powerBIIsHidden ¶ Whether this asset is hidden in Power BI (true) or not (false). powerBITableQualifiedName ¶ Unique name of the Power BI table in which this asset exists. Relationships ¶ The following illustrates how the various Power BI objects inter-relate with each other: erDiagram Connection ||..o{ PowerBIWorkspace : \"\" PowerBIWorkspace |o--o{ PowerBIDashboard : dashboards PowerBIWorkspace |o--o{ PowerBIDataflow : dataflows PowerBIWorkspace |o--o{ PowerBIDataset : datasets PowerBIWorkspace |o--o{ PowerBIReport : reports PowerBIDashboard |o--o{ PowerBITile : tiles PowerBIDataflow }o--o{ PowerBIDataset : datasets PowerBIDataflow |o--o{ IPowerBIDataflowEntityColumn : powerBIDataflowEntityColumns PowerBIDataset }o--o{ PowerBIDatasource : datasources PowerBIDataset |o--o{ PowerBIReport : reports PowerBIDataset |o--o{ PowerBITable : tables PowerBIDataset |o--o{ PowerBITile : tiles PowerBIReport |o--o{ PowerBIPage : pages PowerBIReport |o--o{ PowerBITile : tiles PowerBITable |o--o{ PowerBIColumn : columns PowerBITable |o--o{ PowerBIMeasure : measures Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/powerbi/",
    "scraped_at": "2025-09-15 19:52:35",
    "content_length": 3721,
    "topic": "API_SDK"
  },
  {
    "title": "2 docs tagged with \"tutorial\" | Atlan Documentation",
    "content": "Build custom app Create a local file extraction application from scratch using the patterns and tools you learned Run your first sample app Download and run the Hello World sample application to see an Atlan app in action",
    "url": "https://docs.atlan.com/tags/tutorial",
    "scraped_at": "2025-09-15 19:52:37",
    "content_length": 221,
    "topic": "HOW_TO"
  },
  {
    "title": "255 docs tagged with \"data\" | Atlan Documentation",
    "content": "Access archived assets Learn about access archived assets. Add contract impact analysis in GitHub Add contract impact analysis in GitHub <Badge variant=\"preview\" text=\"Private Preview\" link=\"/get-started/references/product-release-stages#private-preview\" /> Add custom metadata <div style={{position: \"relative\", paddingBottom: \"calc(66.33333333333333% + 41px)\", height: 0}}> <iframe src=\"https://demo.arcade.software/1dT1bPneM5fp1O71lb. Add descriptions You can add descriptions to your assets in Atlan, including tables, views, and individual columns. You can even add a description in the form of a [README](/product/integrations). Doing so will enrich your data asset with the relevant contextual information. Add impact analysis in GitLab Learn about add impact analysis in gitlab. Add options :::warning Who can do this? You must be an admin user in Atlan to create options for custom metadata properties. AI and Automation Features Guide to Atlan's AI capabilities and automation features for enhanced data governance and productivity. Atlan AI security Atlan uses [Azure OpenAI Service](https://azure.microsoft.com/en-in/products/cognitive-services/openai-service) to power Atlan AI. Specifically, Atlan uses GPT-4o, a large, pretrained AI model. Attach a tag Atlan allows users to add [tags](/product/capabilities/governance/tags/concepts/what-are-tags) to assets. You can use them to identify key characteristics of assets or group them together for usage or data protection. Automate data profiling ➕Available via the Data Quality Studio package Can Atlan read a dump of SQL statements to create lineage? Atlan supports column-level lineage generation for cloud data warehouses like Snowflake, Amazon Redshift, Google BigQuery, and more. Atlan [mines SQL queries](/. Can I be notified if there is a change in downstream dashboards or a schema drift? You can [create webhooks](/product/integrations/automation/webhooks/how-tos/create-webhooks) in Atlan to configure alerts or triggers for downstream actions for metadata change events, including schema changes. You can also configure alerts for asset creation or deletion events. Can I connect to any source with an ODBC/JDBC driver? A number of Atlan's [supported connectors](/product/connections/references/connectors-and-capabilities) use a JDBC- or REST API-based approach for metadata extraction. If you are attempting to connect to a source with no native integration, [contact Atlan support](/support/submit-request) to share more details about your use case. Can I query any DW/DL? You can query any data warehouse (DW) or data lake (DL) if the integration is supported via Atlan's [supported sources](/product/connections/references/supported-sources#data-sources). Once integrated, you will be able to query the underlying data using the [Insights](/product/capabilities/insights/how-tos/query-data) feature. Can I turn off sample data preview for the entire organization? Atlan recommends that you turn off sample data preview at a connection level. For example, you can configure the [Snowflake crawler](/apps/connectors/data-warehouses/snowflake/how-tos/crawl-snowflake) to prevent users from previewing any Snowflake data. Configure Snowflake data metric functions Configure Snowflake data metric functions <Badge variant=\"preview\" text=\"Private Preview\" link=\"/get-started/references/product-release-stages#private-preview\" /> Connect data sources for Azure-hosted Atlan instances This document provides recommended solutions for integrating Atlan instances hosted on Microsoft Azure with the following:. Connect on-premises databases to Kubernetes You can configure and use [Atlan's metadata-extractor tool](/apps/connectors/database/on-premises-databases/how-tos/set-up-on-premises-database-access) to extract metadata from on-premises databases with Kubernetes deployment architecture, as an alternative to using Docker Compose. Crawl Aiven Kafka Once you have [configured the Aiven Kafka permissions](/apps/connectors/messaging/aiven-kafka/how-tos/set-up-aiven-kafka), you can establish a connection between Atlan and Aiven Kafka. Crawl Amazon Athena To crawl metadata from Amazon Athena, review the [order of operations](/product/connections/how-tos/order-workflows) and then complete the following steps. Crawl Amazon DynamoDB Once you have [configured the Amazon DynamoDB permissions](/apps/connectors/database/amazon-dynamodb/how-tos/set-up-amazon-dynamodb), you can establish a connection between Atlan and Amazon DynamoDB. Crawl Amazon MSK To crawl metadata from Amazon MSK, review the [order of operations](/product/connections/how-tos/order-workflows) and then complete the following steps. Crawl Amazon QuickSight Once you have [configured the Amazon QuickSight permissions](/apps/connectors/business-intelligence/amazon-quicksight/how-tos/set-up-amazon-quicksight),. Crawl Amazon Redshift Once you have configured the [Amazon Redshift access permissions](/apps/connectors/data-warehouses/amazon-redshift/how-tos/set-up-amazon-redshift), you can establish a connection between Atlan and Amazon Redshift. Crawl Apache Kafka Learn about crawl apache kafka. Crawl AWS Glue Once you have configured the [AWS Glue access permissions](/apps/connectors/etl-tools/aws-glue/how-tos/set-up-aws-glue), you can establish a connection between Atlan and AWS Glue. Crawl BigID Configure and run the Atlan BigID workflow to crawl metadata from BigID. Crawl Confluent Kafka Learn about crawl confluent kafka. Crawl Confluent Schema Registry Once you have [configured the Confluent Schema Registry access permissions](/apps/connectors/schema/confluent-schema-registry/how-tos/set-up-confluent-schema-registry), you can establish a connection between Atlan and Confluent Schema Registry. Crawl CrateDB Configure and run the CrateDB crawler to extract metadata from your database Crawl Databricks To crawl metadata from your Databricks instance, review the [order of operations](/product/connections/how-tos/order-workflows) and then complete the following steps. Crawl DataStax Enterprise Crawl DataStax Enterprise Crawl dbt Once you have [configured a dbt Cloud service token](/apps/connectors/etl-tools/dbt/how-tos/set-up-dbt-cloud) or [uploaded your dbt Core project files to S3](/apps/connectors/etl-tools/dbt/how-tos/set-up-dbt-core), you can crawl dbt metadata into Atlan. Crawl Domo Once you have [configured the Domo permissions](/apps/connectors/business-intelligence/domo/how-tos/set-up-domo), you can establish a connection between Atlan and Domo. Crawl Fivetran Learn about crawl fivetran. Crawl Google BigQuery Once you have configured the [Google BigQuery user permissions](/apps/connectors/data-warehouses/google-bigquery/how-tos/set-up-google-bigquery), you can establish a connection between Atlan and Google BigQuery. Crawl Hive To crawl metadata from Hive, review the [order of operations](/product/connections/how-tos/order-workflows) and then complete the following steps. Crawl IBM Cognos Analytics Once you have [configured the IBM Cognos Analytics permissions](/apps/connectors/business-intelligence/ibm-cognos-analytics/how-tos/set-up-ibm-cognos-analytics), you can establish a connection between Atlan and IBM Cognos Analytics. Crawl Looker Once you have configured the [Looker user permissions](/apps/connectors/business-intelligence/looker/how-tos/set-up-looker), you can establish a connection between Atlan and Looker. Crawl Matillion Once you have [configured the Matillion user permissions](/apps/connectors/etl-tools/matillion/how-tos/set-up-matillion), you can establish a connection between Atlan and Matillion. Crawl Metabase Once you have [configured the Metabase user permissions](/apps/connectors/business-intelligence/metabase/how-tos/set-up-metabase), you can establish a connection between Atlan and Metabase. Crawl Microsoft Azure Cosmos DB Once you have [configured the Microsoft Azure Cosmos DB permissions](/apps/connectors/database/microsoft-azure-cosmos-db/how-tos/set-up-microsoft-azure-cosmos-db), you can establish a connection between Atlan and Microsoft Azure Cosmos DB. Crawl Microsoft Azure Data Factory Once you have [configured the Microsoft Azure Data Factory permissions](/apps/connectors/etl-tools/microsoft-azure-data-factory/how-tos/set-up-microsoft-. Crawl Microsoft Azure Event Hubs Once you have [configured the Microsoft Azure Event Hubs permissions](/apps/connectors/messaging/microsoft-azure-event-hubs/how-tos/set-up-microsoft-azure-event-hubs), you can establish a connection between Atlan and Microsoft Azure Event Hubs. Crawl Microsoft Azure Synapse Analytics Once you have [configured the Microsoft Azure Synapse Analytics permissions](/apps/connectors/data-warehouses/microsoft-azure-synapse-analytics/how-tos/set-up-microsoft-azure-synapse-analytics), you can establish a connection between Atlan and Microsoft Azure Synapse Analytics. Crawl Microsoft Power BI Once you have configured the [Microsoft Power BI user permissions](/apps/connectors/business-intelligence/microsoft-power-bi/how-tos/set-up-microsoft-power-bi), you can establish a connection between Atlan and Microsoft Power BI. Crawl Microsoft SQL Server Once you have configured the [Microsoft SQL Server user permissions](/apps/connectors/database/microsoft-sql-server/how-tos/set-up-microsoft-sql-server),. Crawl MicroStrategy Once you have [configured the MicroStrategy permissions](/apps/connectors/business-intelligence/microstrategy/how-tos/set-up-microstrategy), you can establish a connection between Atlan and MicroStrategy. Crawl Mode Once you have [configured the Mode user permissions](/apps/connectors/business-intelligence/mode/how-tos/set-up-mode), you can establish a connection between Atlan and Mode. Crawl MongoDB Once you have [configured the MongoDB permissions](/apps/connectors/database/mongodb/how-tos/set-up-mongodb), you can establish a connection between Atlan and MongoDB. Crawl Monte Carlo Once you have [configured the Monte Carlo permissions](/apps/connectors/observability/monte-carlo/how-tos/set-up-monte-carlo), you can establish a connection between Atlan and Monte Carlo. Crawl MySQL To crawl metadata from MySQL, review the [order of operations](/product/connections/how-tos/order-workflows) and then complete the following steps. Crawl on-premises databases Once you have [set up the metadata-extractor tool](/apps/connectors/database/on-premises-databases/how-tos/set-up-on-premises-database-access), you can extract metadata from your on-premises databases using the following steps. Crawl on-premises Databricks Once you have [set up the databricks-extractor tool](/apps/connectors/database/on-premises-databases/references/supported-connections-for-on-premises-databases), you can extract metadata from your on-premises Databricks instances by completing the following steps. Crawl on-premises IBM Cognos Analytics Once you have [set up the cognos-extractor tool](/apps/connectors/business-intelligence/ibm-cognos-analytics/how-tos/set-up-on-premises-ibm-cognos-analytics-access), you can extract metadata from your on-premises IBM Cognos Analytics instances by completing the following steps. Crawl on-premises Kafka Once you have [set up the kafka-extractor tool](/apps/connectors/messaging/on-premises-event-buses/how-tos/set-up-on-premises-kafka-access), you can extract metadata from your on-premises Kafka instances by completing the following steps. Crawl on-premises Looker Once you have [set up the looker-extractor tool](/apps/connectors/business-intelligence/looker/how-tos/set-up-on-premises-looker-access), you can extract metadata from your on-premises Looker instances using the following steps. Crawl on-premises Tableau Once you have [set up the tableau-extractor tool](/apps/connectors/business-intelligence/tableau/how-tos/set-up-on-premises-tableau-access), you can extract metadata from your on-premises Tableau instances by completing the following steps. Crawl on-premises ThoughtSpot Once you have [set up the thoughtspot-extractor tool](/apps/connectors/business-intelligence/thoughtspot/how-tos/set-up-on-premises-thoughtspot-access),. Crawl Oracle Once you have configured the [Oracle user permissions](/apps/connectors/database/oracle/how-tos/set-up-oracle#create-user-in-oracle), you can establish a connection between Atlan and Oracle. Crawl PostgreSQL To crawl metadata from PostgreSQL, review the [order of operations](/product/connections/how-tos/order-workflows) and then complete the following steps. Crawl PrestoSQL Once you have configured the [PrestoSQL user permissions](/apps/connectors/database/prestosql/how-tos/set-up-prestosql), you can establish a connection between Atlan and PrestoSQL. Crawl Qlik Sense Cloud Once you have [configured the Qlik Sense Cloud permissions](/apps/connectors/business-intelligence/qlik-sense-cloud/how-tos/set-up-qlik-sense-cloud), you can establish a connection between Atlan and Qlik Sense Cloud. Crawl Qlik Sense Enterprise on Windows Once you have [configured the Qlik Sense Enterprise on Windows permissions](/apps/connectors/business-intelligence/qlik-sense-enterprise-on-windows/how-tos/how-. Crawl Redash Once you have [configured the Redash permissions](/apps/connectors/business-intelligence/redash/how-tos/set-up-redash), you can establish a connection between Atlan and Redash. Crawl Redpanda Kafka Once you have [configured the Redpanda Kafka permissions](/apps/connectors/messaging/redpanda-kafka/how-tos/set-up-redpanda-kafka), you can establish a connection between Atlan and Redpanda Kafka. Crawl Salesforce Once you have configured the [Salesforce user permissions](/apps/connectors/crm/salesforce/how-tos/set-up-salesforce), you can establish a connection between Atlan and Salesforce. Crawl SAP HANA Once you have [configured the SAP HANA permissions](/apps/connectors/database/sap-hana/how-tos/set-up-sap-hana), you can establish a connection between Atlan and SAP HANA. Crawl Sigma Once you have [configured the Sigma permissions](/apps/connectors/business-intelligence/sigma/how-tos/set-up-sigma), you can establish a connection between Atlan and Sigma. Crawl Sisense Once you have [configured the Sisense permissions](/apps/connectors/business-intelligence/sisense/how-tos/set-up-sisense), you can establish a connection between Atlan and Sisense. Crawl Snowflake To crawl metadata from Snowflake, review the [order of operations](/product/connections/how-tos/order-workflows) and then complete the following steps. Crawl Soda Once you have [configured the Soda permissions](/apps/connectors/observability/soda/how-tos/set-up-soda), you can establish a connection between Atlan and Soda. Crawl Tableau To crawl metadata from Tableau, review the [order of operations](/product/connections/how-tos/order-workflows) and then complete the following steps. Crawl Teradata Once you have configured the [Teradata user permissions](/apps/connectors/database/teradata/how-tos/set-up-teradata), you can establish a connection between Atlan and Teradata. Crawl ThoughtSpot Once you have [configured the ThoughtSpot permissions](/apps/connectors/business-intelligence/thoughtspot/how-tos/set-up-thoughtspot), you can establish a connection between Atlan and ThoughtSpot. Crawl Trino To crawl metadata from Trino, review the [order of operations](/product/connections/how-tos/order-workflows) and then complete the following steps. Create announcements Adding an announcement to your data asset helps you call attention to an important feature or notify others about a change coming down the pipeline. Since announcements in Atlan display the time stamp and author information, you can easily identify whether an announcement is still relevant and who to ask for questions. Data Connections and Integration Complete guide for connecting Atlan to your data sources, managing integrations, and troubleshooting connection issues. Data Models Data models provide a framework to describe how data is structured, organized, and related within a system. It acts as a blueprint for organizations to design their business applications and processes. Data models can be of different types: relational, hierarchical, entity relationship, and network. Data Pipelines Learn how to connect your data pipelines to Atlan. Explore ETL tools, workflow orchestration, and lineage tracking to build a comprehensive view of your data movement. Disable data access :::warning Who can do this? You will need to be an admin user in Atlan to configure these options. Discovery FAQs Frequently asked questions about Atlan's Discovery capabilities. Does lineage only cover calculated fields for Tableau dashboards? Atlan displays upstream as well as downstream lineage for [Tableau dashboards](/apps/connectors/business-intelligence/tableau/references/what-does-atlan-crawl-f. Download impacted assets in Microsoft Excel Once you've [connected Atlan with Microsoft Excel](/product/integrations/collaboration/spreadsheets/how-tos/integrate-atlan-with-microsoft-excel), you can download impacted assets in Microsoft Excel. This can help you assess the downstream impact of any changes made to an upstream asset for [impact analysis](/product/capabilities/lineage/concepts/what-is-lineage#impact-analysis). Enable Snowflake OAuth Atlan supports [Snowflake OAuth-based authentication](https://docs.snowflake.com/user-guide/oauth-snowflake-overview) for [Snowflake](/apps/connectors/data-ware. Enable SSO for Amazon Redshift You will need to [create a client application in Okta](https://help.okta.com/en-us/Content/Topics/Apps/Apps_App_Integration_Wizard_OIDC.htm) to use for [configuring the identity provider in AWS](/apps/connectors/data-warehouses/amazon-redshift/how-tos/enable-sso-for-amazon-redshift). Enable SSO for Google BigQuery Credentials are used to obtain an access token from Google's authorization servers for authentication in Atlan. Enrich Atlan through dbt Beyond the default mapped [dbt Cloud](/apps/connectors/etl-tools/dbt/references/what-does-atlan-crawl-from-dbt-cloud) or [dbt Core](/apps/connectors/etl-tools/dbt/references/what-does-atlan-crawl-from-dbt-core) properties, you can update any of Atlan's metadata attributes (except for `name`, `tenantId`, and `qualifiedName`) through your dbt model's `meta` property. extract lineage and usage from Databricks Once you have [crawled assets from Databricks](/apps/connectors/data-warehouses/databricks/how-tos/crawl-databricks), you can retrieve lineage from [Unity Catalog](https://docs.databricks.com/data-governance/unity-catalog/index.html) and [usage and popularity metrics](/product/capabilities/usage-and-popularity/how-tos/interpret-usage-metrics) from [query history](https://docs.databricks.com/api/workspace/queryhistory/list) or system tables. This is supported for all [three authentication methods](/apps/connectors/data-warehouses/databricks/how-tos/set-up-databricks): personal access token, AWS service principal, and Azure service principal. extract on-premises Databricks lineage Once you have [set up the databricks-extractor tool](/apps/connectors/data-warehouses/databricks/how-tos/set-up-on-premises-databricks-lineage-extraction), you can extract lineage from your on-premises Databricks instances by completing the following steps. Find assets by usage Data teams often lack clarity on which data assets can be considered trustworthy, whether these are frequently used, the freshness of the data itself, or how critical these are for enrichment and governance. How can I identify an Insights query in my database access log? Atlan appends the product name Atlan and a unique ID at the end of each query in a comment. This can help you identify queries from Insights in your database access logs. How can I use personas to update a term in a glossary? By default, any user in Atlan can view all [glossaries](/product/capabilities/governance/glossary/concepts/what-is-a-glossary) and nested categories and terms in the _Glossary_ section. Implement OpenLineage in Airflow operators If you're using an Airflow operator supported by OpenLineage, the OpenLineage events will contain input and output details. This means that you do not have to modify your current DAG implementation and Atlan will be able to generate data lineage. Integrate Amazon MWAA/OpenLineage To learn more about OpenLineage, refer to [OpenLineage configuration and facets](/product/connections/references/openlineage-configuration-and-facets). Integrate Apache Airflow/OpenLineage To integrate Apache Airflow/OpenLineage with Atlan, complete the following steps. To learn more about OpenLineage, refer to [OpenLineage configuration and facets](/product/connections/references/openlineage-configuration-and-facets). Integrate Apache Spark/OpenLineage Atlan extracts job-level operational metadata from Apache Spark and generates job lineage through OpenLineage. To learn more about OpenLineage, refer to [OpenLineage configuration and facets](/product/connections/references/openlineage-configuration-and-facets). Integrate Atlan with Microsoft Excel The Atlan add-in for Microsoft Excel makes it easy to enrich metadata in bulk for your data assets in Atlan. You can use the Atlan add-in for both the web and desktop versions of Microsoft Excel. Integrate Jira Data Center You will need to [configure an incoming link](https://confluence.atlassian.com/adminjiraserver/configure-an-incoming-link-1115659067.html) with an external application - in this case, Atlan. This will allow Atlan to access Jira data, which means that Jira will act as the OAuth provider. Integrate ServiceNow If your Atlan admin has [enabled the governance workflows and inbox module](/product/capabilities/governance/stewardship/how-tos/automate-data-governance) in your Atlan workspace, you can create a ServiceNow integration to allow your users to [grant or revoke data access](/product/capabilities/governance/stewardship/how-tos/automate-data-governance) for governed assets in Atlan or any other data source. Interpret usage metrics Atlan currently supports usage and popularity metrics for the following connectors: Link your account To [export assets to and bulk enrich metadata from](/product/integrations/collaboration/spreadsheets/how-tos/export-assets) a supported spreadsheet tool,. Link your ServiceNow account To request or revoke data access through ServiceNow inside Atlan, you may first need to link your ServiceNow account. This is done automatically for the user that [set up the ServiceNow integration](/product/integrations/project-management/servicenow/how-tos/integrate-servicenow), but not for other users. Manage custom metadata structures :::warning Who can do this? You must be an admin user to manage custom metadata structures, including defining new ones. Manage Databricks tags You must have a [Unity Catalog-enabled workspace](https://docs.databricks.com/en/data-governance/unity-catalog/get-started.html) and SQL warehouse configured to import Databricks tags in Atlan. Manage Google BigQuery tags Atlan imports your [Google BigQuery tags](https://docs.getdbt.com/references/resource-configs/tags) and allows you to update your Google BigQuery assets with the imported tags. Note that object tagging in Google BigQuery currently requires [Enterprise edition or higher](https://cloud.google.com/bigquery/docs/editions-intro#editions_features). Manage Snowflake tags You can import your Snowflake tags to Atlan through one-way tag sync. The synced Snowflake tags will be matched to corresponding tags in Atlan through case-insensitive name match and your Snowflake assets will be enriched with their synced tags from Snowflake. Migrate from dbt to Atlan action The dbt-action is a custom action designed to perform impact analysis on changes to your dbt models in a [GitHub](/apps/connectors/etl-tools/dbt/how-tos/. Mine Amazon Redshift Once you have [crawled assets from Amazon Redshift](/apps/connectors/data-warehouses/amazon-redshift/how-tos/crawl-amazon-redshift), you can mine its query history to construct lineage and retrieve [usage and popularity metrics](/product/capabilities/usage-and-popularity/how-tos/interpret-usage-metrics). Mine Google BigQuery Once you have [crawled assets from Google BigQuery](/apps/connectors/data-warehouses/google-bigquery/how-tos/crawl-google-bigquery), you can mine its query history to construct lineage. Mine Microsoft Azure Synapse Analytics Learn about mine microsoft azure synapse analytics. Mine queries through S3 Once you have crawled assets from a supported connector, you can mine query history. Mine Snowflake Once you have [crawled assets from Snowflake](/apps/connectors/data-warehouses/snowflake/how-tos/crawl-snowflake), you can mine its query history to construct lineage. Mine Teradata Once you have [crawled assets from Teradata](/apps/connectors/database/teradata/how-tos/crawl-teradata), you can mine its query history to construct lineage. order workflows The [order of operations](/product/connections/how-tos/order-workflows#order-of-operations) you run in Atlan is important. Follow the specific workflow sequence outlined below when crawling [data tools](/product/connections/references/supported-sources). The right order particularly ensures that lineage is constructed without needing to rerun crawlers. Preflight checks for Amazon Redshift Before [running the Amazon Redshift crawler](/apps/connectors/data-warehouses/amazon-redshift/how-tos/crawl-amazon-redshift), you can run [preflight chec. Preflight checks for Anomalo This check tests for the validity of the [host name URL and API key](/apps/connectors/observability/anomalo/how-tos/integrate-anomalo) you provided. If Atlan is unable to connect to your Anomalo instance, this may indicate that your credentials are either incorrect or invalid. Preflight checks for Databricks Before [running the Databricks crawler](/apps/connectors/data-warehouses/databricks/how-tos/crawl-databricks), you can run [preflight checks](/product/co. Preflight checks for DataStax Enterprise Preflight checks for DataStax Enterprise Preflight checks for Domo Atlan uses the [DataSet API](https://developer.domo.com/portal/72ae9b3e80374-list-data-sets) to fetch dataset metadata from Domo. Preflight checks for Fivetran Learn about preflight checks for fivetran. Preflight checks for Google BigQuery Each request requires an OAuth 2.0 access token generated via the [service account key](https://cloud.google.com/docs/authentication#service-accounts). Preflight checks for Hive Before [running the Hive crawler](/apps/connectors/database/hive/how-tos/crawl-hive), you can run [preflight checks](/product/connections/concepts/what-a. Preflight checks for Metabase Before [running the Metabase crawler](/apps/connectors/business-intelligence/metabase/how-tos/crawl-metabase), you can run [preflight checks](/product/co. Preflight checks for Microsoft Azure Data Factory Before [running the Microsoft Azure Data Factory crawler](/apps/connectors/etl-tools/microsoft-azure-data-factory/how-tos/crawl-microsoft-azure-data-fact. Preflight checks for Microsoft Azure Synapse Analytics This check is performed for both [basic](/apps/connectors/data-warehouses/microsoft-azure-synapse-analytics/how-tos/set-up-microsoft-azure-synapse-analytics) and [service principal](/apps/connectors/data-warehouses/microsoft-azure-synapse-analytics/how-tos/set-up-microsoft-azure-synapse-analytics) authentication method. Preflight checks for Microsoft SQL Server Before [running the Microsoft SQL Server crawler](/apps/connectors/database/microsoft-sql-server/how-tos/crawl-microsoft-sql-server), you can run [prefli. Preflight checks for Mode Before [running the Mode crawler](/apps/connectors/business-intelligence/mode/how-tos/crawl-mode), you can run [preflight checks](/product/connections/co. Preflight checks for MySQL Before [running the MySQL crawler](/apps/connectors/database/mysql/how-tos/crawl-mysql), you can run [preflight checks](/product/connections/concepts/wha. Preflight checks for Oracle Before [running the Oracle crawler](/apps/connectors/database/oracle/how-tos/crawl-oracle), you can run [preflight checks](/product/connections/concepts/. Preflight checks for PostgreSQL Before [running the PostgreSQL crawler](/apps/connectors/database/postgresql/how-tos/crawl-postgresql), you can run [preflight checks](/product/connectio. Preflight checks for PrestoSQL Before [running the PrestoSQL crawler](/apps/connectors/database/prestosql/how-tos/crawl-prestosql), you can run [preflight checks](/product/connections/. Preflight checks for Qlik Sense Cloud This check tests for access to datasets and other Qlik objects. Preflight checks for SAP S/4HANA Preflight checks for SAP S/4HANA <Badge variant=\"preview\" text=\"Private Preview\" link=\"/get-started/references/product-release-stages#private-preview\" /> Preflight checks for Snowflake Before [running the Snowflake crawler](/apps/connectors/data-warehouses/snowflake/how-tos/crawl-snowflake), you can run [preflight checks](/product/conne. Preflight checks for Soda Learn about preflight checks for soda Preflight checks for Teradata Before [running the Teradata crawler](/apps/connectors/database/teradata/how-tos/crawl-teradata), you can run [preflight checks](/product/connections/con. Preflight checks for Trino Before [running the Trino crawler](/apps/connectors/database/trino/how-tos/crawl-trino), you can run [preflight checks](/product/connections/concepts/wha. provide SSL certificates SSL (Secure Sockets Layer) encryption helps establish a secure connection between your data source and Atlan. Atlan currently only supports SSL certificates for [crawling Tableau](/apps/connectors/business-intelligence/tableau/how-tos/crawl-tableau). Schedule a query You must [save your query](/product/capabilities/insights/how-tos/save-and-share-queries) before you can schedule it. Your [SMTP configuration](/product/integrations/communication/smtp-and-announcements/how-tos/configure-smtp) must also be in a working state to send results to recipients. Search and discover assets Atlan is a living catalog of all your data assets and knowledge. It lets you quickly discover and access your data, along with the tribal knowledge and business context. Security The Secure Agent is designed with multiple security controls to protect metadata, credentials, and communication between systems. This document outlines its security mechanisms across authentication, encryption, container security, network security, and logging and monitoring. Security and Compliance Complete guide to Atlan's security features, compliance certifications, and data protection capabilities. Set up a private network link to Amazon Athena :::warning Who can do this? You will need your Amazon Athena or AWS administrator involved - you may not have access yourself to complete these steps. Set up Aiven Kafka Atlan supports the [S3 extraction method](/apps/connectors/messaging/on-premises-event-buses/how-tos/set-up-on-premises-kafka-access) for fetching metadata from Aiven Kafka. This method uses Atlan's kafka-extractor tool to fetch metadata. Set up Amazon DynamoDB Learn about set up amazon dynamodb. Set up Amazon MSK Learn about set up amazon msk. Set up Amazon QuickSight Learn about set up amazon quicksight. Set up Amazon Redshift :::warning Who can do this? You will need your Amazon Redshift administrator to run these commands - you may not have access yourself. Set up Amazon S3 Create AWS IAM permissions and credentials for Atlan to access and catalog your S3 buckets and objects. Set up an Azure private network link to Databricks For all details, see [Databricks documentation](https://learn.microsoft.com/en-us/azure/databricks/administration-guide/cloud-configurations/azure/private-link-simplified?source=recommendations#create-the-workspace-and-private-endpoints-in-the-azure-portal-ui). Set up Anomalo Atlan supports the API authentication method for fetching metadata from [Anomalo](https://docs.anomalo.com/integrations/atlan-integration). This method uses an API key to fetch metadata. Set up AWS Glue Learn about set up aws glue. Set up BigID Create a BigID system user and API token for Atlan integration. Set up Confluent Kafka Atlan supports the API authentication method for fetching metadata from Confluent Kafka. This method uses an API key and API secret to fetch metadata. Set up Confluent Schema Registry :::warning Who can do this? You will probably need your Schema Registry administrator to complete these steps - you may not have access yourself. Set up Databricks Atlan supports three authentication methods for fetching metadata from Databricks. You can set up any of the following authentication methods:. Set up DataStax Enterprise Set up DataStax Enterprise Set up dbt Cloud :::warning Who can do this? You will probably need your dbt Cloud administrator to complete these steps - you may not have access yourself. Set up Domo :::warning Who can do this? You will need your Domo administrator to complete these steps - you may not have access yourself. Set up Fivetran Learn about set up fivetran. Set up Google BigQuery You must be a Google BigQuery administrator to run these commands. For more information, see [Google Cloud's Granting, changing, and revoking access to resources](https://cloud.google.com/iam/docs/granting-changing-revoking-access). Set up Google Cloud Storage Configure Google Cloud Storage for secure metadata ingestion with Atlan. Set up Hive :::warning Who can do this? You will need your Hadoop administrator to run these commands - you may not have access yourself. Set up IBM Cognos Analytics :::warning Who can do this? You must be an IBM Cognos Analytics administrator to complete these steps - you may not have access yourself. Set up Inventory reports Create Inventory report for Amazon S3 in case of inventory based ingestion through the crawler. Set up Microsoft Azure Cosmos DB If your Microsoft Azure Cosmos DB deployment includes a mix of vCore- and RU-based accounts, you must configure both to fetch metadata. You can then use the _vCore and RU_ deployment option to [crawl your Microsoft Azure Cosmos DB assets](/apps/connectors/database/microsoft-azure-cosmos-db/how-tos/crawl-microsoft-azure-cosmos-db). Set up Microsoft Azure Data Factory Atlan supports service principal authentication for fetching metadata from Microsoft Azure Data Factory. This method requires a client ID, client secret, and tenant ID to fetch metadata. Set up Microsoft Azure Event Hubs Atlan supports the following authentication methods for Microsoft Azure Event Hubs:. Set up Microsoft Azure Synapse Analytics Atlan supports crawling the following with the Microsoft Azure Synapse Analytics package:. Set up Microsoft Power BI This guide outlines how to set up Microsoft Power BI so it can connect with Atlan for metadata extraction and lineage tracking. Set up Microsoft SQL Server :::warning Who can do this? You will probably need your Microsoft SQL Server administrator to run these commands - you may not have access yourself. Set up MicroStrategy Atlan supports the basic authentication method for fetching metadata from MicroStrategy. This method uses a username and password to fetch metadata. Set up MongoDB Atlan supports the basic authentication method for fetching metadata from MongoDB. This method uses a [username and password](#create-database-user-in-mongodb) to fetch metadata. Set up Monte Carlo :::warning Who can do this? You will probably need your Monte Carlo [account owner](https://docs.getmontecarlo.com/docs/authorizationmanaged-roles-and-groups). Set up MySQL :::warning Who can do this? You will probably need your MySQL administrator to run these commands - you may not have access yourself. Set up on-premises database access In such cases you may want to decouple the extraction of metadata from its ingestion in Atlan. This approach gives you full control over your resources and metadata transfer to Atlan. Set up on-premises Databricks access In some cases you will not be able to expose your Databricks instance for Atlan to crawl and ingest metadata. For example, this may happen when security requirements restrict access to sensitive, mission-critical data. Set up on-premises IBM Cognos Analytics access :::warning Who can do this? You will need access to a machine that can run Docker on-premises. You will also need your IBM Cognos Analytics instance details,. Set up on-premises Kafka access In some cases you won't be able to expose your Kafka instance for Atlan to crawl and ingest metadata. For example, this may happen when security requirements restrict access to sensitive, mission-critical data. Set up on-premises Looker access In some cases you won't be able to expose your Looker instance for Atlan to crawl and ingest metadata. For example, this may happen when security requirements restrict access to sensitive, mission-critical data. Set up on-premises Microsoft Azure Synapse Analytics miner access In some cases you will not be able to expose your Microsoft Azure Synapse Analytics instance for Atlan to [mine query history from the Query Store](/apps/connectors/data-warehouses/microsoft-azure-synapse-analytics/how-tos/set-up-microsoft-azure-synapse-analytics). For example, this may happen when security requirements restrict access to sensitive, mission-critical data. Set up on-premises Tableau access In some cases you may not be able to expose your Tableau instance for Atlan to crawl and ingest metadata. For example, this may happen when security requirements restrict access to sensitive, mission-critical data. Set up on-premises Teradata miner access In some cases you will not be able to expose your Teradata instance for Atlan to mine query history. For example, this may happen when security requirements restrict access to sensitive, mission-critical data. Set up on-premises ThoughtSpot access In some cases you will not be able to expose your ThoughtSpot instance for Atlan to crawl and ingest metadata. For example, this may happen when security requirements restrict access to sensitive, mission-critical data. Set up Oracle :::warning Who can do this? You need your Oracle database administrator or a similar role to run these commands - you may not have access yourself. Set up PostgreSQL :::warning Who can do this? You will probably need your PostgreSQL administrator to run these commands - you may not have access yourself. Set up PrestoSQL Learn about set up prestosql. Set up Redash :::warning Who can do this? You will probably need your Redash administrator to complete the following steps - you may not have access yourself. Set up Redpanda Kafka Atlan supports the [S3 extraction method](/apps/connectors/messaging/on-premises-event-buses/how-tos/set-up-on-premises-kafka-access) for fetching metadata from Redpanda Kafka. This method uses Atlan's kafka-extractor tool to fetch metadata. Set up SAP HANA :::warning Who can do this? You will probably need your SAP HANA administrator to run these commands - you may not have access yourself. Set up Sisense Atlan supports the basic authentication method for fetching metadata from Sisense. This method uses a username and password to fetch metadata. Set up Snowflake :::warning Who can do this? You need your Snowflake administrator to run these commands - you may not have access yourself. :::. Set up Soda :::warning Who can do this? You will need your [Soda Cloud administrator](https://docs.soda.io/soda-cloud/roles-and-rights.html) to complete these steps -. Set up Tableau :::warning Who can do this? You will probably need your Tableau administrator to run these commands - you may not have access yourself. Set up Teradata :::warning Who can do this? You will probably need your Teradata administrator to run these commands - you may not have access yourself. SSO integration with PingFederate using SAML To use both IdP- and SP-initiated SSO, add both the URLs mentioned above. Star assets :::warning Who can do this? Anyone with access to Atlan - admin, member, or guest user - can star assets. Supported connections for on-premises databases The metadata-extractor tool supports the following connection types. Tags and Metadata Management Complete guide to managing tags, classifications, and metadata in Atlan for effective data governance and organization. Troubleshooting data models What are the known limitations of data models in Atlan? Troubleshooting Jira What fields are supported when creating tickets or requesting access? Troubleshooting lineage So you've crawled your source, and mined the queries, but lineage is missing. Why? update column metadata in Google Sheets Once you've [connected Atlan with Google Sheets](/product/integrations/collaboration/spreadsheets/how-tos/integrate-atlan-with-google-sheets), you can import the column metadata for all your data assets in Atlan and make changes to them directly in Google Sheets. Update column metadata in Microsoft Excel Once you've [connected Atlan with Microsoft Excel](/product/integrations/collaboration/spreadsheets/how-tos/integrate-atlan-with-microsoft-excel), you can import the column metadata for all your data assets in Atlan and make changes to them directly in Microsoft Excel. Use the filters menu You can refine the search for your assets in Atlan using the filters menu. Add filters to your asset search to find assets that are more relevant to you. view data models Once you have [ingested your ER model assets in Atlan](/product/capabilities/data-models/concepts/what-are-data-models), you can:. View query logs You can also view additional details and run status for each query and use filters to track specific queries. Query logs are persisted throughout the lifecycle of the Atlan instance for your organization. What are Power BI processes on the lineage graph? Note that process entities may not have a counterpart entity in Microsoft Power BI. Consider these to be nodes that you can enrich with metadata to describe the process or relationship between two Microsoft Power BI assets. What does Atlan crawl from Amazon Athena? Atlan crawls and maps the following assets and properties from Amazon Athena. What does Atlan crawl from Amazon DynamoDB? Atlan crawls and maps the following assets and properties from Amazon DynamoDB. Atlan also currently supports lineage between Amazon DynamoDB as a source to supported data warehouses as destinations, as enriched by Fivetran. What does Atlan crawl from Amazon QuickSight? Atlan currently supports lineage for the Amazon QuickSight connector to the following data sources:. What does Atlan crawl from Amazon Redshift? Atlan crawls and maps the following assets and properties from Amazon Redshift. What does Atlan crawl from Anomalo? Once you have [integrated Anomalo](/apps/connectors/observability/anomalo/how-tos/integrate-anomalo), Atlan will receive webhook events when checks are executed in Anomalo. These checks will be cataloged in Atlan to create a relationship with existing assets using the association information from the check. What does Atlan crawl from Apache Spark/OpenLineage? Atlan maps the following assets and properties from Apache Spark/OpenLineage. Asset lineage support depends on the data sources that OpenLineage supports. What does Atlan crawl from AWS Glue? Atlan crawls and maps the following assets and properties from AWS Glue. What does Atlan crawl from BigID? Reference guide for BigID metadata crawled by Atlan. What does Atlan crawl from Databricks? Atlan crawls and maps the following assets and properties from Databricks. What does Atlan crawl from DataStax Enterprise? What does Atlan crawl from DataStax Enterprise? What does Atlan crawl from Domo? Atlan supports lineage for the following asset types:. What does Atlan crawl from Fivetran? Learn about what does atlan crawl from fivetran?. What does Atlan crawl from Google BigQuery? Atlan doesn't run any table scans. Atlan leverages the table preview options from [Google BigQuery](https://cloud.google.com/bigquery/docs/best-practices-costs#preview-data) that enable you to view data for free and without affecting any quotas using the `tabledata.list` API. Hence, [table](/apps/connectors/data-warehouses/google-bigquery/references/what-does-atlan-crawl-from-google-bigquery#tables) asset previews in Atlan are already cost-optimized. However, this doesn't apply to [views](/apps/connectors/data-warehouses/google-bigquery/references/what-does-atlan-crawl-from-google-bigquery#views) and [materialized views](/apps/connectors/data-warehouses/google-bigquery/references/what-does-atlan-crawl-from-google-bigquery#materialized-views). What does Atlan crawl from Hive? Atlan crawls and maps the following assets and properties from Hive. What does Atlan crawl from Microsoft Azure Cosmos DB? Once you have [crawled Microsoft Azure Cosmos DB](/apps/connectors/database/microsoft-azure-cosmos-db/how-tos/crawl-microsoft-azure-cosmos-db), you can [. What does Atlan crawl from Microsoft Azure Data Factory? Atlan crawls and maps the following assets and properties from Microsoft Azure Data Factory. What does Atlan crawl from Microsoft Azure Synapse Analytics? Atlan crawls and maps the following assets and properties from Microsoft Azure Synapse Analytics. Atlan also currently supports view-level lineage and cross-source lineage between BI tools and SQL sources. What does Atlan crawl from Microsoft SQL Server? Atlan crawls and maps the following assets and properties from Microsoft SQL Server. What does Atlan crawl from MongoDB? Atlan crawls and maps the following assets and properties from MongoDB. Atlan currently does not support lineage for MongoDB assets. What does Atlan crawl from MySQL? Atlan crawls and maps the following assets and properties from MySQL. What does Atlan crawl from Oracle? Atlan crawls and maps the following assets and properties from Oracle. What does Atlan crawl from PostgreSQL? Atlan crawls and maps the following assets and properties from PostgreSQL. What does Atlan crawl from PrestoSQL? Atlan crawls and maps the following assets and properties from PrestoSQL. What does Atlan crawl from Qlik Sense Cloud? Atlan crawls and maps the following assets and properties from Qlik Sense Cloud. What does Atlan crawl from SAP ECC? What does Atlan crawl from SAP ECC? <Badge variant=\"preview\" text=\"Private Preview\" link=\"/get-started/references/product-release-stages#private-preview\" /> What does Atlan crawl from SAP S/4HANA? What does Atlan crawl from SAP S/4HANA? <Badge variant=\"preview\" text=\"Private Preview\" link=\"/get-started/references/product-release-stages#private-preview\" /> What does Atlan crawl from Sisense? Atlan crawls and maps the following assets and properties from Sisense. What does Atlan crawl from Snowflake? Atlan crawls and maps the following assets and properties from Snowflake. What does Atlan crawl from Soda? Atlan crawls datasets and then filters out all the datasets without any checks. It then crawls the checks associated with each of the datasets with checks from Soda. These checks are cataloged in Atlan to create a relationship with existing assets using the association information from the dataset. What does Atlan crawl from Tableau? Atlan crawls and maps the following assets and properties from Tableau. What does Atlan crawl from Teradata? Atlan crawls and maps the following assets and properties from Teradata. What does Atlan crawl from Trino? Atlan crawls and maps the following assets and properties from Trino. What is included in the Jira integration? With two of your most important workspaces connected, you can save time and improve the way you track issues for your data. What is included in the Microsoft Teams integration? With two of your most important workspaces connected, you can save time and improve the way you share data assets with your team. What is included in the Slack integration? Learn about the features and capabilities of the Slack integration with Atlan. What is the default permission for a glossary? By default, users can search and discover [glossaries](/product/capabilities/governance/glossary/concepts/what-is-a-glossary) in Atlan, irrespective of their user role. The rationale being that glossaries are meant to be accessible to all users who want to understand business context. You can define a [glossary policy](/product/capabilities/governance/custom-metadata/how-tos/control-access-metadata-data#glossary-policies) to control what users can do with glossary metadata and [create a persona](/product/capabilities/governance/access-control/how-tos/create-a-persona) to curate edit access. What is the difference between a Power BI data source and dataflow? Learn about what is the difference between a power bi data source and dataflow?. What lineage does Atlan extract from Matillion? Atlan uses Matillion's metadata API to generate lineage associated with [Matillion connectors](https://www.matillion.com/connectors). This is particularly useful for creating lineage between different tools. What lineage does Atlan extract from Microsoft Azure Data Factory? Atlan uses the [Microsoft Azure Data Factory REST API](https://learn.microsoft.com/en-us/rest/api/datafactory/operation-groups?view=rest-datafactory-2018-06-01). What lineage does Atlan extract from Microsoft Azure Synapse Analytics? Learn about what lineage does atlan extract from microsoft azure synapse analytics?. What lineage does Atlan extract from Microsoft Power BI? This document helps you understand how Atlan generates lineage to upstream SQL sources for your Microsoft Power BI assets using a custom query parser, and the steps you can take while developing reports and dashboards in Microsoft Power BI to create seamless lineage generation. When does Atlan become a personal data processor or subprocessor? Atlan personnel do not have access to any customer instance unless specifically provided by the customer. Accordingly, in the event that a customer instance contains personal data and Atlan personnel are provided access to that instance, Atlan may act as a personal data processor. In addition, depending on whether the customer is a data controller or processor, Atlan may act as a data processor or subprocessor, respectively. Why do I only see tables from the same schema to join from in a visual query? When [creating a visual query](/product/capabilities/insights/how-tos/query-data), Atlan recommends that you do not select a database or schema in the editor context. Leaving both blank will allow you to discover more tables to join in the Visual Query Builder. Why does the description from Salesforce not show up in Atlan? Atlan supports extracting and displaying description metadata for your [Salesforce objects](/apps/connectors/crm/salesforce/references/what-does-atlan-crawl-from-salesforce). Why is lineage available for table level but not column level? The home icon on top of any asset on the [lineage graph](/product/capabilities/lineage/how-tos/view-lineage) indicates the current asset in focus. The lineage view will be different based on the asset you're viewing. To view column-level lineage for [supported sources](/product/connections/references/supported-sources), click **view columns** and then select a column to view data flows for that particular asset. Workflows and Data Processing Everything about managing data workflows, understanding lineage generation, and optimizing data processing pipelines in Atlan.",
    "url": "https://docs.atlan.com/tags/data",
    "scraped_at": "2025-09-15 19:52:38",
    "content_length": 51416,
    "topic": "SSO"
  },
  {
    "title": "ColumnProcess - Developer",
    "content": "ColumnProcess ¶ Instance of a column-level lineage process in Atlan. Inputs and outputs of these processes should be columns. Complete reference This is a complete reference for the ColumnProcess object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. ColumnProcess inherits its attributes and relationships from these other types: classDiagram direction RL class ColumnProcess link ColumnProcess \"../columnprocess\" class Process link Process \"../process\" Process <|-- ColumnProcess : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Process : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from ColumnProcess 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) additionalEtlContext ¶ TBC ast ¶ TBC code ¶ TBC sql ¶ TBC Relationships ¶ Inherited relationships These relationships are inherited from ColumnProcess 's supertypes: anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos adfActivity ( AdfActivity ) ¶ TBC airflowTasks ( AirflowTask ) ¶ TBC columnProcesses ( ColumnProcess ) ¶ TBC fivetranConnector ( FivetranConnector ) ¶ TBC inputs ( Catalog ) ¶ TBC matillionComponent ( MatillionComponent ) ¶ TBC outputs ( Catalog ) ¶ TBC powerBIDataflow ( PowerBIDataflow ) ¶ TBC sparkJobs ( SparkJob ) ¶ TBC These relationships are specific to instances of ColumnProcess (and all of its subtypes). process ( Process ) ¶ Process in which this task exists. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/columnprocess/",
    "scraped_at": "2025-09-15 19:52:39",
    "content_length": 18698,
    "topic": "SSO"
  },
  {
    "title": "TableauDashboard - Developer",
    "content": "TableauDashboard ¶ Instance of a Tableau dashboard in Atlan. These are collections of several views, letting you compare a variety of data simultaneously. Complete reference This is a complete reference for the TableauDashboard object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. TableauDashboard inherits its attributes and relationships from these other types: classDiagram direction RL class TableauDashboard link TableauDashboard \"../tableaudashboard\" class Tableau { <<abstract>> } link Tableau \"../tableau\" Tableau <|-- TableauDashboard : extends class BI { <<abstract>> } link BI \"../bi\" BI <|-- Tableau : extends class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- BI : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from TableauDashboard 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) These attributes are specific to instances of TableauDashboard (and all of its subtypes). projectHierarchy ¶ List of top-level projects and their nested child projects. projectQualifiedName ¶ Unique name of the project in which this dashboard exists. siteQualifiedName ¶ Unique name of the site in which this dashboard exists. topLevelProjectQualifiedName ¶ Unique name of the top-level project in which this dashboard exists. workbookQualifiedName ¶ Unique name of the workbook in which this dashboard exists. Relationships ¶ Inherited relationships These relationships are inherited from TableauDashboard 's supertypes: anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos inputToAirflowTasks ( AirflowTask ) ¶ Tasks to which this asset provides input. inputToProcesses ( Process ) ¶ Processes to which this asset provides input. inputToSparkJobs ( SparkJob ) ¶ TBC modelImplementedAttributes ( ModelAttribute ) ¶ Attributes implemented by this asset. modelImplementedEntities ( ModelEntity ) ¶ Entities implemented by this asset. outputFromAirflowTasks ( AirflowTask ) ¶ Tasks from which this asset is output. outputFromProcesses ( Process ) ¶ Processes from which this asset is produced as output. outputFromSparkJobs ( SparkJob ) ¶ TBC These relationships are specific to instances of TableauDashboard (and all of its subtypes). workbook ( TableauWorkbook ) ¶ Workbook in which this dashboard exists. worksheets ( TableauWorksheet ) ¶ Worksheets that use this dashboard. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/tableaudashboard/",
    "scraped_at": "2025-09-15 19:52:41",
    "content_length": 19701,
    "topic": "SSO"
  },
  {
    "title": "Referenceable - Developer",
    "content": "Referenceable ¶ Base class for everything in Atlan. Complete reference This is a complete reference for the Referenceable object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. Referenceable is the root of inheritance, and has no supertypes itself. Properties ¶ These attributes are specific to instances of Referenceable (and all of its subtypes). typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/referenceable/",
    "scraped_at": "2025-09-15 19:52:43",
    "content_length": 2621,
    "topic": "API_SDK"
  },
  {
    "title": "Query - Developer",
    "content": "Query ¶ Instance of a query in Atlan. Complete reference This is a complete reference for the Query object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. Query inherits its attributes and relationships from these other types: classDiagram direction RL class Query link Query \"../query\" class SQL { <<abstract>> } link SQL \"../sql\" SQL <|-- Query : extends class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- SQL : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from Query 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) calculationViewName ¶ Simple name of the calculation view in which this SQL asset exists, or empty if it does not exist within a calculation view. calculationViewQualifiedName ¶ Unique name of the calculation view in which this SQL asset exists, or empty if it does not exist within a calculation view. databaseName ¶ Simple name of the database in which this SQL asset exists, or empty if it does not exist within a database. databaseQualifiedName ¶ Unique name of the database in which this SQL asset exists, or empty if it does not exist within a database. isProfiled ¶ Whether this asset has been profiled (true) or not (false). lastProfiledAt ¶ Time (epoch) at which this asset was last profiled, in milliseconds. queryCount ¶ Number of times this asset has been queried. queryCountUpdatedAt ¶ Time (epoch) at which the query count was last updated, in milliseconds. queryUserCount ¶ Number of unique users who have queried this asset. queryUserMap ¶ Map of unique users who have queried this asset to the number of times they have queried it. schemaName ¶ Simple name of the schema in which this SQL asset exists, or empty if it does not exist within a schema. schemaQualifiedName ¶ Unique name of the schema in which this SQL asset exists, or empty if it does not exist within a schema. tableName ¶ Simple name of the table in which this SQL asset exists, or empty if it does not exist within a table. tableQualifiedName ¶ Unique name of the table in which this SQL asset exists, or empty if it does not exist within a table. viewName ¶ Simple name of the view in which this SQL asset exists, or empty if it does not exist within a view. viewQualifiedName ¶ Unique name of the view in which this SQL asset exists, or empty if it does not exist within a view. These attributes are specific to instances of Query (and all of its subtypes). collectionQualifiedName ¶ TBC defaultDatabaseQualifiedName ¶ TBC defaultSchemaQualifiedName ¶ TBC isPrivate ¶ TBC isSqlSnippet ¶ TBC isVisualQuery ¶ TBC longRawQuery ¶ TBC parentQualifiedName ¶ TBC rawQuery ¶ TBC rawQueryText ¶ TBC variablesSchemaBase64 ¶ TBC visualBuilderSchemaBase64 ¶ TBC Relationships ¶ Inherited relationships These relationships are inherited from Query 's supertypes: anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos inputToAirflowTasks ( AirflowTask ) ¶ Tasks to which this asset provides input. inputToProcesses ( Process ) ¶ Processes to which this asset provides input. inputToSparkJobs ( SparkJob ) ¶ TBC modelImplementedAttributes ( ModelAttribute ) ¶ Attributes implemented by this asset. modelImplementedEntities ( ModelEntity ) ¶ Entities implemented by this asset. outputFromAirflowTasks ( AirflowTask ) ¶ Tasks from which this asset is output. outputFromProcesses ( Process ) ¶ Processes from which this asset is produced as output. outputFromSparkJobs ( SparkJob ) ¶ TBC dbtModels ( DbtModel ) ¶ TBC dbtSources ( DbtSource ) ¶ TBC dbtTests ( DbtTest ) ¶ TBC sqlDBTSources ( DbtSource ) ¶ TBC sqlDbtModels ( DbtModel ) ¶ TBC These relationships are specific to instances of Query (and all of its subtypes). columns ( Column ) ¶ TBC parent ( Namespace ) ¶ TBC tables ( Table ) ¶ TBC views ( View ) ¶ TBC Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/query/",
    "scraped_at": "2025-09-15 19:52:44",
    "content_length": 21135,
    "topic": "SSO"
  },
  {
    "title": "SisenseDashboard - Developer",
    "content": "SisenseDashboard ¶ Instance of a Sisense dashboard in Atlan. These allow you to place multiple widgets on a single page. Complete reference This is a complete reference for the SisenseDashboard object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. SisenseDashboard inherits its attributes and relationships from these other types: classDiagram direction RL class SisenseDashboard link SisenseDashboard \"../sisensedashboard\" class Sisense { <<abstract>> } link Sisense \"../sisense\" Sisense <|-- SisenseDashboard : extends class BI { <<abstract>> } link BI \"../bi\" BI <|-- Sisense : extends class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- BI : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from SisenseDashboard 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) These attributes are specific to instances of SisenseDashboard (and all of its subtypes). sisenseDashboardFolderQualifiedName ¶ Unique name of the folder in which this dashboard exists. sisenseDashboardWidgetCount ¶ Number of widgets in this dashboard. Relationships ¶ Inherited relationships These relationships are inherited from SisenseDashboard 's supertypes: anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos inputToAirflowTasks ( AirflowTask ) ¶ Tasks to which this asset provides input. inputToProcesses ( Process ) ¶ Processes to which this asset provides input. inputToSparkJobs ( SparkJob ) ¶ TBC modelImplementedAttributes ( ModelAttribute ) ¶ Attributes implemented by this asset. modelImplementedEntities ( ModelEntity ) ¶ Entities implemented by this asset. outputFromAirflowTasks ( AirflowTask ) ¶ Tasks from which this asset is output. outputFromProcesses ( Process ) ¶ Processes from which this asset is produced as output. outputFromSparkJobs ( SparkJob ) ¶ TBC These relationships are specific to instances of SisenseDashboard (and all of its subtypes). sisenseDatamodels ( SisenseDatamodel ) ¶ TBC sisenseFolder ( SisenseFolder ) ¶ Folder in which this dashboard exists. sisenseWidgets ( SisenseWidget ) ¶ Widgets that exist in this dashboard. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/sisensedashboard/",
    "scraped_at": "2025-09-15 19:52:46",
    "content_length": 19458,
    "topic": "SSO"
  },
  {
    "title": "Crawl Tableau | Atlan Documentation",
    "content": "On this page Once you have configured Tableau , you can establish a connection between Atlan and Tableau. (If you are also using a private network for Tableau, you will need to set that up first , too.) To crawl metadata from Tableau, review the order of operations and then complete the following steps. Select the source ​ To select Tableau as your source: In the top right of any screen, navigate to New and then click New Workflow . From the list of packages, select Tableau Assets and click on Setup Workflow . Provide credentials ​ In Direct extraction, Atlan connects to Tableau and crawls metadata directly. In Offline extraction, you need to first extract metadata yourself and make it available in S3 . In Agent extraction, Atlan’s secure agent executes metadata extraction within the organization's environment. Direct extraction method ​ To enter your Tableau credentials: For Host Name , enter the host name of your Tableau Online or Tableau Server instance (or the private DNS name if your Tableau Server instance uses an SSL certificate ). For Port , enter the port number of your Tableau instance. For Authentication , choose how you would like to connect to Tableau: For Basic authentication, enter the Username and Password you use to log in to Tableau. For Personal Access Token authentication, enter the Personal Access Token Name and Personal Access Token Value you generated _Create_a_personal_access_token). For JWT Bearer authentication, enter your Tableau Server username or Tableau Online email address for Username , and the Client ID , Secret ID , and Secret Value you copied from the connected app in Tableau. (Optional) For SSL , keep the default Enabled to use HTTPS or click Disabled to use HTTP. For Site , enter the name of the site you want to crawl. (If left blank, the default site will be used.) danger If you are using Tableau Online, the site is required for Atlan to authenticate properly. (Optional) For SSL certificate , this is only required if your Tableau Server instance uses a self-signed or an internal CA SSL certificate , paste a supported SSL certificate in the recommended format . At the bottom of the form, click the Test Authentication button to confirm connectivity to Tableau using these details. When successful, at the bottom of the screen click the Next button. Offline extraction method ​ Atlan also supports the offline extraction method for fetching metadata from Tableau. This method uses Atlan's tableau-extractor tool to fetch metadata. You will need to first extract the metadata yourself and then make it available in S3 . To enter your S3 details: For Bucket name , enter the name of your S3 bucket. For Bucket prefix , enter the S3 prefix under which all the metadata files exist. These include dashboards/result-0.json , workbooks/result-0.json , and so on. (Optional) For Bucket region , enter the name of the S3 region. When complete, at the bottom of the screen, click Next . Agent extraction method ​ Atlan supports using a Secure Agent for fetching metadata from Tableau. To use a Secure Agent, follow these steps: Select the Agent tab. Configure the Tableau data source by adding the secret keys for your secret store. For details on the required fields, refer to the Direct extraction section. Complete the Secure Agent configuration by following the instructions in the How to configure Secure Agent for workflow execution guide. Click Next after completing the configuration. Configure the connection ​ To complete the Tableau connection configuration: Provide a Connection Name that represents your source environment. For example, you might want to use values like production , development , gold , or analytics . (Optional) To change the users able to manage this connection, change the users or groups listed under Connection Admins . danger If you do not specify any user or group, nobody will be able to manage the connection - not even admins. Configure the crawler ​ Before running the Tableau crawler, you can further configure it. On the Metadata page, you can override the defaults for any of these options: To select the Tableau projects you want to include in crawling, click Include Projects . (This will default to all assets, if none are specified.) To select the Tableau projects you want to exclude from crawling, click Exclude Projects . (This will default to no assets, if none are specified.) To have the crawler ignore Tableau projects based on a naming convention, specify a regular expression in the Exclude Projects Regex field. To check for any permissions or other configuration issues before running the crawler, click Preflight checks . Did you know? If a project appears in both the include and exclude filters, the exclude filter takes precedence. (The Exclude Projects Regex also takes precedence.) Configure advanced controls ​ Before running the Tableau crawler, you can also configure advanced controls for the crawler. On the Advanced page, you can override the defaults for any of these options: For Alternate Host URL , enter the protocol and host name to be used for viewing assets directly in Tableau. For Crawl Unpublished Worksheets and Dashboards , click Yes to enable crawling hidden worksheets and dashboards or No to skip crawling them. For Hidden Datasource Fields , click Yes to enable crawling hidden datasource fields or No to skip crawling them. Crawl embedded dashboards: Embedded dashboard here means linking or displaying a dashboard inside another dashboard by providing a link to the dashboard in a Web Page item of the embedding dashboard. Click Yes to enable relationships between different embedded dashboards. Click No to skip creating relationships between embedded dashboards. Run the crawler ​ To run the Tableau crawler, after completing the steps above: You can either: To run the crawler once immediately, at the bottom of the screen, click the Run button. To schedule the crawler to run hourly, daily, weekly, or monthly, at the bottom of the screen, click the Schedule Run button. Once the crawler has completed running, you will see the assets in Atlan's asset page! 🎉 Select the source Provide credentials Configure the connection Configure the crawler Configure advanced controls Run the crawler",
    "url": "https://docs.atlan.com/apps/connectors/business-intelligence/tableau/how-tos/crawl-tableau",
    "scraped_at": "2025-09-15 19:52:47",
    "content_length": 6247,
    "topic": "API_SDK"
  },
  {
    "title": "LookerQuery - Developer",
    "content": "LookerQuery ¶ Deprecated. Complete reference This is a complete reference for the LookerQuery object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. LookerQuery inherits its attributes and relationships from these other types: classDiagram direction RL class LookerQuery link LookerQuery \"../lookerquery\" class Looker { <<abstract>> } link Looker \"../looker\" Looker <|-- LookerQuery : extends class BI { <<abstract>> } link BI \"../bi\" BI <|-- Looker : extends class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- BI : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from LookerQuery 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) These attributes are specific to instances of LookerQuery (and all of its subtypes). fields ¶ Deprecated. sourceDefinition ¶ Deprecated. sourceDefinitionDatabase ¶ Deprecated. sourceDefinitionSchema ¶ Deprecated. Relationships ¶ Inherited relationships These relationships are inherited from LookerQuery 's supertypes: anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos inputToAirflowTasks ( AirflowTask ) ¶ Tasks to which this asset provides input. inputToProcesses ( Process ) ¶ Processes to which this asset provides input. inputToSparkJobs ( SparkJob ) ¶ TBC modelImplementedAttributes ( ModelAttribute ) ¶ Attributes implemented by this asset. modelImplementedEntities ( ModelEntity ) ¶ Entities implemented by this asset. outputFromAirflowTasks ( AirflowTask ) ¶ Tasks from which this asset is output. outputFromProcesses ( Process ) ¶ Processes from which this asset is produced as output. outputFromSparkJobs ( SparkJob ) ¶ TBC These relationships are specific to instances of LookerQuery (and all of its subtypes). looks ( LookerLook ) ¶ Deprecated. model ( LookerModel ) ¶ Deprecated. tiles ( LookerTile ) ¶ Deprecated. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/lookerquery/",
    "scraped_at": "2025-09-15 19:52:49",
    "content_length": 19188,
    "topic": "SSO"
  },
  {
    "title": "Manage API assets - Developer",
    "content": "Manage API assets ¶ Operations on API assets (specs, paths, objects, queries, fields). Example OpenAPI crawler For a jump-start, read more about an example for crawling OpenAPI specifications , or grab the code from: atlanhq/atlan-java-samples In general, these should be: Created in top-down order (connection, then spec/object/query, then path/field) Deleted in bottom-up order (paths/fields, then specs/objects/queries, then connections) 1 erDiagram Connection ||--o{ APISpec : contains APISpec ||--o{ APIPath : contains Connection ||--o{ APIObject : contains Connection ||--o{ APIQuery : contains APIObject ||--o{ APIField : contains APIQuery ||--o{ APIField : contains APIObject o|..o{ APIField : refers APIObject o|..o{ APIQuery : refers Asset structure ¶ Connection ¶ 7.0.0 4.0.0 An API connection requires a name and qualifiedName . For creation, specific settings are also required to distinguish it as an API connection rather than another type of connection. In addition, at least one of adminRoles , adminGroups , or adminUsers must be provided. Java Python Kotlin Raw REST API Create an API connection 1 2 3 4 5 6 7 8 9 10 String adminRoleGuid = client . getRoleCache (). getIdForName ( \"$admin\" ); // (1) Connection connection = Connection . creator ( // (2) \"api-connection\" , // (3) AtlanConnectorType . API , // (4) List . of ( adminRoleGuid ), // (5) List . of ( \"group2\" ), // (6) List . of ( \"jsmith\" )) // (7) . build (); AssetMutationResponse response = connection . save ( client ); // (8) String connectionQualifiedName = response . getCreatedAssets (). get ( 0 ). getQualifiedName (); // (9) Retrieve the GUID for the admin role, to use later for defining the roles that can administer the connection. Build up the minimum request to create a connection. Provide a human-readable name for your connection, such as production or development . Set the type of connection to API. List the workspace roles that should be able to administer the connection (or null if none). All users with that workspace role (current and future) will be administrators of the connection. Note that the values here need to be the GUID(s) of the workspace role(s). At least one of adminRoles , adminGroups , or adminUsers must be provided. List the group names that can administer this connection (or null if none). All users within that group (current and future) will be administrators of the connection. Note that the values here are the name(s) of the group(s). At least one of adminRoles , adminGroups , or adminUsers must be provided. List the user names that can administer this connection (or null if none). Note that the values here are the username(s) of the user(s). At least one of adminRoles , adminGroups , or adminUsers must be provided. Actually call Atlan to create the connection. Because this operation will persist the asset in Atlan, you must provide it an AtlanClient through which to connect to the tenant. Retrieve the qualifiedName for use in subsequent creation calls. (You'd probably want to do some null checking first.) Create an API connection 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from pyatlan.client.atlan import AtlanClient from pyatlan.model.assets import Connection , APISpec , APIPath , APIObject , APIQuery , APIField from pyatlan.model.enums import AtlanConnectorType , APIQueryParamTypeEnum client = AtlanClient () admin_role_guid = client . role_cache . get_id_for_name ( \"$admin\" ) # (1) connection = Connection . creator ( # (2) client = client , # (3) name = \"api-connection\" , # (4) connector_type = AtlanConnectorType . API , # (5) admin_roles = [ admin_role_guid ], # (6) admin_groups = [ \"group2\" ], # (7) admin_users = [ \"jsmith\" ] # (8) ) response = client . asset . save ( connection ) # (9) connection_qualified_name = response . assets_created ( asset_type = Connection )[ 0 ] . qualified_name # (10) Retrieve the GUID for the admin role, to use later for defining the roles that can administer the connection. Build up the minimum request to create a connection. You must provide a client instance. Provide a human-readable name for your connection, such as production or development . Set the type of connection to API. List the workspace roles that should be able to administer the connection (or None if none). All users with that workspace role (current and future) will be administrators of the connection. Note that the values here need to be the GUID(s) of the workspace role(s). At least one of admin_roles , admin_groups , or admin_users must be provided. List the group names that can administer this connection (or None if none). All users within that group (current and future) will be administrators of the connection. Note that the values here are the name(s) of the group(s). At least one of admin_roles , admin_groups , or admin_users must be provided. List the user names that can administer this connection (or None if none). Note that the values here are the username(s) of the user(s). At least one of admin_roles , admin_groups , or admin_users must be provided. Actually call Atlan to create the connection. Retrieve the qualified_name for use in subsequent creation calls. (You'd probably want to do some null checking first.) Create an API connection 1 2 3 4 5 6 7 8 9 10 val adminRoleGuid = client . roleCache . getIdForName ( \"\\ $ admin \" ); // (1) val connection = Connection . creator ( // (2) \"api-connection\" , // (3) AtlanConnectorType . API , // (4) listOf ( adminRoleGuid ), // (5) listOf ( \"group2\" ), // (6) listOf ( \"jsmith\" )) // (7) . build () val response = connection . save ( client ) // (8) val connectionQualifiedName = response . createdAssets [ 0 ] . qualifiedName // (9) Retrieve the GUID for the admin role, to use later for defining the roles that can administer the connection. Build up the minimum request to create a connection. Provide a human-readable name for your connection, such as production or development . Set the type of connection to API. List the workspace roles that should be able to administer the connection (or null if none). All users with that workspace role (current and future) will be administrators of the connection. Note that the values here need to be the GUID(s) of the workspace role(s). At least one of adminRoles , adminGroups , or adminUsers must be provided. List the group names that can administer this connection (or null if none). All users within that group (current and future) will be administrators of the connection. Note that the values here are the name(s) of the group(s). At least one of adminRoles , adminGroups , or adminUsers must be provided. List the user names that can administer this connection (or null if none). Note that the values here are the username(s) of the user(s). At least one of adminRoles , adminGroups , or adminUsers must be provided. Actually call Atlan to create the connection. Because this operation will persist the asset in Atlan, you must provide it an AtlanClient through which to connect to the tenant. Retrieve the qualifiedName for use in subsequent creation calls. (You'd probably want to do some null checking first.) POST /api/meta/entity/bulk 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 { \"entities\" : [ { \"typeName\" : \"Connection\" , // (1) \"attributes\" : { \"name\" : \"api-connection\" , // (2) \"connectorName\" : \"api\" , // (3) \"qualifiedName\" : \"default/api/123456789\" , // (4) \"category\" : \"API\" , // (5) \"adminRoles\" : [ // (6) \"e7ae0295-c60a-469a-bd2c-fb903943aa02\" ], \"adminGroups\" : [ // (7) \"group2\" ], \"adminUsers\" : [ // (8) \"jsmith\" ] } } ] } The typeName must be exactly Connection . Human-readable name for your connection, such as production or development . The connectorName must be exactly api . The qualifiedName should follow the pattern: default/api/<epoch> , where <epoch> is the time in milliseconds at which the connection is being created. The category must be API . List any workspace roles that can administer this connection. All users with that workspace role (current and future) will be administrators of the connection. Note that the values here need to be the GUID(s) of the workspace role(s). At least one of adminRoles , adminGroups , or adminUsers must be provided. List any groups that can administer this connection. All users within that group (current and future) will be administrators of the connection. Note that the values here are the name(s) of the group(s). At least one of adminRoles , adminGroups , or adminUsers must be provided. List any users that can administer this connection. Note that the values here are the username(s) of the user(s). At least one of adminRoles , adminGroups , or adminUsers must be provided. Access policies Atlan creates the policies that grant access to a connection, including the ability to retrieve the connection and to create assets within it, asynchronously. It can take several seconds (even up to approximately 30 seconds) before these are in place after creating the connection. You may therefore need to wait before you'll be able to create the assets below within the connection. To confirm access, retrieve the connection after it has been created. The SDKs' retry loops will automatically retry until the connection can be successfully retrieved. At that point, your API token has permission to create the other assets. Note: if you are reusing an existing connection rather than creating one via your API token, you must give your API token a persona that has access to that connection. Otherwise all attempts to create, read, update, or delete assets within that connection will fail due to a lack of permissions. APISpec ¶ 2.0.0 4.0.0 An API spec requires a name and a qualifiedName . For creation, you also need to specify the connectionQualifiedName of the connection for the spec. Java Python Kotlin Raw REST API Create an API spec 11 12 13 14 15 16 APISpec apiSpec = APISpec . creator ( // (1) \"api-spec\" , // (2) connectionQualifiedName ) // (3) . build (); AssetMutationResponse response = apiSpec . save ( client ); // (4) apiSpec = response . getResult ( apiSpec ); // (5) Build up the minimum request to create a spec. Provide a human-readable name for your spec. Provide the qualifiedName of the connection for this spec. Actually call Atlan to create the spec. Because this operation will persist the asset in Atlan, you must provide it an AtlanClient through which to connect to the tenant. Retrieve the created spec for use in subsequent creation calls. (You'd probably want to do some null checking first.) Create an API spec 17 18 19 20 21 22 apiSpec = APISpec . creator ( # (1) name = \"api-spec\" , # (2) connection_qualified_name = connection_qualified_name # (3) ) response = client . asset . save ( apiSpec ) # (4) spec_qualified_name = response . assets_created ( asset_type = APISpec )[ 0 ] . qualified_name # (5) Build up the minimum request to create an spec. Provide a human-readable name for your spec. Provide the qualified_name of the connection for this spec. Actually call Atlan to create the spec. Retrieve the created spec for use in subsequent creation calls. (You'd probably want to do some null checking first.) Create an API spec 11 12 13 14 15 16 var apiSpec = APISpec . creator ( // (1) \"api-spec\" , // (2) connectionQualifiedName ) // (3) . build () val response = apiSpec . save ( client ) // (4) apiSpec = response . getResult ( apiSpec ) // (5) Build up the minimum request to create a spec. Provide a human-readable name for your spec. Provide the qualifiedName of the connection for this spec. Actually call Atlan to create the spec. Because this operation will persist the asset in Atlan, you must provide it an AtlanClient through which to connect to the tenant. Retrieve the created spec for use in subsequent creation calls. (You'd probably want to do some null checking first.) POST /api/meta/entity/bulk 1 2 3 4 5 6 7 8 9 10 11 12 13 { \"entities\" : [ { \"typeName\" : \"APISpec\" , // (1) \"attributes\" : { \"name\" : \"api-spec\" , // (2) \"qualifiedName\" : \"default/api/123456789/api-spec\" , // (3) \"connectionQualifiedName\" : \"default/api/123456789\" , // (4) \"connectorName\" : \"api\" // (5) } } ] } The typeName must be exactly APISpec . Human-readable name for your spec. The qualifiedName should follow the pattern: default/api/<epoch>/<specName> , where default/api/<epoch> is the qualifiedName of the connection for this spec and <specName> is the name of this spec. The connectionQualifiedName must be the exact qualifiedName of the connection for this spec. The connectorName must be exactly api . APIPath ¶ 2.0.0 4.0.0 An API path requires a name and a qualifiedName . For creation, you also need to specify the connectionQualifiedName of the connection for the path and the apiSpec the path is in. If the name of your path does no give the URI of the endpoint it represents, be sure to also specify the apiPathRawURI . Java Python Kotlin Raw REST API Create an API path 18 19 20 21 22 APIPath apiPath = APIPath . creator ( // (1) \"/api/path\" , // (2) apiSpec ) // (3) . build (); AssetMutationResponse response = apiPath . save ( client ); // (4) Build up the minimum request to create a path. Provide the unique endpoint URI for this path. (The SDK will also use this by default as the name for the path. If you want a different name, simply add a .name() call onto the builder with your preferred name.) Provide the spec for this path. If you did not already have the object, you could also use APISpec.refByGuid() with the GUID of the spec, or APISpec.refByQualifiedName() with the qualifiedName of the spec. Actually call Atlan to create the path. Because this operation will persist the asset in Atlan, you must provide it an AtlanClient through which to connect to the tenant. Create an API path 23 24 25 26 27 apiPath = APIPath . creator ( # (1) path_raw_uri = \"/api/path\" , # (2) spec_qualified_name = spec_qualified_name # (3) ) response = client . asset . save ( apiPath ) # (4) Build up the minimum request to create an path. Provide the unique endpoint URI for this path. Provide the qualified_name of the API path. Actually call Atlan to create the path. Create an API path 18 19 20 21 22 val apiPath = APIPath . creator ( // (1) \"/api/path\" , // (2) apiSpec ) // (3) . build () val response = apiPath . save ( client ) // (4) Build up the minimum request to create a path. Provide the unique endpoint URI for this path. (The SDK will also use this by default as the name for the path. If you want a different name, simply add a .name() call onto the builder with your preferred name.) Provide the spec for this path. If you did not already have the object, you could also use APISpec.refByGuid() with the GUID of the spec, or APISpec.refByQualifiedName() with the qualifiedName of the spec. Actually call Atlan to create the path. Because this operation will persist the asset in Atlan, you must provide it an AtlanClient through which to connect to the tenant. POST /api/meta/entity/bulk 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 { \"entities\" : [ { \"typeName\" : \"APIPath\" , // (1) \"attributes\" : { \"name\" : \"/api/path\" , // (2) \"apiPathRawURI\" : \"/api/path\" , // (3) \"qualifiedName\" : \"default/api/123456789/api-spec/api/path\" , // (4) \"connectionQualifiedName\" : \"default/api/123456789\" , // (5) \"connectorName\" : \"api\" , // (6) \"apiSpec\" : { // (7) \"typeName\" : \"APISpec\" , // (8) \"uniqueAttributes\" : { // (9) \"qualifiedName\" : \"default/api/123456789/api-spec\" } } } } ] } The typeName must be exactly APIPath . Human-readable name for your path. The apiPathRawURI should be the unique endpoint URI this path represents. The qualifiedName should follow the pattern: default/api/<epoch>/<specName>/<apiPathRawURI> , where default/api/<epoch>/<specName> is the qualifiedName of the spec for this path and <apiPathRawURI> is the unique endpoint URI the path represents. The connectionQualifiedName must be the exact qualifiedName of the connection for this path. The connectorName must be exactly api . The spec in which this path exists is embedded in the apiSpec attribute. The typeName for this embedded reference must be APISpec . To complete the reference, you must include a uniqueAttributes object with the qualifiedName of the spec. Note: the spec must already exist in Atlan before creating the path. APIObject ¶ 2.5.3 An API object requires a name and a qualifiedName . For creation, you also need to specify the connectionQualifiedName of the connection for the object. Optionally, you can also provide the count of API field that exists in the object as apiFieldCount . Python Raw REST API Create an API object 17 18 19 20 21 22 23 apiObject = APIObject . creator ( # (1) name = \"api-object\" , # (2) connection_qualified_name = connection_qualified_name , # (3) api_field_count = 2 # (4) ) response = client . asset . save ( apiObject ) # (5) object_qualified_name = response . assets_created ( asset_type = APIObject )[ 0 ] . qualified_name # (6) Build up the minimum request to create an object. Provide a human-readable name for your object. Provide the qualified_name of the connection for this object. Provide the count of fields that exist in the object. Use None if no field exists in this object. Actually call Atlan to create the object. Retrieve the created object for use in subsequent creation calls. (You'd probably want to do some null checking first.) POST /api/meta/entity/bulk 1 2 3 4 5 6 7 8 9 10 11 12 13 14 { \"entities\" : [ { \"typeName\" : \"APIObject\" , // (1) \"attributes\" : { \"name\" : \"api-object\" , // (2) \"qualifiedName\" : \"default/api/123456789/api-object\" , // (3) \"connectionQualifiedName\" : \"default/api/123456789\" , // (4) \"connectorName\" : \"api\" , // (5) \"apiFieldCount\" : 2 // (6) } } ] } The typeName must be exactly APIObject . Human-readable name for your object. The qualifiedName should follow the pattern: default/api/<epoch>/<objectName> , where default/api/<epoch> is the qualifiedName of the connection for this object and <objectName> is the name of this object. The connectionQualifiedName must be the exact qualifiedName of the connection for this object. The connectorName must be exactly api . The apiFieldCount should be the count of the fields present in the object. This is not a required attribute and can be excluded. APIQuery ¶ 2.5.3 An API query requires a name and a qualifiedName . For creation, you also need to specify the connectionQualifiedName of the connection for the query. Optionally, you can provide other attribute which enrich the query asset. Like apiInputFieldCount to store the count of input API fields in the query. apiQueryOutputType and apiQueryOutputTypeSecondary to store the query output types. If the query refers to an object in its output, it requires apiIsObjectReference and apiObjectQualifiedName to be populated. Python Raw REST API Create an API query 17 18 19 20 21 22 23 24 25 26 27 apiQuery = APIQuery . creator ( # (1) name = \"api-query\" , # (2) connection_qualified_name = connection_qualified_name , # (3) api_input_field_count = 2 , # (4) api_query_output_type = \"api-object-ref\" , # (5) api_query_output_type_secondary = \"Object\" , # (6) is_object_reference = True , # (7) reference_api_object_qualified_name = \"default/api/123456789/api-object-ref\" # (8) ) response = client . asset . save ( apiQuery ) # (9) query_qualified_name = response . assets_created ( asset_type = APIQuery )[ 0 ] . qualified_name # (10) Build up the minimum request to create a query. Provide a human-readable name for your query. Provide the qualified_name of the connection for this query. Provide the count of input fields that exist in the query. Use None if no input field exists in this query. Provide the primary type for the output of the query. E.g.: If Object/api-obj-ref, then api-obj-ref is primary. Provide the secondary type for the output of the query. E.g.: If Object/api-obj-ref, then Object is secondary. If the Output of the query refers to an object make it True or else False. If is_object_reference is True, provide the qualified name of the object this query refers to in output. Or None . Actually call Atlan to create the query. Retrieve the created query for use in subsequent creation calls. (You'd probably want to do some null checking first.) POST /api/meta/entity/bulk 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 { \"entities\" : [ { \"typeName\" : \"APIQuery\" , // (1) \"attributes\" : { \"name\" : \"api-query\" , // (2) \"qualifiedName\" : \"default/api/123456789/api-query\" , // (3) \"connectionQualifiedName\" : \"default/api/123456789\" , // (4) \"connectorName\" : \"api\" , // (5) \"apiInputFieldCount\" : 2 , // (6) \"apiQueryOutputType\" : \"api-object-ref\" , // (7) \"apiQueryOutputTypeSecondary\" : \"Object\" , // (8) \"apiIsObjectReference\" : true , // (9) \"apiObjectQualifiedName\" : \"default/api/123456789/api-object-ref\" // (10) } } ] } The typeName must be exactly APIQuery . Human-readable name for your query. The qualifiedName should follow the pattern: default/api/<epoch>/<queryName> , where default/api/<epoch> is the qualifiedName of the connection for this query and <queryName> is the name of this query. The connectionQualifiedName must be the exact qualifiedName of the connection for this query. The connectorName must be exactly api . The apiInputFieldCount should be the count of the input fields present in the object. For no input fields, remove the attribute from the request. The apiQueryOutputType is the primary type for the output of the query. E.g.: If Object/api-obj-ref, then api-obj-ref is primary. The apiQueryOutputTypeSecondary is the secondary type for the output of the query. E.g.: If Object/api-obj-ref, then Object is secondary. The apiIsObjectReference should be true when the query refers to an object in its output. The apiObjectQualifiedName is the qualified name of the object this query refers to in its output. Remove attribute when apiIsObjectReference is false. APIField ¶ 2.5.3 An API field requires a name and a qualifiedName . For creation, you also need to specify the connectionQualifiedName of the connection for the field and either the apiObject or the apiQuery the field is in. Optionally, you can provide other attribute which enrich the field asset. Like apiFieldType and apiFieldTypeSecondary to store the field types. If the field refers to an object, it requires apiIsObjectReference and apiObjectQualifiedName to be populated. APIField inside APIObject ¶ Python Raw REST API Create an API field inside an API Object 23 24 25 26 27 28 29 30 31 32 33 34 apifield = APIField . creator ( # (1) name = \"api-field\" , # (2) parent_api_object_qualified_name = object_qualified_name , # (3) parent_api_query_qualified_name = None , # (4) connection_qualified_name = connection_qualified_name , # (5) api_field_type = \"api-object-ref\" , # (6) api_field_type_secondary = \"Object\" , # (7) is_api_object_reference = True , # (8) reference_api_object_qualified_name = \"default/api/123456789/api-object-ref\" , # (9) api_query_param_type = None # (10) ) response = client . asset . save ( apifield ) # (11) Build up the minimum request to create a field. Provide the human-readable name for this field. Provide the qualified_name of the API object, this field exists in. None for when this object exists in an object and not in a query. Provide the qualified_name of the connection for this field. Provide the primary type of the field. Provide the secondary type of the field. True when the field refers to an object. Else False. Provide the qualified_name of the API object this field refers to. None when is_api_object_reference is False. None when field is inside an object. Holds Enum value when inside a query as input. Actually call Atlan to create the path. POST /api/meta/entity/bulk 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 { \"entities\" : [ { \"typeName\" : \"APIField\" , // (1) \"attributes\" : { \"name\" : \"api-field\" , // (2) \"qualifiedName\" : \"default/api/123456789/api-object/api-field\" , // (3) \"connectionQualifiedName\" : \"default/api/123456789\" , // (4) \"connectorName\" : \"api\" , // (5) \"apiFieldType\" : \"String\" , // (6) \"apiFieldTypeSecondary\" : \"String\" , // (7) \"apiObject\" : { // (8) \"typeName\" : \"APIObject\" , // (9) \"uniqueAttributes\" : { // (10) \"qualifiedName\" : \"default/api/123456789/api-object\" } }, \"apiIsObjectReference\" : true , // (11) \"apiObjectQualifiedName\" : \"default/api/123456789/api-object-ref\" // (12) } } ] } The typeName must be exactly APIField . Human-readable name for your field. The qualifiedName should follow the pattern: default/api/<epoch>/<objectName>/<fieldName> , where default/api/<epoch>/<objectName> is the qualifiedName of the object for this field and <fieldName> is the human-readable name of the field. The connectionQualifiedName must be the exact qualifiedName of the connection for this field. The connectorName must be exactly api . The apiFieldType is the primary type of the field. The apiFieldTypeSecondary is the secondary type of the field. The object in which this field exists is embedded in the apiObject attribute. The typeName for this embedded reference must be APIObject . To complete the reference, you must include a uniqueAttributes object with the qualifiedName of the object. Note: the object must already exist in Atlan before creating the path. The apiIsObjectReference should be true when this field refers to an object. The apiObjectQualifiedName should incldue the reference object qualified_name when apiIsObjectReference is true. APIField inside APIQuery ¶ Python Raw REST API Create an API field inside an API Query 23 24 25 26 27 28 29 30 31 32 33 34 apifield = APIField . creator ( # (1) name = \"api-field\" , # (2) parent_api_object_qualified_name = None , # (3) parent_api_query_qualified_name = query_qualified_name , # (4) connection_qualified_name = connection_qualified_name , # (5) api_field_type = \"api-object-ref\" , # (6) api_field_type_secondary = \"Object\" , # (7) is_api_object_reference = True , # (8) reference_api_object_qualified_name = \"default/api/123456789/api-object-ref\" , # (9) api_query_param_type = APIQueryParamTypeEnum . INPUT # (10) ) response = client . asset . save ( apifield ) # (11) Build up the minimum request to create a field. Provide the human-readable name for this field. None for when this object exists in a query and not in an object. Provide the qualified_name of the API query, this field exists in. Provide the qualified_name of the connection for this field. Provide the primary type of the field. Provide the secondary type of the field. True when the field refers to an object. Else False. Provide the qualified_name of the API object this field refers to. None when is_api_object_reference is False. Provide the enum value INPUT, if the field is an input to the query. Actually call Atlan to create the path. POST /api/meta/entity/bulk 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 { \"entities\" : [ { \"typeName\" : \"APIField\" , // (1) \"attributes\" : { \"name\" : \"api-field\" , // (2) \"qualifiedName\" : \"default/api/123456789/api-query/api-field\" , // (3) \"connectionQualifiedName\" : \"default/api/123456789\" , // (4) \"connectorName\" : \"api\" , // (5) \"apiFieldType\" : \"String\" , // (6) \"apiFieldTypeSecondary\" : \"String\" , // (7) \"apiQuery\" : { // (8) \"typeName\" : \"APIQuery\" , // (9) \"uniqueAttributes\" : { // (10) \"qualifiedName\" : \"default/api/123456789/api-query\" } }, \"apiIsObjectReference\" : true , // (11) \"apiObjectQualifiedName\" : \"default/api/123456789/api-object-ref\" , // (12) \"apiQueryParamType\" : \"Input\" // (13) } } ] } The typeName must be exactly APIField . Human-readable name for your field. The qualifiedName should follow the pattern: default/api/<epoch>/<queryName>/<fieldName> , where default/api/<epoch>/<queryName> is the qualifiedName of the query for which this field is an input and <fieldName> is the human-readable name of the field. The connectionQualifiedName must be the exact qualifiedName of the connection for this field. The connectorName must be exactly api . The apiFieldType is the primary type of the field. The apiFieldTypeSecondary is the secondary type of the field. The query in which this field exists is embedded in the apiQuery attribute. The typeName for this embedded reference must be APIQuery . To complete the reference, you must include a uniqueAttributes object with the qualifiedName of the query. Note: the object must already exist in Atlan before creating the path. The apiIsObjectReference should be true when this field refers to an object. The apiObjectQualifiedName should incldue the reference object qualified_name when apiIsObjectReference is true. The apiQueryParamType should be present when the field is an input to a query. The value must exactly be \"Input\". Available relationships ¶ Every level of the API structure is an Asset , and can therefore be related to the following other assets. erDiagram Asset }o--o{ AtlasGlossaryTerm : meanings Asset ||--o{ Link : links Asset ||--o| Readme : readme Asset }o--o{ Process : inputToProcesses Asset }o--o{ Process : outputFromProcesses AtlasGlossaryTerm ¶ A glossary term provides meaning to an asset. The link terms to assets snippet provides more detail on setting this relationship. Link ¶ A link provides additional context to an asset, by providing a URL to additional information. Readme ¶ A README provides rich documentation for an asset. The add asset READMEs snippet provides more detail on setting this relationship. Process ¶ A process provides lineage information for an asset. An asset can be both an input and an output for one or more processes. The lineage snippets provide more detail on creating and working with lineage. Although if you want to delete everything in a connection, your better avenue is the packaged connection delete utility in the UI. ↩ Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/patterns/create/api/",
    "scraped_at": "2025-09-15 19:52:50",
    "content_length": 29942,
    "topic": "API_SDK"
  },
  {
    "title": "Extending Atlan's model - Developer",
    "content": "Extending Atlan's model ¶ You can extend the metadata model in Atlan through its typedefs. Closed beta This feature is currently provided as a closed beta. Specific policies must be configured in your tenant to have the necessary access to create these extensions; without these operations these will not work. Further caveats When extending the Atlan data model, you should be aware of these additional restrictions: You can only manage definitions that are not in Atlan's internally-managed namespace, defined by the serviceType of each model. So if you want to extend an existing model, you should create a new type in your own serviceType and specify the model you want to extend as the supertype of that model. You should follow a naming convention that prefixes all attributes you define, to avoid potential future conflicts with Atlan-managed attributes. Create new struct models ¶ You can use structs to embed complex structures within other models. If you only intend to use primitive attributes, you do not need to define any structs. To create a new struct model: Java Create a new struct model 1 2 3 4 5 6 7 8 final String ATTR_PREFIX = \"myns\" ; List < AttributeDef > attrs = List . of ( // (1) AttributeDef . creator ( ATTR_PREFIX + \"FieldOne\" , AtlanAttributeType . STRING ). build (), // (2) AttributeDef . creator ( ATTR_PREFIX + \"FieldTwo\" , AtlanAttributeType . LONG ). build ()); StructDef sd = StructDef . creator ( \"SomeStruct\" , attrs ) // (3) . serviceType ( \"custom\" ) // (4) . build (); TypeDefResponse response = Atlan . getDefaultClient (). typeDefs . _create ( sd ); // (5) Begin by defining the list of attribute definitions for the struct model. Each attribute definition must have at least a name and a type. Define the struct model itself by providing at least a name and the list of attribute definitions. (Optional) You can also specify your own namespace for the model using serviceType . This will default to custom_extension if not specified. Call the _create() method to actually create the new struct model in Atlan. Create new entity models ¶ Entities define the metadata objects that Atlan can store, update, search, and so on. They can be made up of both primitive and struct-based (complex) attributes. To create a new entity model: Java Create a new entity model 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 List < AttributeDef > attrs = List . of ( // (1) AttributeDef . creator ( ATTR_PREFIX + \"ParentAttrOne\" , AtlanAttributeType . STRING ). build (), AttributeDef . creator ( // (2) ATTR_PREFIX + \"ParentStructs\" , AtlanAttributeType . STRUCT , \"SomeStruct\" , AtlanCustomAttributeCardinality . SET ) // (3) . build ()); EntityDef ed = EntityDef . creator ( \"SomeParent\" , attrs ) . serviceType ( \"custom\" ) // (4) . build (); // (5) TypeDefResponse response = Atlan . getDefaultClient (). typeDefs . _create ( ed ); // (6) attrs = List . of ( AttributeDef . creator ( ATTR_PREFIX + \"ChildAttrOne\" , AtlanAttributeType . LONG ). build (), AttributeDef . creator ( ATTR_PREFIX + \"ChildAttrTwo\" , AtlanAttributeType . DATE ). build ()); ed = EntityDef . creator ( \"SomeChild\" , attrs ) . serviceType ( \"custom\" ) . build (); TypeDefResponse response = Atlan . getDefaultClient (). typeDefs . _create ( ed ); Begin by defining the list of attribute definitions for the entity model. Each attribute definition must have at least a name and a type. If the type is not primitive (in this example a struct), you must also specify the kind of object (struct). You can also override the cardinality, in this example we allow multiple embedded complex values against this single attribute. (Optional) You can also specify your own namespace for the model using serviceType . This will default to custom_extension if not specified. Define the entity model itself by providing at least a name and the list of attribute definitions. Call the _create() method to actually create the new entity model in Atlan. Create new relationship models ¶ Relationships define connections between entities. They must always have two entity model endpoints. To create a new relationship model: Java Create a new relationship model 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 List < AttributeDef > attrs = List . of ( // (1) AttributeDef . creator ( ATTR_PREFIX + \"RelationshipAttrOne\" , AtlanAttributeType . STRING ). build (), // (2) AttributeDef . creator ( ATTR_PREFIX + \"RelationshipAttrTwo\" , AtlanAttributeType . LONG ). build ()); RelationshipEndDef one = RelationshipEndDef . creator ( // (3) ATTR_PREFIX + \"Children\" , // (4) \"SomeParent\" , // (5) true , // (6) AtlanCustomAttributeCardinality . SET ) // (7) . build (); RelationshipEndDef two = RelationshipEndDef . creator ( // (8) ATTR_PREFIX + \"Parent\" , // (9) \"SomeChild\" , // (10) false , // (11) AtlanCustomAttributeCardinality . SINGLE ) // (12) . build (); RelationshipDef rd = RelationshipDef . creator ( RELATIONSHIP_DEF_NAME , one , two , attrs ) // (13) . relationshipCategory ( RelationshipCategory . AGGREGATION ) // (14) . serviceType ( \"custom\" ) // (15) . build (); TypeDefResponse response = Atlan . getDefaultClient (). typeDefs . _create ( rd ); // (16) (Optional) Begin by defining the list of attribute definitions for the relationship model. These are optional for a relationship, but are used to capture any attributes on each instance of the relationship. Each attribute definition must have at least a name and a type. If the type is not primitive (in this example a struct), you must also specify the kind of object (struct). Define each entity endpoint of the relationship. You must give the endpoint a name — this will be the name of the attribute that appears in the entity itself to represent this relationship. You must specify the type of entity this relationship exists on (where the attribute name above will appear). Specify whether the relationship on this entity \"contains\" the other entities. For parent-child relationships this should be true on the parent entity type, and false otherwise. Specify the cardinality of the relationship: in this example we allow multiple children to be related to the parent type. Since every relationship is between exactly two entities, create an endpoint for the other side of the relationship as well. As before, you must give the endpoint a name — this will be the name of the attribute that appears in the entity itself to represent this relationship. You must specify the type of entity this relationship exists on (where the attribute name above will appear). Since this example is the child referring to its parent, the child is not a container. Since this example is the child referring to a single parent, this end of the relationship's cardinality is singular. Define the relationship model itself by providing at least a name, the two endpoints, and (optionally) the list of attribute definitions. By default, a relationship will be created as an ASSOCIATION . You can override this with any of: ASSOCIATION : defines a peer-to-peer relationship between the entity endpoints. AGGREGATION : defines a relationship where one endpoint is logically the \"parent\" of another endpoint. This differs from the COMPOSITION by not cascading deletes to related entities. COMPOSITION : defines a relationship where one endpoint is strictly the \"parent\" of another endpoint. This differs from AGGREGATION because any removal of the entity at the parent end of the relationship will cascade to removing any of the related children entities as well. (Optional) You can also specify your own namespace for the model using serviceType . This will default to custom_extension if not specified. Call the _create() method to actually create the new entity model in Atlan. Update existing models ¶ Treat existing attributes as immutable You can also update existing entity models. However, in general you should only append (create new) attributes and not remove or attempt to change any existing attributes, or you may lose data from those existing attributes. To update an existing model, first retrieve it and then apply updates to it: Java Update an existing model 48 49 50 51 52 53 54 EntityDef parent = ( EntityDef ) Atlan . getDefaultClient (). typeDefs . get ( \"SomeParent\" ); // (1) parent = parent . toBuilder () // (2) . attributeDef ( AttributeDef . creator ( ATTR_PREFIX + \"ThirdAttribute\" , AtlanAttributeType . BOOLEAN ) // (3) . build ()) . typeVersion ( \"1.1\" ) // (4) . build (); TypeDefResponse response = Atlan . getDefaultClient (). typeDefs . _update ( parent ); // (5) Begin by retrieving the existing model's definition. You can convert the immutable object returned into a mutatable builder using the .toBuilder() method. Remember to assign the value back Remember to assign the built immutable value back to some variable, and use that variable in the next step. Otherwise the changes you make here will not be applied back. You can then append as many additional attributes as you like. You should also update the typeVersion of the model to the next minor version. Call the _update() method to actually update the existing model in Atlan. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/extensions/",
    "scraped_at": "2025-09-15 19:52:52",
    "content_length": 9313,
    "topic": "SSO"
  },
  {
    "title": "6 docs tagged with \"cratedb\" | Atlan Documentation",
    "content": "Connection issues Resolve common connection and authentication issues when setting up CrateDB connector CrateDB Integrate, catalog, and govern CrateDB assets in Atlan. Permissions and limitations Frequently asked questions about CrateDB connector setup, permissions, and limitations Preflight checks for CrateDB Technical validations performed before running the CrateDB crawler to verify connectivity and permissions Set up CrateDB Configure authentication and connection settings for CrateDB connector What does Atlan crawl from CrateDB? Complete list of CrateDB assets and metadata properties extracted by Atlan during crawling",
    "url": "https://docs.atlan.com/tags/cratedb",
    "scraped_at": "2025-09-15 19:52:53",
    "content_length": 630,
    "topic": "API_SDK"
  },
  {
    "title": "SparkJob - Developer",
    "content": "SparkJob ¶ Instance of a Spark Job run in Atlan. Complete reference This is a complete reference for the SparkJob object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. SparkJob inherits its attributes and relationships from these other types: classDiagram direction RL class SparkJob link SparkJob \"../sparkjob\" class Spark { <<abstract>> } link Spark \"../spark\" Spark <|-- SparkJob : extends class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- Spark : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from SparkJob 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) sparkRunEndTime ¶ End time of the Spark Job eg. 1695673598218 sparkRunOpenLineageState ¶ OpenLineage state of the Spark Job run eg. COMPLETE sparkRunOpenLineageVersion ¶ OpenLineage Version of the Spark Job run eg. 1.1.0 sparkRunStartTime ¶ Start time of the Spark Job eg. 1695673598218 sparkRunVersion ¶ Spark Version for the Spark Job run eg. 3.4.1 These attributes are specific to instances of SparkJob (and all of its subtypes). sparkAppName ¶ Name of the Spark app containing this Spark Job For eg. extract_raw_data sparkMaster ¶ The Spark master URL eg. local, local[4], or spark://master:7077 Relationships ¶ Inherited relationships These relationships are inherited from SparkJob 's supertypes: anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos inputToAirflowTasks ( AirflowTask ) ¶ Tasks to which this asset provides input. inputToProcesses ( Process ) ¶ Processes to which this asset provides input. inputToSparkJobs ( SparkJob ) ¶ TBC modelImplementedAttributes ( ModelAttribute ) ¶ Attributes implemented by this asset. modelImplementedEntities ( ModelEntity ) ¶ Entities implemented by this asset. outputFromAirflowTasks ( AirflowTask ) ¶ Tasks from which this asset is output. outputFromProcesses ( Process ) ¶ Processes from which this asset is produced as output. outputFromSparkJobs ( SparkJob ) ¶ TBC These relationships are specific to instances of SparkJob (and all of its subtypes). inputs ( Catalog ) ¶ Assets that are inputs to this task. outputs ( Catalog ) ¶ Assets that are outputs from this task. process ( Process ) ¶ TBC Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/sparkjob/",
    "scraped_at": "2025-09-15 19:52:55",
    "content_length": 19543,
    "topic": "SSO"
  },
  {
    "title": "MicroStrategy | Atlan Documentation",
    "content": "On this page Overview: Catalog MicroStrategy reports, documents, and dossiers in Atlan. Gain visibility into lineage, usage, and governance for your MicroStrategy analytics assets. Get started ​ Follow these steps to connect and catalog MicroStrategy assets in Atlan: Set up the connector Crawl assets References ​ What does Atlan crawl from MicroStrategy? : Detailed list of MicroStrategy asset types and metadata fields that Atlan can extract and catalog. Preflight checks for MicroStrategy : Technical checks and requirements needed for a successful MicroStrategy integration. Troubleshooting ​ Troubleshooting connectivity : Solutions for common issues encountered when connecting Atlan to MicroStrategy, including permissions and network problems. Get started References Troubleshooting",
    "url": "https://docs.atlan.com/apps/connectors/business-intelligence/microstrategy",
    "scraped_at": "2025-09-15 19:52:56",
    "content_length": 791,
    "topic": "API_SDK"
  },
  {
    "title": "CosmosMongoDBDatabase - Developer",
    "content": "CosmosMongoDBDatabase ¶ Instance of a Cosmos MongoDB database in Atlan. Complete reference This is a complete reference for the CosmosMongoDBDatabase object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. CosmosMongoDBDatabase inherits its attributes and relationships from these other types: classDiagram direction RL class CosmosMongoDBDatabase link CosmosMongoDBDatabase \"../cosmosmongodbdatabase\" class CosmosMongoDB { <<abstract>> } link CosmosMongoDB \"../cosmosmongodb\" CosmosMongoDB <|-- CosmosMongoDBDatabase : extends class NoSQL { <<abstract>> } link NoSQL \"../nosql\" NoSQL <|-- CosmosMongoDB : extends class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- NoSQL : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends class MongoDBDatabase link MongoDBDatabase \"../mongodbdatabase\" MongoDBDatabase <|-- CosmosMongoDBDatabase : extends class Database link Database \"../database\" Database <|-- MongoDBDatabase : extends class SQL { <<abstract>> } link SQL \"../sql\" SQL <|-- Database : extends class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- SQL : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends class MongoDB { <<abstract>> } link MongoDB \"../mongodb\" MongoDB <|-- MongoDBDatabase : extends class NoSQL { <<abstract>> } link NoSQL \"../nosql\" NoSQL <|-- MongoDB : extends class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- NoSQL : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from CosmosMongoDBDatabase 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. calculationViewName ¶ Simple name of the calculation view in which this SQL asset exists, or empty if it does not exist within a calculation view. calculationViewQualifiedName ¶ Unique name of the calculation view in which this SQL asset exists, or empty if it does not exist within a calculation view. databaseName ¶ Simple name of the database in which this SQL asset exists, or empty if it does not exist within a database. databaseQualifiedName ¶ Unique name of the database in which this SQL asset exists, or empty if it does not exist within a database. isProfiled ¶ Whether this asset has been profiled (true) or not (false). lastProfiledAt ¶ Time (epoch) at which this asset was last profiled, in milliseconds. queryCount ¶ Number of times this asset has been queried. queryCountUpdatedAt ¶ Time (epoch) at which the query count was last updated, in milliseconds. queryUserCount ¶ Number of unique users who have queried this asset. queryUserMap ¶ Map of unique users who have queried this asset to the number of times they have queried it. schemaName ¶ Simple name of the schema in which this SQL asset exists, or empty if it does not exist within a schema. schemaQualifiedName ¶ Unique name of the schema in which this SQL asset exists, or empty if it does not exist within a schema. tableName ¶ Simple name of the table in which this SQL asset exists, or empty if it does not exist within a table. tableQualifiedName ¶ Unique name of the table in which this SQL asset exists, or empty if it does not exist within a table. viewName ¶ Simple name of the view in which this SQL asset exists, or empty if it does not exist within a view. viewQualifiedName ¶ Unique name of the view in which this SQL asset exists, or empty if it does not exist within a view. schemaCount ¶ Number of schemas in this database. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) noSQLSchemaDefinition ¶ Represents attributes for describing the key schema for the table and indexes. mongoDBDatabaseCollectionCount ¶ Number of collections in the database. These attributes are specific to instances of CosmosMongoDBDatabase (and all of its subtypes). cosmosMongoDBAccountQualifiedName ¶ Unique name of the account in which this database exists. Relationships ¶ Inherited relationships These relationships are inherited from CosmosMongoDBDatabase 's supertypes: dbtModels ( DbtModel ) ¶ TBC dbtSources ( DbtSource ) ¶ TBC dbtTests ( DbtTest ) ¶ TBC sqlDBTSources ( DbtSource ) ¶ TBC sqlDbtModels ( DbtModel ) ¶ TBC schemas ( Schema ) ¶ Schemas that exist within this database. anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos inputToAirflowTasks ( AirflowTask ) ¶ Tasks to which this asset provides input. inputToProcesses ( Process ) ¶ Processes to which this asset provides input. inputToSparkJobs ( SparkJob ) ¶ TBC modelImplementedAttributes ( ModelAttribute ) ¶ Attributes implemented by this asset. modelImplementedEntities ( ModelEntity ) ¶ Entities implemented by this asset. outputFromAirflowTasks ( AirflowTask ) ¶ Tasks from which this asset is output. outputFromProcesses ( Process ) ¶ Processes from which this asset is produced as output. outputFromSparkJobs ( SparkJob ) ¶ TBC mongoDBCollections ( MongoDBCollection ) ¶ Collections that exist within this database. These relationships are specific to instances of CosmosMongoDBDatabase (and all of its subtypes). cosmosMongoDBAccount ( CosmosMongoDBAccount ) ¶ Account in which the database exists. cosmosMongoDBCollections ( CosmosMongoDBCollection ) ¶ Collections that exist within this database. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/cosmosmongodbdatabase/",
    "scraped_at": "2025-09-15 19:52:58",
    "content_length": 22723,
    "topic": "SSO"
  },
  {
    "title": "One doc tagged with \"enrichment\" | Atlan Documentation",
    "content": "Enrich Atlan through dbt Beyond the default mapped [dbt Cloud](/apps/connectors/etl-tools/dbt/references/what-does-atlan-crawl-from-dbt-cloud) or [dbt Core](/apps/connectors/etl-tools/dbt/references/what-does-atlan-crawl-from-dbt-core) properties, you can update any of Atlan's metadata attributes (except for `name`, `tenantId`, and `qualifiedName`) through your dbt model's `meta` property.",
    "url": "https://docs.atlan.com/tags/enrichment",
    "scraped_at": "2025-09-15 19:52:59",
    "content_length": 392,
    "topic": "HOW_TO"
  },
  {
    "title": "3 docs tagged with \"apache\" | Atlan Documentation",
    "content": "Apache Airflow OpenLineage Integrate, catalog, and visualize Apache Airflow lineage in Atlan. Apache Kafka Integrate, catalog, and govern Apache Kafka assets in Atlan. Apache Spark OpenLineage Integrate, catalog, and visualize Apache Spark lineage in Atlan.",
    "url": "https://docs.atlan.com/tags/apache",
    "scraped_at": "2025-09-15 19:53:00",
    "content_length": 257,
    "topic": "API_SDK"
  },
  {
    "title": "Purpose - Developer",
    "content": "Purpose ¶ Atlan Type representing a Purpose model Complete reference This is a complete reference for the Purpose object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. Purpose inherits its attributes and relationships from these other types: classDiagram direction RL class Purpose link Purpose \"../purpose\" class AccessControl { <<abstract>> } link AccessControl \"../accesscontrol\" AccessControl <|-- Purpose : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- AccessControl : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from Purpose 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) channelLink ¶ TBC defaultNavigation ¶ TBC denyAssetFilters ¶ TBC denyAssetTabs ¶ TBC denyAssetTypes ¶ TBC denyCustomMetadataGuids ¶ TBC denyNavigationPages ¶ TBC displayPreferences ¶ TBC isAccessControlEnabled ¶ TBC These attributes are specific to instances of Purpose (and all of its subtypes). purposeClassifications ¶ TBC (1) Uses a different name in SDKs purposeAtlanTags purpose_atlan_tags Relationships ¶ Inherited relationships These relationships are inherited from Purpose 's supertypes: anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos policies ( AuthPolicy ) ¶ TBC Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/purpose/",
    "scraped_at": "2025-09-15 19:53:02",
    "content_length": 18517,
    "topic": "SSO"
  },
  {
    "title": "MongDBDatabase - Developer",
    "content": "MongoDBDatabase ¶ Instance of a MongoDB database in Atlan. Complete reference This is a complete reference for the MongoDBDatabase object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. MongoDBDatabase inherits its attributes and relationships from these other types: classDiagram direction RL class MongoDBDatabase link MongoDBDatabase \"../mongodbdatabase\" class Database link Database \"../database\" Database <|-- MongoDBDatabase : extends class SQL { <<abstract>> } link SQL \"../sql\" SQL <|-- Database : extends class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- SQL : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends class MongoDB { <<abstract>> } link MongoDB \"../mongodb\" MongoDB <|-- MongoDBDatabase : extends class NoSQL { <<abstract>> } link NoSQL \"../nosql\" NoSQL <|-- MongoDB : extends class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- NoSQL : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from MongoDBDatabase 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. noSQLSchemaDefinition ¶ Represents attributes for describing the key schema for the table and indexes. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) calculationViewName ¶ Simple name of the calculation view in which this SQL asset exists, or empty if it does not exist within a calculation view. calculationViewQualifiedName ¶ Unique name of the calculation view in which this SQL asset exists, or empty if it does not exist within a calculation view. databaseName ¶ Simple name of the database in which this SQL asset exists, or empty if it does not exist within a database. databaseQualifiedName ¶ Unique name of the database in which this SQL asset exists, or empty if it does not exist within a database. isProfiled ¶ Whether this asset has been profiled (true) or not (false). lastProfiledAt ¶ Time (epoch) at which this asset was last profiled, in milliseconds. queryCount ¶ Number of times this asset has been queried. queryCountUpdatedAt ¶ Time (epoch) at which the query count was last updated, in milliseconds. queryUserCount ¶ Number of unique users who have queried this asset. queryUserMap ¶ Map of unique users who have queried this asset to the number of times they have queried it. schemaName ¶ Simple name of the schema in which this SQL asset exists, or empty if it does not exist within a schema. schemaQualifiedName ¶ Unique name of the schema in which this SQL asset exists, or empty if it does not exist within a schema. tableName ¶ Simple name of the table in which this SQL asset exists, or empty if it does not exist within a table. tableQualifiedName ¶ Unique name of the table in which this SQL asset exists, or empty if it does not exist within a table. viewName ¶ Simple name of the view in which this SQL asset exists, or empty if it does not exist within a view. viewQualifiedName ¶ Unique name of the view in which this SQL asset exists, or empty if it does not exist within a view. schemaCount ¶ Number of schemas in this database. These attributes are specific to instances of MongoDBDatabase (and all of its subtypes). mongoDBDatabaseCollectionCount ¶ Number of collections in the database. Relationships ¶ Inherited relationships These relationships are inherited from MongoDBDatabase 's supertypes: anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos inputToAirflowTasks ( AirflowTask ) ¶ Tasks to which this asset provides input. inputToProcesses ( Process ) ¶ Processes to which this asset provides input. inputToSparkJobs ( SparkJob ) ¶ TBC modelImplementedAttributes ( ModelAttribute ) ¶ Attributes implemented by this asset. modelImplementedEntities ( ModelEntity ) ¶ Entities implemented by this asset. outputFromAirflowTasks ( AirflowTask ) ¶ Tasks from which this asset is output. outputFromProcesses ( Process ) ¶ Processes from which this asset is produced as output. outputFromSparkJobs ( SparkJob ) ¶ TBC dbtModels ( DbtModel ) ¶ TBC dbtSources ( DbtSource ) ¶ TBC dbtTests ( DbtTest ) ¶ TBC sqlDBTSources ( DbtSource ) ¶ TBC sqlDbtModels ( DbtModel ) ¶ TBC schemas ( Schema ) ¶ Schemas that exist within this database. These relationships are specific to instances of MongoDBDatabase (and all of its subtypes). mongoDBCollections ( MongoDBCollection ) ¶ Collections that exist within this database. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/mongodbdatabase/",
    "scraped_at": "2025-09-15 19:53:03",
    "content_length": 21771,
    "topic": "SSO"
  },
  {
    "title": "AnaplanModel - Developer",
    "content": "AnaplanModel ¶ Instances of an AnaplanModel in Atlan. Complete reference This is a complete reference for the AnaplanModel object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. AnaplanModel inherits its attributes and relationships from these other types: classDiagram direction RL class AnaplanModel link AnaplanModel \"../anaplanmodel\" class Anaplan { <<abstract>> } link Anaplan \"../anaplan\" Anaplan <|-- AnaplanModel : extends class BI { <<abstract>> } link BI \"../bi\" BI <|-- Anaplan : extends class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- BI : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from AnaplanModel 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) anaplanModelName ¶ Simple name of the AnaplanModel asset that contains this asset(AnaplanModule and everthing under it's hierarchy). anaplanModelQualifiedName ¶ Unique name of the AnaplanModel asset that contains this asset(AnaplanModule and everthing under it's hierarchy). anaplanModuleName ¶ Simple name of the AnaplanModule asset that contains this asset(AnaplanLineItem, AnaplanList, AnaplanView and everthing under their hierarchy). anaplanModuleQualifiedName ¶ Unique name of the AnaplanModule asset that contains this asset(AnaplanLineItem, AnaplanList, AnaplanView and everthing under their hierarchy). anaplanSourceId ¶ Id/Guid of the Anaplan asset in the source system. anaplanWorkspaceName ¶ Simple name of the AnaplanWorkspace asset that contains this asset(AnaplanModel and everthing under it's hierarchy). anaplanWorkspaceQualifiedName ¶ Unique name of the AnaplanWorkspace asset that contains this asset(AnaplanModel and everthing under it's hierarchy). Relationships ¶ Inherited relationships These relationships are inherited from AnaplanModel 's supertypes: anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos inputToAirflowTasks ( AirflowTask ) ¶ Tasks to which this asset provides input. inputToProcesses ( Process ) ¶ Processes to which this asset provides input. inputToSparkJobs ( SparkJob ) ¶ TBC modelImplementedAttributes ( ModelAttribute ) ¶ Attributes implemented by this asset. modelImplementedEntities ( ModelEntity ) ¶ Entities implemented by this asset. outputFromAirflowTasks ( AirflowTask ) ¶ Tasks from which this asset is output. outputFromProcesses ( Process ) ¶ Processes from which this asset is produced as output. outputFromSparkJobs ( SparkJob ) ¶ TBC These relationships are specific to instances of AnaplanModel (and all of its subtypes). anaplanDimensions ( AnaplanDimension ) ¶ AnaplanDimension assets contained within this AnaplanModel. anaplanLists ( AnaplanList ) ¶ AnaplanList assets contained within this AnaplanModel. anaplanModules ( AnaplanModule ) ¶ AnaplanModule assets contained within this AnaplanModel. anaplanPages ( AnaplanPage ) ¶ AnaplanPage assets containing this AnaplanModel. anaplanWorkspace ( AnaplanWorkspace ) ¶ AnaplanWorkspace asset containing this AnaplanModel. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/anaplanmodel/",
    "scraped_at": "2025-09-15 19:53:05",
    "content_length": 20333,
    "topic": "SSO"
  },
  {
    "title": "App - Developer",
    "content": "App model ¶ Reference documentation This is reference documentation covering the entire Atlan model. It is not the best place to start when trying to understand how to manage App assets in Atlan. For that, we would suggest starting with the manage App assets pattern . Base class for App assets. classDiagram direction RL class App { <<abstract>> } link App \"../app\" class Catalog { <<abstract>> } link Catalog \"../entities/catalog\" Catalog <|-- App : extends class Asset { <<abstract>> } link Asset \"../entities/asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../entities/referenceable\" Referenceable <|-- Asset : extends class Application link Application \"../entities/application\" App <|-- Application : extends class ApplicationField link ApplicationField \"../entities/applicationfield\" App <|-- ApplicationField : extends Properties ¶ These attributes are specific to instances of App (and all of its subtypes). appId ¶ Unique identifier for the App asset from the source system. Relationships ¶ The following illustrates how the various App assets inter-relate with each other: erDiagram Connection ||..o{ Application : \"\" Application ||..o{ ApplicationField : \"applicationChildFields\" Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/app/",
    "scraped_at": "2025-09-15 19:53:07",
    "content_length": 1413,
    "topic": "API_SDK"
  },
  {
    "title": "Set up Sigma | Atlan Documentation",
    "content": "On this page Who can do this? You will probably need your Sigma administrator to complete these steps - you may not have access yourself. Identify your organization's cloud ​ You will need your organization's cloud information to determine the endpoint while authenticating in Atlan. To identify your organization's cloud: Open your Sigma account. In the top right of the screen, click your profile avatar and then click Administration to open your Account page. On the Account page, under Site in General Settings , view the cloud information. Create an API token and client ID ​ To create an API token and client ID: Open your Sigma account. In the top right of the screen, click your profile avatar and then click Administration . From the left menu of the Administration page, click Developer Access . In the top right of the Developer Access page, click the Create New button. In the Create client credentials dialog, for Select privileges , click the Rest API checkbox, and then enter the following details: For Name , enter a meaningful name. For Owner , select the user you would like to associate with the token. Click Create to finish creating the API token. Once prompted, click Copy to copy and paste your API key secret in a secure location. danger The secret cannot be retrieved once this popover is closed. Your newly created API token will be listed in the Developer Access page. Hover over the token’s Client ID and click Copy . Both the API token and the client ID are required for authentication in Atlan. Verify necessary permissions ​ Ensure that the owner associated with the API token has the following permissions: Can View permission for all the Sigma workbooks and datasets you want to crawl. Can Use permission for all the Sigma connections used in the workbooks and datasets. Grant permissions ​ To grant permissions, follow the instructions in these links: Workbooks and datasets Connections Identify your organization's cloud Create an API token and client ID Verify necessary permissions Grant permissions",
    "url": "https://docs.atlan.com/apps/connectors/business-intelligence/sigma/how-tos/set-up-sigma",
    "scraped_at": "2025-09-15 19:53:08",
    "content_length": 2036,
    "topic": "SSO"
  },
  {
    "title": "RELATIONSHIP_CREATE event type - Developer",
    "content": "RELATIONSHIP_CREATE event type ¶ RELATIONSHIP_CREATE events are emitted whenever a relationship between assets is created in Atlan. One RELATIONSHIP_CREATE event is emitted for each relationship that is created So, for example, if the Snowflake crawler runs and creates: 1 connection 3 databases 10 schemas 500 tables 15,000 columns Atlan will emit 15,510 RELATIONSHIP_CREATE events — one for each relationship between these assets (columns to tables, tables to schemas, schemas to databases). The details of the created relationship will be in the message.relationship portion of the event payload. The event includes minimal information about each entity in the relationship Note that the event only includes the minimal information needed to obtain further details about each entity in the relationship. If you need further details about the entities in the relationship, you will need to look these up from the entity details provided. Example RELATIONSHIP_CREATE event 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 { \"source\" : {}, \"version\" : { \"version\" : \"1.0.0\" , \"versionParts\" : [ 1 ] }, \"msgCompressionKind\" : \"NONE\" , \"msgSplitIdx\" : 1 , \"msgSplitCount\" : 1 , \"msgSourceIP\" : \"10.110.57.7\" , \"msgCreatedBy\" : \"\" , \"msgCreationTime\" : 1654335433548 , \"spooled\" : false , \"message\" : { \"type\" : \"ENTITY_NOTIFICATION_V2\" , \"relationship\" : { \"typeName\" : \"table_columns\" , \"guid\" : \"d13e89b6-23ac-46fc-9edb-9fb720a63468\" , \"status\" : \"ACTIVE\" , \"propagateTags\" : \"ONE_TO_TWO\" , \"label\" : \"__Table.columns\" , \"end1\" : { \"guid\" : \"1f333d39-f8a3-42ad-8b60-4274bb262c38\" , \"typeName\" : \"Table\" , \"uniqueAttributes\" : { \"qualifiedName\" : \"default/postgres/1653533778/demo_db/demo/tableA\" } }, \"end2\" : { \"guid\" : \"a08ae595-f997-4188-94d9-9d3beec69c63\" , \"typeName\" : \"Column\" , \"uniqueAttributes\" : { \"qualifiedName\" : \"default/postgres/1653533778/demo_db/demo/tableA/columnA\" } } }, \"operationType\" : \"RELATIONSHIP_CREATE\" , \"eventTime\" : 1654335432959 } } Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/events/types/relationship_create/",
    "scraped_at": "2025-09-15 19:53:09",
    "content_length": 2210,
    "topic": "API_SDK"
  },
  {
    "title": "Lineage - Developer",
    "content": "Lineage model ¶ Reference documentation This is reference documentation covering the entire Atlan model. It is not the best place to start when trying to understand how to manage lineage in Atlan. For that, we would suggest starting with the lineage snippets . These are the model elements in Atlan related to lineage. classDiagram direction RL class Asset { <<abstract>> } link Asset \"../entities/asset\" class Referenceable { <<abstract>> } link Referenceable \"../entities/referenceable\" Referenceable <|-- Asset : extends class Process link Process \"../lineage\" Asset <|-- Process : extends class BIProcess link BIProcess \"../entities/biprocess\" Process <|-- BIProcess : extends class DbtProcess link DbtProcess \"../entities/dbtprocess\" Process <|-- DbtProcess : extends class ColumnProcess link ColumnProcess \"../entities/columnprocess\" Process <|-- ColumnProcess : extends class DbtColumnProcess link DbtColumnProcess \"../entities/dbtcolumnprocess\" ColumnProcess <|-- DbtColumnProcess : extends class SparkJob link SparkJob \"../entities/sparkjob\" Spark <|-- SparkJob : extends link Spark \"../spark\" class Spark { <<abstract>> } Catalog <|-- Spark : extends class Catalog { <<abstract>> } link Catalog \"../entities/catalog\" Asset <|-- Catalog : extends Properties ¶ These attributes are specific to instances of Process (and all of its subtypes). additionalEtlContext ¶ TBC ast ¶ TBC code ¶ TBC sql ¶ TBC Relationships ¶ The following illustrates how the various pieces of lineage inter-relate with each other: erDiagram Process ||--o{ ColumnProcess : columnProcesses Process }o--|{ Asset : inputs Process }o--|{ Asset : outputs Process }o--o{ MatillionComponent: matillionComponent Process ||--o{ SparkJob : sparkJobs ColumnProcess }o--|{ Asset : inputs ColumnProcess }o--|{ Asset : outputs Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/lineage/",
    "scraped_at": "2025-09-15 19:53:11",
    "content_length": 1971,
    "topic": "API_SDK"
  },
  {
    "title": "AuthService - Developer",
    "content": "AuthService ¶ Model to store auth service in Atlas Complete reference This is a complete reference for the AuthService object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. AuthService inherits its attributes and relationships from these other types: classDiagram direction RL class AuthService link AuthService \"../authservice\" class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- AuthService : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from AuthService 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) These attributes are specific to instances of AuthService (and all of its subtypes). authServiceConfig ¶ TBC authServiceIsEnabled ¶ TBC authServicePolicyLastSync ¶ TBC authServiceType ¶ TBC tagService ¶ TBC Relationships ¶ Inherited relationships These relationships are inherited from AuthService 's supertypes: anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/authservice/",
    "scraped_at": "2025-09-15 19:53:12",
    "content_length": 18213,
    "topic": "SSO"
  },
  {
    "title": "Asset is deleted - Developer",
    "content": "Events when an asset is deleted ¶ When an asset is deleted in Atlan, the following event is emitted. ENTITY_DELETE ¶ Atlan always emits an ENTITY_DELETE event when an asset is deleted. The details in the event are for the asset that was deleted. No entity update or relationship deletion events Note that there are no ENTITY_UPDATE events for any related assets, nor any events about any relationships being deleted. In the case of a soft-delete, the relationship actually still exists (just in a soft-deleted state). Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/events/scenarios/asset-delete/",
    "scraped_at": "2025-09-15 19:53:14",
    "content_length": 694,
    "topic": "API_SDK"
  },
  {
    "title": "8 docs tagged with \"databricks\" | Atlan Documentation",
    "content": "Cross-workspace extraction Frequently asked questions about Databricks cross-workspace extraction setup and configuration. Cross-workspace extraction issues Troubleshoot common issues in Databricks cross-workspace extraction with error, cause, and solution guidance. Databricks Integrate, catalog, and govern Databricks assets in Atlan. Databricks Data Quality Studio Set up and configure Databricks for data quality monitoring through Atlan. Enable data quality on connection Enable and configure data quality for your Databricks connection in Atlan. Set up cross-workspace extraction Configure a single service principal to crawl metadata from all workspaces within a Databricks metastore using system tables Set up Databricks Configure Databricks to enable data quality monitoring through Atlan. Setup and configuration Common questions about Databricks data quality setup and configuration.",
    "url": "https://docs.atlan.com/tags/databricks",
    "scraped_at": "2025-09-15 19:53:15",
    "content_length": 894,
    "topic": "API_SDK"
  },
  {
    "title": "SisenseFolder - Developer",
    "content": "SisenseFolder ¶ Instance of a Sisense folder in Atlan. Complete reference This is a complete reference for the SisenseFolder object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. SisenseFolder inherits its attributes and relationships from these other types: classDiagram direction RL class SisenseFolder link SisenseFolder \"../sisensefolder\" class Sisense { <<abstract>> } link Sisense \"../sisense\" Sisense <|-- SisenseFolder : extends class BI { <<abstract>> } link BI \"../bi\" BI <|-- Sisense : extends class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- BI : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from SisenseFolder 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) These attributes are specific to instances of SisenseFolder (and all of its subtypes). sisenseFolderParentFolderQualifiedName ¶ Unique name of the parent folder in which this folder exists. Relationships ¶ Inherited relationships These relationships are inherited from SisenseFolder 's supertypes: anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos inputToAirflowTasks ( AirflowTask ) ¶ Tasks to which this asset provides input. inputToProcesses ( Process ) ¶ Processes to which this asset provides input. inputToSparkJobs ( SparkJob ) ¶ TBC modelImplementedAttributes ( ModelAttribute ) ¶ Attributes implemented by this asset. modelImplementedEntities ( ModelEntity ) ¶ Entities implemented by this asset. outputFromAirflowTasks ( AirflowTask ) ¶ Tasks from which this asset is output. outputFromProcesses ( Process ) ¶ Processes from which this asset is produced as output. outputFromSparkJobs ( SparkJob ) ¶ TBC These relationships are specific to instances of SisenseFolder (and all of its subtypes). sisenseChildFolders ( SisenseFolder ) ¶ Sub-folders that exist within this folder. sisenseDashboards ( SisenseDashboard ) ¶ Dashboards that exist within this folder. sisenseParentFolder ( SisenseFolder ) ¶ Folder in which this sub-folder exists. sisenseWidgets ( SisenseWidget ) ¶ Widgets that exist within this folder. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/sisensefolder/",
    "scraped_at": "2025-09-15 19:53:17",
    "content_length": 19431,
    "topic": "SSO"
  },
  {
    "title": "Preflight checks for Salesforce | Atlan Documentation",
    "content": "On this page Before running the Salesforce crawler , you can run preflight checks to perform the necessary technical validations. The following preflight checks will be completed: Organization count check ​ ✅ Organization Count check passed. Organization ID:<organization ID> Organization Name: <organization name> ❌ Check failed or sObject type 'Organization' is not supported Folder count check ​ ✅ Folder Count check passed. Total folders: <count> ❌ Check failed Report count check ​ ✅ Report Count check passed. Total reports: <count> ❌ Check failed or MALFORMED_QUERY: Invalid SOQL query. Please check the syntax and try again. or INVALID_TYPE : sObject type 'Report’ is not supported Dashboard count check ​ ✅ Dashboard Count check passed. Total dashboards: <count> ❌ Check failed or INVALID_TYPE : sObject type 'Dashboard’ is not supported Salesforce object count check ​ ✅ Salesforce Object Count check passed. Total SObjects: <count> ❌ Check failed Field count check ​ ✅ Field Count check passed. Total organization fields: <count> ❌ Check failed or MALFORMED_QUERY: Invalid SOQL query. Please check the syntax and try again. or INVALID_TYPE : sObject type 'EntityDefinition’ is not supported Organization count check Folder count check Report count check Dashboard count check Salesforce object count check Field count check",
    "url": "https://docs.atlan.com/apps/connectors/crm/salesforce/references/preflight-checks-for-salesforce",
    "scraped_at": "2025-09-15 19:53:18",
    "content_length": 1334,
    "topic": "HOW_TO"
  },
  {
    "title": "Manage Snowflake tags | Atlan Documentation",
    "content": "On this page Note that object tagging in Snowflake currently requires Enterprise Edition or higher . Atlan enables you to import your Snowflake tags , update your Snowflake assets with the imported tags, and push the tag updates back to Snowflake: Import tags - crawl Snowflake tags from Snowflake to Atlan Reverse sync - sync Snowflake tag updates from Atlan to Snowflake Once you've imported your Snowflake tags to Atlan: Your Snowflake assets in Atlan are automatically enriched with their Snowflake tags. Imported Snowflake tags are mapped to corresponding Atlan tags through case-insensitive name match - multiple Snowflake tags can be matched to a single tag in Atlan. You can also attach Snowflake tags , including tag values, to your Snowflake assets in Atlan - allowing you to categorize your assets at a more granular level. Atlan supports: Allowed values : attach an allowed value from a predefined list of values imported from Snowflake. Tag values: enter any value in Atlan while attaching or editing imported Snowflake tags on an asset. You can enable reverse sync to push any tag updates for your Snowflake assets back to Snowflake - including allowed and tag values added to assets in Atlan. You can filter your assets by Snowflake tags and tag and allowed values. Did you know? Enabling reverse sync only updates existing tags in Snowflake. It neither creates nor deletes any tags in Snowflake. Prerequisites ​ Did you know? Additional privileges are only required when using the information schema method for fetching metadata. This is because Snowflake stores all tag objects in the ACCOUNT_USAGE schema. If you're using the account usage method to crawl metadata in Atlan or you have configured the Snowflake miner , any permissions required are already set. Account usage method ​ Before you can import tags from Snowflake, you need to do the following: Create tags or have existing tags in Snowflake. Grant the same permissions as required for crawling Snowflake assets to import tags and push updated tags to Snowflake. Information schema method ​ Before you can import tags from Snowflake, you need to do the following: Create tags or have existing tags in Snowflake. Grant additional permissions to import tags from Snowflake. Grant additional permissions to push updated tags to Snowflake. Import Snowflake tags to Atlan ​ Who can do this? You need to be an admin user in Atlan to import Snowflake tags to Atlan. You also need to work with your Snowflake administrator to grant additional permissions to import tags from Snowflake - you may not have access yourself. You can import your Snowflake tags to Atlan through one-way tag sync. The synced Snowflake tags are matched to corresponding tags in Atlan through case-insensitive name match and your Snowflake assets are enriched with their synced tags from Snowflake. To import Snowflake tags to Atlan, you can either: Create a new Snowflake workflow and configure the crawler to import tags. Modify the crawler's configuration for an existing Snowflake workflow to change Import Tags to Yes . If you subsequently modify the workflow to disable tag import, for any tags already imported, Atlan preserves those tags. Once the crawler has completed running, tags imported from Snowflake are available to use for tagging assets! 🎉 View Snowflake tags in Atlan ​ Once you've imported your Snowflake tags, you can view and manage your Snowflake tags in Atlan. To view Snowflake tags: From the left menu of any screen, click Governance . Under the Governance heading of the _Governance cente_r, click Tags . (Optional) Under Tags , click the funnel icon to filter tags by source type. Click Snowflake to filter for tags imported from Snowflake. From the left menu under Tags , select a synced tag - synced tags display the Snowflake ❄️ icon next to the tag name. In the Overview section, you can view a total count of synced Snowflake tags. To the right of Overview , click Synced tags to view additional details - including tag name, description, tag values, total count of linked assets, connection, database, and schema names, and timestamp for last synced. (Optional) Click the Linked assets tab to view linked assets for your Snowflake tag. (Optional) In the top right, click the pencil icon to add a description and change the tag icon . You can't rename tags synced from Snowflake. Push tag updates to Snowflake ​ Who can do this? Any admin or member user in Atlan can configure reverse sync for tag updates to Snowflake. You also need to work with your Snowflake administrator to grant additional permissions to push updates - you may not have access yourself. Did you know? Reverse sync is currently only available for imported Snowflake tags in Atlan. The imported tags display a Snowflake ❄️ icon next to the tag name. If using the account usage method , expect a data latency of up to 3 hours for reverse tag sync to be successful. You can enable reverse sync for your imported Snowflake tags in Atlan and push all tag updates for your Snowflake assets back to source. Once you have enabled reverse sync, any Snowflake assets with tags updated in Atlan are also updated in Snowflake. To enable reverse sync for imported Snowflake tags: From the left menu of any screen, click Governance . Under the Governance heading of the _Governance cente_r, click Tags . (Optional) Under Tags , click the funnel icon to filter tags by source type. Click Snowflake to filter for tags imported from Snowflake. In the left menu under Tags , select a synced Snowflake tag - synced tags display the Snowflake ❄️ icon next to the tag name. On your selected tag page, to the right of Overview , click Synced tags . Under Synced tags , in the upper right, turn on Enable reverse sync to synchronize tag updates from Atlan to Snowflake. In the advanced settings, you can also enable concatenation to support multiple tag values for a single column. For detailed information about multiple tag values and concatenation, see Multiple tag values and concatenation . In the corresponding confirmation dialog, click Yes, enable it to enable reverse tag sync or click Cancel . Now when you attach Snowflake tags to your Snowflake assets in Atlan, these tag updates are also pushed to Snowflake! 🎉 Did you know? Enabling reverse sync won't trigger any updates in Snowflake until synced tags are attached to Snowflake assets in Atlan. For any questions about managing Snowflake tags, head over here . Prerequisites Import Snowflake tags to Atlan View Snowflake tags in Atlan Push tag updates to Snowflake",
    "url": "https://docs.atlan.com/apps/connectors/data-warehouses/snowflake/how-tos/manage-snowflake-tags",
    "scraped_at": "2025-09-15 19:53:19",
    "content_length": 6559,
    "topic": "API_SDK"
  },
  {
    "title": "4 docs tagged with \"sql\" | Atlan Documentation",
    "content": "Cloudera Impala Integrate, catalog, and govern Cloudera Impala assets in Atlan. CrateDB Integrate, catalog, and govern CrateDB assets in Atlan. PrestoSQL Integrate, catalog, and govern PrestoSQL assets in Atlan. Trino Integrate, catalog, and govern Trino assets in Atlan.",
    "url": "https://docs.atlan.com/tags/sql",
    "scraped_at": "2025-09-15 19:53:20",
    "content_length": 271,
    "topic": "API_SDK"
  },
  {
    "title": "CogniteAsset - Developer",
    "content": "CogniteAsset ¶ Instance of a Cognite asset in Atlan. Complete reference This is a complete reference for the CogniteAsset object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. CogniteAsset inherits its attributes and relationships from these other types: classDiagram direction RL class CogniteAsset link CogniteAsset \"../cogniteasset\" class Cognite { <<abstract>> } link Cognite \"../cognite\" Cognite <|-- CogniteAsset : extends class SaaS { <<abstract>> } link SaaS \"../saas\" SaaS <|-- Cognite : extends class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- SaaS : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from CogniteAsset 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) Relationships ¶ Inherited relationships These relationships are inherited from CogniteAsset 's supertypes: anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos inputToAirflowTasks ( AirflowTask ) ¶ Tasks to which this asset provides input. inputToProcesses ( Process ) ¶ Processes to which this asset provides input. inputToSparkJobs ( SparkJob ) ¶ TBC modelImplementedAttributes ( ModelAttribute ) ¶ Attributes implemented by this asset. modelImplementedEntities ( ModelEntity ) ¶ Entities implemented by this asset. outputFromAirflowTasks ( AirflowTask ) ¶ Tasks from which this asset is output. outputFromProcesses ( Process ) ¶ Processes from which this asset is produced as output. outputFromSparkJobs ( SparkJob ) ¶ TBC These relationships are specific to instances of CogniteAsset (and all of its subtypes). cognite3dmodels ( Cognite3DModel ) ¶ 3D models that exist within this asset. cogniteEvents ( CogniteEvent ) ¶ Events that exist within this asset. cogniteFiles ( CogniteFile ) ¶ Files that exist within this asset. cogniteSequences ( CogniteSequence ) ¶ Sequences that exist within this asset. cogniteTimeseries ( CogniteTimeSeries ) ¶ Time series that exist within this asset. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/cogniteasset/",
    "scraped_at": "2025-09-15 19:53:22",
    "content_length": 19297,
    "topic": "SSO"
  },
  {
    "title": "MCRuleComparison - Developer",
    "content": "MCRuleComparison ¶ Detailed information about the comparison logic of a Monte Carlo rule. Complete reference This is a complete reference for the MCRuleComparison struct in Atlan, showing all of its embedded properties. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. Embedded properties ¶ These are the attributes embedded within each instance of the MCRuleComparison struct in an asset: mcRuleComparisonType ¶ Type of comparison, for example threshold. mcRuleComparisonField ¶ Field being compared. mcRuleComparisonMetric ¶ Metric being compared. mcRuleComparisonOperator ¶ Operator used for the comparison, for example greater than (GT). mcRuleComparisonThreshold ¶ Threshold being compared. mcRuleComparisonIsThresholdRelative ¶ Whether the threshold comparison is relative (true) or absolute (false). Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/structs/mcrulecomparison/",
    "scraped_at": "2025-09-15 19:53:23",
    "content_length": 1118,
    "topic": "API_SDK"
  },
  {
    "title": "AzureServiceBusNamespace - Developer",
    "content": "AzureServiceBusNamespace ¶ Instances of AzureServiceBusNamespace in Atlan. Complete reference This is a complete reference for the AzureServiceBusNamespace object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. AzureServiceBusNamespace inherits its attributes and relationships from these other types: classDiagram direction RL class AzureServiceBusNamespace link AzureServiceBusNamespace \"../azureservicebusnamespace\" class AzureServiceBus { <<abstract>> } link AzureServiceBus \"../azureservicebus\" AzureServiceBus <|-- AzureServiceBusNamespace : extends class EventStore { <<abstract>> } link EventStore \"../eventstore\" EventStore <|-- AzureServiceBus : extends class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- EventStore : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from AzureServiceBusNamespace 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) azureServiceBusNamespaceName ¶ Simple name of the AzureServiceBus Namespace in which this asset exists. azureServiceBusNamespaceQualifiedName ¶ Unique name of the AzureServiceBus Namespace in which this asset exists. azureServiceBusSchemaQualifiedName ¶ Unique name of the AzureServiceBus Schema in which this asset exists. Relationships ¶ Inherited relationships These relationships are inherited from AzureServiceBusNamespace 's supertypes: anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos inputToAirflowTasks ( AirflowTask ) ¶ Tasks to which this asset provides input. inputToProcesses ( Process ) ¶ Processes to which this asset provides input. inputToSparkJobs ( SparkJob ) ¶ TBC modelImplementedAttributes ( ModelAttribute ) ¶ Attributes implemented by this asset. modelImplementedEntities ( ModelEntity ) ¶ Entities implemented by this asset. outputFromAirflowTasks ( AirflowTask ) ¶ Tasks from which this asset is output. outputFromProcesses ( Process ) ¶ Processes from which this asset is produced as output. outputFromSparkJobs ( SparkJob ) ¶ TBC These relationships are specific to instances of AzureServiceBusNamespace (and all of its subtypes). azureServiceBusTopics ( AzureServiceBusTopic ) ¶ AzureServiceBusTopic assets contained within this AzureServiceBusNamespace. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/azureservicebusnamespace/",
    "scraped_at": "2025-09-15 19:53:25",
    "content_length": 19569,
    "topic": "SSO"
  },
  {
    "title": "DataContract - Developer",
    "content": "DataContract ¶ Data contract for an asset. Complete reference This is a complete reference for the DataContract object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. DataContract inherits its attributes and relationships from these other types: classDiagram direction RL class DataContract link DataContract \"../datacontract\" class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- DataContract : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from DataContract 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) These attributes are specific to instances of DataContract (and all of its subtypes). dataContractAssetGuid ¶ Unique identifier of the asset associated with this data contract. dataContractJson ¶ (Deprecated) Replaced by dataContractSpec attribute. dataContractSpec ¶ Actual content of the contract in YAML string format. Any changes to this string should create a new instance (with new sequential version number). dataContractVersion ¶ Version of the contract. Relationships ¶ Inherited relationships These relationships are inherited from DataContract 's supertypes: anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos inputToAirflowTasks ( AirflowTask ) ¶ Tasks to which this asset provides input. inputToProcesses ( Process ) ¶ Processes to which this asset provides input. inputToSparkJobs ( SparkJob ) ¶ TBC modelImplementedAttributes ( ModelAttribute ) ¶ Attributes implemented by this asset. modelImplementedEntities ( ModelEntity ) ¶ Entities implemented by this asset. outputFromAirflowTasks ( AirflowTask ) ¶ Tasks from which this asset is output. outputFromProcesses ( Process ) ¶ Processes from which this asset is produced as output. outputFromSparkJobs ( SparkJob ) ¶ TBC These relationships are specific to instances of DataContract (and all of its subtypes). dataContractAssetCertified ( Asset ) ¶ Asset this contract controls. dataContractAssetLatest ( Asset ) ¶ Asset this contract controls or will control. dataContractNextVersion ( DataContract ) ¶ Data contract instance that holds the next version of this contract. dataContractPreviousVersion ( DataContract ) ¶ Data contract instance that holds the previous version of this contract. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/datacontract/",
    "scraped_at": "2025-09-15 19:53:26",
    "content_length": 19595,
    "topic": "SSO"
  },
  {
    "title": "PowerBIDataflow - Developer",
    "content": "PowerBIDataflow ¶ Instance of a Power BI dataflow in Atlan. Dataflows are reusable transformation logic that can be shared by many datasets and reports inside Power BI. Complete reference This is a complete reference for the PowerBIDataflow object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. PowerBIDataflow inherits its attributes and relationships from these other types: classDiagram direction RL class PowerBIDataflow link PowerBIDataflow \"../powerbidataflow\" class PowerBI { <<abstract>> } link PowerBI \"../powerbi\" PowerBI <|-- PowerBIDataflow : extends class BI { <<abstract>> } link BI \"../bi\" BI <|-- PowerBI : extends class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- BI : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from PowerBIDataflow 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) powerBIEndorsement ¶ Endorsement status of this asset, in Power BI. powerBIFormatString ¶ Format of this asset, as specified in the FORMAT_STRING of the MDX cell property. powerBIIsHidden ¶ Whether this asset is hidden in Power BI (true) or not (false). powerBITableQualifiedName ¶ Unique name of the Power BI table in which this asset exists. These attributes are specific to instances of PowerBIDataflow (and all of its subtypes). powerBIDataflowRefreshScheduleFrequency ¶ Refresh Schedule frequency for a PowerBI Dataflow. powerBIDataflowRefreshScheduleTimeZone ¶ Time zone for the refresh schedule set for a PowerBI Dataflow. powerBIDataflowRefreshScheduleTimes ¶ Time for the refresh schedule set for a PowerBI Dataflow. webUrl ¶ Deprecated. See 'sourceUrl' instead. workspaceQualifiedName ¶ Unique name of the workspace in which this dataflow exists. Relationships ¶ Inherited relationships These relationships are inherited from PowerBIDataflow 's supertypes: anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos inputToAirflowTasks ( AirflowTask ) ¶ Tasks to which this asset provides input. inputToProcesses ( Process ) ¶ Processes to which this asset provides input. inputToSparkJobs ( SparkJob ) ¶ TBC modelImplementedAttributes ( ModelAttribute ) ¶ Attributes implemented by this asset. modelImplementedEntities ( ModelEntity ) ¶ Entities implemented by this asset. outputFromAirflowTasks ( AirflowTask ) ¶ Tasks from which this asset is output. outputFromProcesses ( Process ) ¶ Processes from which this asset is produced as output. outputFromSparkJobs ( SparkJob ) ¶ TBC These relationships are specific to instances of PowerBIDataflow (and all of its subtypes). datasets ( PowerBIDataset ) ¶ Datasets used by this dataflow. powerBIDataflowChildren ( PowerBIDataflow ) ¶ Child Dataflows to this PowerBI Dataflow. powerBIDataflowEntityColumns ( PowerBIDataflowEntityColumn ) ¶ PowerBI Dataflow Entity Columns that exist within this Dataflow. powerBIDataflowParents ( PowerBIDataflow ) ¶ Parent Dataflows to this PowerBI Dataflow. powerBIDatasources ( PowerBIDatasource ) ¶ PowerBI Datasources that are associated with this Dataflow. powerBIProcesses ( Process ) ¶ Lineage process that associates this PowerBI Dataflow. tables ( PowerBITable ) ¶ PowerBI Tables that are associated with this Dataflow. workspace ( PowerBIWorkspace ) ¶ Workspace in which this dataflow exists. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/powerbidataflow/",
    "scraped_at": "2025-09-15 19:53:28",
    "content_length": 20620,
    "topic": "SSO"
  },
  {
    "title": "QuickSight - Developer",
    "content": "QuickSight model ¶ Base class for QuickSight assets. Reference documentation This is reference documentation covering the entire Atlan model. It is not the best place to start when trying to understand how to manage QuickSight assets in Atlan. For that, we would suggest starting with either: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. classDiagram direction RL class QuickSight { <<abstract>> } link QuickSight \"../quicksight\" class BI { <<abstract>> } link BI \"../entities/bi\" BI <|-- QuickSight : extends class Catalog { <<abstract>> } link Catalog \"../entities/catalog\" Catalog <|-- BI : extends class Asset { <<abstract>> } link Asset \"../entities/asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../entities/referenceable\" Referenceable <|-- Asset : extends class QuickSightFolder link QuickSightFolder \"../entities/quicksightfolder\" QuickSight <|-- QuickSightFolder : extends class QuickSightDashboardVisual link QuickSightDashboardVisual \"../entities/quicksightdashboardvisual\" QuickSight <|-- QuickSightDashboardVisual : extends class QuickSightAnalysisVisual link QuickSightAnalysisVisual \"../entities/quicksightanalysisvisual\" QuickSight <|-- QuickSightAnalysisVisual : extends class QuickSightDatasetField link QuickSightDatasetField \"../entities/quicksightdatasetfield\" QuickSight <|-- QuickSightDatasetField : extends class QuickSightAnalysis link QuickSightAnalysis \"../entities/quicksightanalysis\" QuickSight <|-- QuickSightAnalysis : extends class QuickSightDashboard link QuickSightDashboard \"../entities/quicksightdashboard\" QuickSight <|-- QuickSightDashboard : extends class QuickSightDataset link QuickSightDataset \"../entities/quicksightdataset\" QuickSight <|-- QuickSightDataset : extends Properties ¶ These attributes are specific to instances of QuickSight (and all of its subtypes). quickSightId ¶ TBC quickSightSheetId ¶ TBC quickSightSheetName ¶ TBC Relationships ¶ The following illustrates how the various QuickSight objects inter-relate with each other: erDiagram Connection ||..o{ QuickSightAnalysis : \"\" Connection ||..o{ QuickSightDashboard : \"\" Connection ||..o{ QuickSightDataset : \"\" Connection ||..o{ QuickSightFolder : \"\" QuickSightFolder }o--o{ QuickSightAnalysis : quickSightAnalyses QuickSightFolder }o--o{ QuickSightDashboard : quickSightDashboards QuickSightFolder }o--o{ QuickSightDataset : quickSightDatasets QuickSightAnalysis |o--o{ QuickSightAnalysisVisual : quickSigntAnalysisVisuals QuickSightDashboard |o--o{ QuickSightDashboardVisual : quickSightDashboardVisuals QuickSightDataset |o--o{ QuickSightDatasetField : quickSightDatasetFields Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/quicksight/",
    "scraped_at": "2025-09-15 19:53:30",
    "content_length": 2898,
    "topic": "API_SDK"
  },
  {
    "title": "6 docs tagged with \"workflows\" | Atlan Documentation",
    "content": "Alteryx Integrate, catalog, and govern Alteryx assets in Atlan using OpenLineage. Data Pipelines Learn how to connect your data pipelines to Atlan. Explore ETL tools, workflow orchestration, and lineage tracking to build a comprehensive view of your data movement. Playbooks Create and manage automated workflows for metadata management and data governance. Send alerts for workflow events Learn how to configure alerts for workflow events in Atlan via email or Google Chat. Source owner manager Reference for source owner management capabilities and configuration in stewardship workflows Stewardship Learn how to implement data stewardship in Atlan through automated workflows, policies, and task management.",
    "url": "https://docs.atlan.com/tags/workflows",
    "scraped_at": "2025-09-15 19:53:31",
    "content_length": 710,
    "topic": "SSO"
  },
  {
    "title": "9 docs tagged with \"troubleshooting\" | Atlan Documentation",
    "content": "Connection issues Resolve common connection and authentication issues when setting up CrateDB connector Cross-workspace extraction issues Troubleshoot common issues in Databricks cross-workspace extraction with error, cause, and solution guidance. Deployment and security Frequently asked questions about Secure Agent 2.0 deployment and security Frequently Asked Questions Find answers to common questions about using Atlan, organized by topic area for quick resolution. Lineage [Data lineage](/product/capabilities/lineage/how-tos/view-lineage) captures how data moves across your data landscape. This information is useful to:. Setup and configuration Common questions about Databricks data quality setup and configuration. Supported sources Learn about supported sources. Troubleshooting Anomalo connectivity Learn about troubleshooting anomalo connectivity. Troubleshooting Slack What do the colors in Slack notifications for modified assets mean?",
    "url": "https://docs.atlan.com/tags/troubleshooting",
    "scraped_at": "2025-09-15 19:53:32",
    "content_length": 951,
    "topic": "API_SDK"
  },
  {
    "title": "Crawl on-premises Looker | Atlan Documentation",
    "content": "On this page Once you have set up the looker-extractor tool , you can extract metadata from your on-premises Looker instances using the following steps. Run looker-extractor ​ Crawl all Looker connections ​ To crawl all Looker connections using the looker-extractor tool: Log into the server with Docker Compose installed. Change to the directory containing the compose file. Run Docker Compose: sudo docker-compose up Crawl a specific connection ​ To crawl a specific Looker connection using the looker-extractor tool: Log into the server with Docker Compose installed. Change to the directory containing the compose file. Run Docker Compose: sudo docker-compose up <CONNECTION-NAME> (Replace <CONNECTION-NAME> with the name of the connection from the services section of the compose file.) (Optional) Review generated files ​ The looker-extractor tool will generate many JSON files for each service . For example: projects.json dashboards.json dashboard_tiles.json looks.json and many others You can inspect the metadata and make sure it is acceptable to provide the metadata to Atlan. Upload generated files to S3 ​ To provide Atlan access to the extracted metadata you will need to upload the metadata to an S3 bucket. Did you know? We recommend uploading to the same S3 bucket as Atlan uses to avoid access issues. Reach out to your Data Success Manager to get the details of your Atlan bucket. To create your own bucket, refer to the Create your own S3 bucket section of the dbt documentation. (The steps will be exactly the same.) To upload the metadata to S3: Ensure all files for a particular database have the same prefix. For example, metadata/looker/projects.json , metadata/looker/dashboards.json , etc. Upload the files to the S3 bucket using your preferred method. For example, to upload all files using the AWS CLI : aws s3 cp output/looker-example s3://my-bucket/metadata/looker-example --recursive Crawl metadata in Atlan ​ Once you have extracted metadata on-premises and uploaded the results to S3, you can crawl the metadata into Atlan: How to crawl Looker Be sure you select Offline for the Extraction method . Run looker-extractor (Optional) Review generated files Upload generated files to S3 Crawl metadata in Atlan",
    "url": "https://docs.atlan.com/apps/connectors/business-intelligence/looker/how-tos/crawl-on-premises-looker",
    "scraped_at": "2025-09-15 19:53:33",
    "content_length": 2240,
    "topic": "API_SDK"
  },
  {
    "title": "What does Atlan crawl from Databricks? | Atlan Documentation",
    "content": "On this page Atlan crawls and maps the following assets and properties from Databricks. info The following properties aren't crawled by the System tables extraction method: Table properties : partitionList , partitionCount Column properties : maxLength , precision Databases ​ Atlan maps databases from Databricks to its Database asset type. Source property Atlan property Where in Atlan TABLE_CATALOG name Asset profile and overview sidebar SCHEMA_COUNT schemaCount API only Schemas ​ Atlan maps schemas from Databricks to its Schema asset type. Source property Atlan property Where in Atlan TABLE_SCHEMA name Asset profile and overview sidebar TABLE_COUNT tableCount Asset preview and profile VIEW_COUNT viewsCount Asset preview and profile TABLE_CATALOG databaseName Asset preview and profile Tables ​ Atlan maps tables from Databricks to its Table asset type. Source property Atlan property Where in Atlan TABLE_NAME name Asset profile and overview sidebar REMARKS, DESCRIPTION description Asset profile and overview sidebar COLUMN_COUNT columnCount Asset profile and overview sidebar LOCATION externalLocation Overview sidebar FORMAT externalLocationFormat Overview sidebar OWNER Created (in Databricks) Properties sidebar CREATEDAT sourceCreatedAt Properties sidebar UPDATED_BY Last updated Properties sidebar LASTMODIFIED sourceUpdatedAt Properties sidebar PARTITIONS isPartitioned , partitionCount , partitionList API only Views ​ Atlan maps views from Databricks to its View asset type. Source property Atlan property Where in Atlan TABLE_NAME name Asset profile and overview sidebar REMARKS description Asset profile and overview sidebar COLUMN_COUNT columnCount Asset profile and overview sidebar CREATETAB_STMT definition Asset profile and overview sidebar OWNER Created (in Databricks) Properties sidebar CREATEDAT sourceCreatedAt Properties sidebar UPDATED_BY Last updated Properties sidebar LASTMODIFIED sourceUpdatedAt Properties sidebar Materialized views ​ Atlan maps materialized views from Databricks to its MaterialisedView asset type. Source property Atlan property Where in Atlan TABLE_NAME name Asset profile and overview sidebar REMARKS description Asset profile and overview sidebar COLUMN_COUNT columnCount Asset profile and overview sidebar CREATETAB_STMT definition Asset profile and overview sidebar OWNER Created (in Databricks) Properties sidebar CREATEDAT sourceCreatedAt Properties sidebar UPDATED_BY Last updated Properties sidebar LASTMODIFIED sourceUpdatedAt Properties sidebar Columns ​ Did you know? To help you work seamlessly with STRUCT data types, Atlan supports nested columns up to level 30 in Databricks. You can view these columns in the Tree view or the asset sidebar of your table assets, and also explore child columns of STRUCTs nested within MAPs or ARRAYs. However, lineage for nested columns isn't supported. Atlan maps columns from Databricks to its Column asset type. Source property Atlan property Where in Atlan PRIMARY KEY isPrimary Asset preview and filter, overview sidebar FOREIGN KEY isForeign Asset preview and filter, overview sidebar COLUMN_NAME name Asset profile and overview sidebar REMARKS description Asset profile and overview sidebar ORDINAL_POSITION order Asset profile TYPE_NAME dataType Asset profile and overview sidebar PARTITION_INDEX isPartition Asset preview and profile NULLABLE isNullable API only CHAR_OCTET_LENGTH maxLength API only DECIMAL_DIGITS precision API only Databases Schemas Tables Views Materialized views Columns",
    "url": "https://docs.atlan.com/apps/connectors/data-warehouses/databricks/references/what-does-atlan-crawl-from-databricks",
    "scraped_at": "2025-09-15 19:53:34",
    "content_length": 3509,
    "topic": "API_SDK"
  },
  {
    "title": "6 docs tagged with \"remote\" | Atlan Documentation",
    "content": "Remote MCP Learn about Atlan's Remote MCP server, a hosted solution that enables AI agents to access Atlan metadata without local infrastructure setup. Set up Claude with Remote MCP Learn how to configure Claude (Connector and Desktop) to use Atlan's Remote MCP server for seamless AI-powered metadata access. Set up Cursor with Remote MCP Learn how to configure Cursor to use Atlan's Remote MCP server for seamless AI-powered metadata access. Set up Microsoft Copilot Studio with Remote MCP Learn how to configure Microsoft Copilot Studio to use Atlan's Remote MCP server with API Key authentication. Set up n8n with Remote MCP Learn how to configure n8n to use Atlan's Remote MCP server with API Key authentication for automated workflows. Set up Windsurf with Remote MCP Learn how to configure Windsurf to use Atlan's Remote MCP server with API Key authentication.",
    "url": "https://docs.atlan.com/tags/remote",
    "scraped_at": "2025-09-15 19:53:36",
    "content_length": 867,
    "topic": "API_SDK"
  },
  {
    "title": "GCSBucket - Developer",
    "content": "GCSBucket ¶ Instance of a Google Cloud Storage bucket in Atlan. Complete reference This is a complete reference for the GCSBucket object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. GCSBucket inherits its attributes and relationships from these other types: classDiagram direction RL class GCSBucket link GCSBucket \"../gcsbucket\" class GCS { <<abstract>> } link GCS \"../gcs\" GCS <|-- GCSBucket : extends class Google { <<abstract>> } link Google \"../google\" Google <|-- GCS : extends class Cloud { <<abstract>> } link Cloud \"../cloud\" Cloud <|-- Google : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Cloud : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends class ObjectStore { <<abstract>> } link ObjectStore \"../objectstore\" ObjectStore <|-- GCS : extends class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- ObjectStore : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from GCSBucket 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) googleLabels ¶ List of labels that have been applied to the asset in Google. googleLocation ¶ Location of this asset in Google. googleLocationType ¶ Type of location of this asset in Google. googleProjectId ¶ ID of the project in which the asset exists. googleProjectName ¶ Name of the project in which the asset exists. googleProjectNumber ¶ Number of the project in which the asset exists. googleService ¶ Service in Google in which the asset exists. googleTags ¶ List of tags that have been applied to the asset in Google. gcsAccessControl ¶ Access control list for this asset. gcsETag ¶ Entity tag for the asset. An entity tag is a hash of the object and represents changes to the contents of an object only, not its metadata. gcsEncryptionType ¶ Encryption algorithm used to encrypt this asset. gcsMetaGenerationId ¶ Version of metadata for this asset at this generation. Used for preconditions and detecting changes in metadata. A metageneration number is only meaningful in the context of a particular generation of a particular asset. gcsRequesterPays ¶ Whether the requester pays header was sent when this asset was created (true) or not (false). gcsStorageClass ¶ Storage class of this asset. These attributes are specific to instances of GCSBucket (and all of its subtypes). gcsBucketLifecycleRules ¶ Lifecycle rules for this bucket. gcsBucketRetentionEffectiveTime ¶ Effective time for retention of objects in this bucket. gcsBucketRetentionLocked ¶ Whether retention is locked for this bucket (true) or not (false). gcsBucketRetentionPeriod ¶ Retention period for objects in this bucket. gcsBucketRetentionPolicy ¶ Retention policy for this bucket. gcsBucketVersioningEnabled ¶ Whether versioning is enabled on the bucket (true) or not (false). gcsObjectCount ¶ Number of objects within the bucket. Relationships ¶ Inherited relationships These relationships are inherited from GCSBucket 's supertypes: inputToAirflowTasks ( AirflowTask ) ¶ Tasks to which this asset provides input. inputToProcesses ( Process ) ¶ Processes to which this asset provides input. inputToSparkJobs ( SparkJob ) ¶ TBC modelImplementedAttributes ( ModelAttribute ) ¶ Attributes implemented by this asset. modelImplementedEntities ( ModelEntity ) ¶ Entities implemented by this asset. outputFromAirflowTasks ( AirflowTask ) ¶ Tasks from which this asset is output. outputFromProcesses ( Process ) ¶ Processes from which this asset is produced as output. outputFromSparkJobs ( SparkJob ) ¶ TBC anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos These relationships are specific to instances of GCSBucket (and all of its subtypes). gcsObjects ( GCSObject ) ¶ GCS objects within this bucket. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/gcsbucket/",
    "scraped_at": "2025-09-15 19:53:37",
    "content_length": 21137,
    "topic": "SSO"
  },
  {
    "title": "What does Atlan crawl from Google BigQuery? | Atlan Documentation",
    "content": "On this page Once you have crawled Google BigQuery , you can use connector-specific filters for quick asset discovery. The following filters are currently supported for these assets: Tables - BigQuery labels and Is sharded filters Atlan doesn't run any table scans. Atlan leverages the table preview options from Google BigQuery that enable you to view data for free and without affecting any quotas using the tabledata.list API. Hence, table asset previews in Atlan are already cost-optimized. However, this doesn't apply to views and materialized views . For Google BigQuery views and materialized views , Atlan sends you a cost nudge before viewing a sample data preview. This informs you about the precise bytes that are spent during the execution of the query, helping you decide if you still want to run the preview. Did you know? You also receive a cost nudge before querying your Google BigQuery assets . Atlan crawls and maps the following assets and properties from Google BigQuery. Databases ​ Atlan maps projects from Google BigQuery to its Database asset type. Source property Atlan property Where in Atlan Project ID name asset preview, profile, and filter, overview sidebar Schemas ​ Atlan maps datasets from Google BigQuery to its Schema asset type. Source property Atlan property Where in Atlan TABLE_SCHEMA name asset preview and profile, overview sidebar TABLE_COUNT tableCount asset preview and profile VIEW_COUNT viewsCount asset preview and profile, overview sidebar TABLE_CATALOG databaseName asset preview REMARKS description asset preview and profile, overview sidebar CREATED sourceCreatedAt asset profile and properties sidebar MODIFIED sourceUpdatedAt asset profile and properties sidebar Tables ​ Did you know? Table asset previews are already cost-optimized. Google BigQuery enables you to use the table preview options to view data for free and without affecting any quotas. Note that this isn't currently supported for Google BigQuery views and materialized views in Atlan. Atlan maps tables from Google BigQuery to its Table asset type. Source property Atlan property Where in Atlan TABLE_NAME name asset preview and profile, overview sidebar REMARKS description asset preview and profile, overview sidebar COLUMN_COUNT columnCount asset preview and profile, overview sidebar ROW_COUNT rowCount asset preview, profile, and filter, overview sidebar SIZE_BYTES sizeBytes asset filter and overview sidebar TABLE_TYPE subType asset preview and profile LABELS assetTags overview sidebar CREATED sourceCreatedAt asset profile and properties sidebar MODIFIED sourceUpdatedAt asset profile and properties sidebar OPTION_NAMES (require_partition_filter) isPartitioned API only Views ​ Atlan maps views from Google BigQuery to its View asset type. Source property Atlan property Where in Atlan TABLE_NAME name asset preview and profile, overview sidebar REMARKS description asset preview and profile, overview sidebar COLUMN_COUNT columnCount asset preview and profile, overview sidebar TABLE_TYPE subType asset preview and profile CREATED sourceCreatedAt asset profile and properties sidebar MODIFIED sourceUpdatedAt asset profile and properties sidebar OPTION_NAMES (require_partition_filter) isPartitioned API only DDL definition asset profile and overview sidebar Materialized views ​ Atlan maps materialized views from Google BigQuery to its MaterialisedView asset type. Source property Atlan property Where in Atlan TABLE_NAME name asset preview and profile, overview sidebar REMARKS description asset preview and profile, overview sidebar COLUMN_COUNT columnCount asset preview and profile, overview sidebar ROW_COUNT rowCount asset preview, profile, and filter, overview sidebar SIZE_BYTES sizeBytes asset filter and overview sidebar TABLE_TYPE subType asset preview and profile CREATED sourceCreatedAt asset profile and properties sidebar MODIFIED sourceUpdatedAt asset profile and properties sidebar OPTION_NAMES (require_partition_filter) isPartitioned API only DDL definition asset profile and overview sidebar Columns ​ Atlan supports nested columns up to level 1 for Google BigQuery to help you enrich your semi-structured data types. You can view nested columns in the asset sidebar for your table assets. Atlan maps columns from Google BigQuery to its Column asset type. Important Atlan doesn't crawl primary key (PK) and foreign key (FK) information from Google BigQuery. Source property Atlan property Where in Atlan COLUMN_NAME name asset preview and profile, overview sidebar REMARKS, DESCRIPTION description asset preview and profile, overview sidebar ORDINAL_POSITION order asset profile TYPE_NAME dataType asset preview, profile, and filter, overview sidebar IS_NULLABLE isNullable API only IS_PARTITIONING_COLUMN isPartition asset preview, profile, and filter CLUSTERING_COLUMN_LIST isClustered asset preview, profile, and filter Stored procedures ​ Atlan maps stored procedures from Google BigQuery to its Procedure asset type. Source property Atlan property Where in Atlan PROCEDURE_NAME name API only REMARKS description API only PROCEDURE_TYPE subType API only ROUTINE_DEFINITION definition API only CREATED sourceCreatedAt API only MODIFIED sourceUpdatedAt API only Databases Schemas Tables Views Materialized views Columns Stored procedures",
    "url": "https://docs.atlan.com/apps/connectors/data-warehouses/google-bigquery/references/what-does-atlan-crawl-from-google-bigquery",
    "scraped_at": "2025-09-15 19:53:38",
    "content_length": 5293,
    "topic": "SSO"
  },
  {
    "title": "Set up Metabase | Atlan Documentation",
    "content": "On this page Who can do this? You will probably need your Metabase administrator to follow the below steps - you may not have access yourself. Create a user ​ To create a user for Atlan to use when integrating with Metabase: From the upper right corner of your Metabase instance, click the gear icon and then Admin Settings . At the top of the page, change to the People tab. To the upper right of the table, click the Invite someone button and enter their details: For First name enter the user's first name, for example Atlan . For Last name enter the user's last name, for example User . For Email enter the user's email address, for example a service account email address. At the bottom of the dialog, click the Create button. When prompted, click Done . Create a group ​ You can only attach Metabase permissions to groups . To create a group for Atlan to use when integrating with Metabase: From the upper right corner of your Metabase instance, click the gear icon and then Admin Settings . From the top menu bar, change to the People tab. From the left of the page, open the Groups tab. At the top right, click the Create a group button. For Group name enter Atlan . On the right of the row click the Add button. To add the user to the group: Click the Atlan group you created. To the upper right of the table, click the Add members button. Under Members start typing the name used above (for example, Atlan User ) and select it. On the right of the row, click the Add button. Set permissions ​ Did you know? We do not make any API requests or queries that will update the dashboards , collections or questions in your Metabase instance. Minimum permissions ​ To set the minimum permissions required to crawl Metabase : From the upper right corner of your Metabase instance, click the gear icon and then Admin Settings . From the top menu bar, change to the Permissions tab. From the top of the page, change to the Collection permissions tab. For each collection you want to crawl in Atlan: Under the Collections heading on the left, click the collection. Under Permissions for <collection name> , for the Atlan group, under Collection access click the No access drop-down. (Optional) To crawl sub-collections, toggle the Also change sub-collections option. Select the View permission. In the upper-right of the page, click the Save changes button. When prompted with Save permissions? click the Yes button to confirm. Partial lineage permissions ​ danger When a Metabase question uses native queries, these permissions cannot capture lineage to source tables and columns. To set the minimal permissions for extracting lineage from Metabase: From the upper right corner of your Metabase instance, click the gear icon and then Admin Settings . From the top menu bar, change to the Permissions tab. From the top of the page, change to the Data permissions tab. Below the tab, click the Groups pill. Below the pill, select the Atlan group. Under Permissions for the Atlan group , for each database: Under Data access change the drop-down value to Unrestricted . Although Atlan does not query data, this permission is necessary to enable the next option. Under Native query editing change the drop-down value to Yes . This permission is necessary for Atlan to parse the queries that power your Metabase questions, to generate lineage. In the upper-right of the page, click the Save changes button. When prompted with Save permissions? click the Yes button to confirm. Complete lineage permissions ​ To set permissions for extracting lineage from all your Metabase questions: From the upper right corner of your Metabase instance, click the gear icon and then Admin Settings . From the top menu bar, change to the People tab. On the row for the Atlan user you created above, under Groups change the drop-down value to Administrators . Did you know? Administrative access is necessary to get the default source database name used for queries. This is only available to Administrators. The unrestricted data access and native query editing permissions above are insufficient. (Optional) Allowlist the Atlan IP ​ If you are using the IP allowlist in your Metabase instance, you must add your Atlan IP to the allowlist. Please raise a support ticket to learn your Atlan IP. Create a user Create a group Set permissions (Optional) Allowlist the Atlan IP",
    "url": "https://docs.atlan.com/apps/connectors/business-intelligence/metabase/how-tos/set-up-metabase",
    "scraped_at": "2025-09-15 19:53:40",
    "content_length": 4351,
    "topic": "API_SDK"
  },
  {
    "title": "Troubleshooting Tableau connectivity | Atlan Documentation",
    "content": "On this page What are the known limitations of the Tableau connector? ​ Atlan currently does not support the following: Crawling Tableau flows when using the JWT bearer authentication method , due to limitations at source. Crawling tags from Tableau. Cataloging Tableau Pulse, stories, and views. Parsing custom SQL queries, where all tables referenced (whether in the main query or subqueries) are considered as upstream lineage for the asset. Why does Atlan require the Site Administrator Explorer role in Tableau? ​ Atlan requires the Site Administrator Explorer role in Tableau to extract data source fields and calculated fields. It is not possible to fetch data source fields and calculated fields with the Viewer role in the current version of the Tableau Metadata API. Atlan uses this data to generate granular column-level lineage across data sources and SQL assets. To extract lineage for assets in Tableau, the user must have the Site Administrator Explorer role. Is lineage available for Tableau custom SQL data sources? ​ Yes, Atlan can parse custom SQL queries in Tableau to generate lineage between the data source and tables. Lineage is available for tables from all SQL sources. However, column-level lineage is currently not supported. Why is upstream lineage missing for Tableau data sources? ​ If your Tableau data source is in a paused state , the Tableau Metadata API may fail to provide the requisite metadata on source databases and tables for Atlan to generate upstream lineage. Restart your Tableau data source and ensure that it remains active while crawling Tableau . This will allow Atlan to fetch the requisite metadata to generate upstream lineage for data sources. Why is there a discrepancy in asset count between Tableau and Atlan? ​ Dashboards - the Tableau UI does not display a unique count of dashboards. Dashboards in Tableau are represented in collections of one or more views. These may have same names as the views but are independent objects. Hence, the total count of these views in Tableau does not match the dashboard count in Atlan. Atlan sources the dashboard count from the Tableau API, which is the only reliable way to fetch the dashboard count. Data sources - embedded data sources are not reported on the Tableau UI. However, in Atlan, data sources can be filtered to show only published data sources, which should match the count of data sources on the Tableau UI. Can users who do not have access to a dashboard still see the preview? ​ Users can only see asset previews if the following conditions are met: They have the necessary permissions in both Tableau and Atlan. They are logged into Atlan and Tableau on the same browser. Therefore, if a user lacks the permission to view a dashboard in Tableau, they will not be able to view the dashboard preview in Atlan. Even if they do have the necessary permissions, they will need to be logged into Tableau on the same browser as their Atlan instance for asset previews to work. Why can I not see previews for my Tableau assets? ​ Your Tableau assets will be updated with previews during the next run of your Tableau workflow. If you have run the workflow and still do not see the previews, we suggest you rerun the workflow. Once you've rerun the workflow, the previews should be visible to all eligible users. If you're using Tableau Server with clickjack protection enabled and your Tableau instance URL is of a different origin than the Atlan instance URL, the asset previews will not load due to a same-origin error from the browser. You will need to disable clickjack protection to allow the Tableau asset previews to load. Is the certified status in Tableau mapped to the certificates field in Atlan? ​ Yes, the isCertified status for published data sources in Tableau is mapped to the certificates field in Atlan. Is the owner field in Tableau mapped to the owners field in Atlan? ​ No, the asset owner in Tableau is displayed as the source owner in the Overview section of the asset sidebar in Atlan. This is also only available for Tableau projects , flows , workbooks , and published data sources . Tableau has retired metrics methods in API 3.22 , hence source owner attribute for metrics is not supported in Atlan. Why am I getting a \"still creating the Metadata API store\" error? ​ Error message: Still creating the Metadata API Store. Results from the query might be incomplete at this time. BACKFILL-RUNNING If your Tableau workflow is failing with the above error message, this is because the Tableau Metadata API is being re-indexed after a quarterly release. The re-indexing of the Metadata API after quarterly releases can take up to a week, depending on the size of your instance. Since Atlan uses the Tableau Metadata API to fetch metadata, your Tableau workflows in Atlan may fail if the re-indexing has not been completed. You can check the backfill status of the Tableau Metadata API Store following this guide . Learn more about common errors in your Metadata API query. How to debug test authentication and preflight check errors? ​ Incorrect hostname Unable to connect to the specified host. Please verify that the host details are correct and retry. Ensure that you have entered the hostname for your Tableau Online or Tableau Server instance correctly. If you're using a domain name, verify that the DNS name correctly resolves to the corresponding IP address. Connection timed out Unable to connect to Tableau instance. Please verify server port or check if your server is up and running. Ensure that you're using the correct port number, especially if using a custom port for Tableau Server. Verify network connectivity and DNS resolution - you can also test from a different network or device. SSL error Unable to connect. Please check your SSL setting. Ensure that the server URL uses https if SSL is enabled . If the connection does not require an SSL, use http instead. The ssl details provided are incorrect. Please provide correct ssl certs. If your Tableau Server instance uses a self-signed or an internal CA SSL certificate, enter the SSL certificate correctly in the recommended format . Incorrect port number Unable to connect to Tableau instance. Please verify server port and retry. Ensure that you're using the correct port number, especially if using a custom port for Tableau Server. Invalid personal access token The personal access token you provided is invalid. Please check your PAT name and token value. Ensure that you have entered the token name correctly and it matches the token generated in Tableau: Token name is case-sensitive. Ensure that there are no extra spaces or characters. If the token you provided is invalid, you can create a new token . Incorrect site details The site details provided are incorrect. Please provide correct site details. Confirm that the site name in the URL matches the exact case and spelling of the site you are trying to access. Site names in Tableau are case-sensitive. Incorrect username Provided username is incorrect. Please check. Confirm that the username is present in Tableau. Otherwise, you can add a new user for basic authentication . Incorrect client ID The client id provided is incorrect or site is empty or connected app in tableau is deleted. Please check and try again. Ensure that you have specified the site name if using JWT bearer authentication. Ensure that the connected app is present in Tableau and verify the client ID. Incorrect secret ID or value The secret id provided is incorrect or the secret value is deleted. Please check and try again. or The secret value provided is incorrect. Please check your secret value and try again. Verify the secret ID of the connected app . Ensure that the secret value of the connected app has not been deleted.",
    "url": "https://docs.atlan.com/apps/connectors/business-intelligence/tableau/troubleshooting/troubleshooting-tableau-connectivity",
    "scraped_at": "2025-09-15 19:53:41",
    "content_length": 7771,
    "topic": "API_SDK"
  },
  {
    "title": "Asset is tagged - Developer",
    "content": "Events when an asset is tagged ¶ When an asset is tagged in Atlan, the following event is emitted. CLASSIFICATION_ADD ¶ Atlan always emits a CLASSIFICATION_ADD event when an asset is tagged. For both direct tags and propagations Remember that these events will be emitted for both the asset that was directly tagged as well as all assets to which the tag is propagated. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/events/scenarios/asset-classify/",
    "scraped_at": "2025-09-15 19:53:42",
    "content_length": 546,
    "topic": "API_SDK"
  },
  {
    "title": "Update — Apr 26 - Developer",
    "content": "Weekly update ¶ This week we: Revamped developer.atlan.com navigation Added support for SSO group mapping to Python SDK Python ¶ We've added: Support for SSO group mapping. AtlanSSO to enumerate the options for supported SSO providers in Atlan. Website ¶ We also revamped the navigation here in the developer portal: Moved away from snippets and patterns to: Common tasks that can be done across all assets Asset-specific tasks that can be done against specific kinds of assets Governance structures for operations on objects other than assets Added color icons for the various integration options we provide, to break up some of the monotone nature of the site URLs remain unchanged Any link you may have bookmarked should remain exactly as it was, despite the navigation revamp. Learn more ¶ Python SDK release notes Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/news/2024/04/26/update--apr-26/",
    "scraped_at": "2025-09-15 19:53:44",
    "content_length": 995,
    "topic": "SSO"
  },
  {
    "title": "Manage Google Data Studio assets - Developer",
    "content": "Manage Google Data Studio assets ¶ Operations on Google Data Studio assets (connections, data sources, reports). In general, these should be: Created in top-down order (connection, then data sources and reports) Deleted in bottom-up order (data sources and reports, then connections) 1 erDiagram Connection ||--o{ DataStudioAsset : contains Asset structure ¶ Connection ¶ 7.0.0 4.0.0 A Google Data Studio connection requires a name and qualifiedName . For creation, specific settings are also required to distinguish it as a Google Data Studio connection rather than another type of connection. In addition, at least one of adminRoles , adminGroups , or adminUsers must be provided. Java Python Kotlin Raw REST API Create a Google Data Studio connection 1 2 3 4 5 6 7 8 9 10 String adminRoleGuid = client . getRoleCache (). getIdForName ( \"$admin\" ); // (1) Connection connection = Connection . creator ( // (2) \"gds-connection\" , // (3) AtlanConnectorType . DATASTUDIO , // (4) List . of ( adminRoleGuid ), // (5) List . of ( \"group2\" ), // (6) List . of ( \"jsmith\" )) // (7) . build (); AssetMutationResponse response = connection . save ( client ); // (8) String connectionQualifiedName = response . getCreatedAssets (). get ( 0 ). getQualifiedName (); // (9) Retrieve the GUID for the admin role, to use later for defining the roles that can administer the connection. Build up the minimum request to create a connection. Provide a human-readable name for your connection, such as production or development . Set the type of connection to Google Data Studio. List the workspace roles that should be able to administer the connection (or null if none). All users with that workspace role (current and future) will be administrators of the connection. Note that the values here need to be the GUID(s) of the workspace role(s). At least one of adminRoles , adminGroups , or adminUsers must be provided. List the group names that can administer this connection (or null if none). All users within that group (current and future) will be administrators of the connection. Note that the values here are the name(s) of the group(s). At least one of adminRoles , adminGroups , or adminUsers must be provided. List the user names that can administer this connection (or null if none). Note that the values here are the username(s) of the user(s). At least one of adminRoles , adminGroups , or adminUsers must be provided. Actually call Atlan to create the connection. Because this operation will persist the asset in Atlan, you must provide it an AtlanClient through which to connect to the tenant. Retrieve the qualifiedName for use in subsequent creation calls. (You'd probably want to do some null checking first.) Create a GDS connection 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from pyatlan.client.atlan import AtlanClient from pyatlan.model.assets import Connection , DataStudioAsset from pyatlan.model.enums import AtlanConnectorType client = AtlanClient () admin_role_guid = client . role_cache . get_id_for_name ( \"$admin\" ) # (1) connection = Connection . creator ( # (2) client = client , # (3) name = \"gds-connection\" , # (4) connector_type = AtlanConnectorType . DATASTUDIO , # (5) admin_roles = [ admin_role_guid ], # (6) admin_groups = [ \"group2\" ], # (7) admin_users = [ \"jsmith\" ] # (8) ) response = client . asset . save ( connection ) # (9) connection_qualified_name = response . assets_created ( asset_type = Connection )[ 0 ] . qualified_name # (10) Retrieve the GUID for the admin role, to use later for defining the roles that can administer the connection. Build up the minimum request to create a connection. You must provide a client instance. Provide a human-readable name for your connection, such as production or development . Set the type of connection to Google Data Studio. List the workspace roles that should be able to administer the connection (or None if none) . All users with that workspace role (current and future) will be administrators of the connection. Note that the values here need to be the GUID(s) of the workspace role(s). At least one of adminRoles , adminGroups , or adminUsers must be provided. It's important to note that the provided admin roles, groups, or users pertain to Atlan and not Google Data Studio. They define who has administrative control over this connection within Atlan. List the group names that can administer this connection (or None if none). All users within that group (current and future) will be administrators of the connection. Note that the values here are the name(s) of the group(s). At least one of adminRoles , adminGroups , or adminUsers must be provided. It's important to note that the provided admin roles, groups, or users pertain to Atlan and not Google Data Studio. They define who has administrative control over this connection within Atlan. List the user names that can administer this connection (or None if none). Note that the values here are the username(s) of the user(s). At least one of adminRoles , adminGroups , or adminUsers must be provided. It's important to note that the provided admin roles, groups, or users pertain to Atlan and not Google Data Studio. They define who has administrative control over this connection within Atlan. Actually call Atlan to create the connection. Retrieve the qualifiedName for use in subsequent creation calls. (You'd probably want to do some null checking first.) Create a Google Data Studio connection 1 2 3 4 5 6 7 8 9 10 val adminRoleGuid = client . roleCache . getIdForName ( \"\\ $ admin \" ) // (1) val connection = Connection . creator ( // (2) \"gds-connection\" , // (3) AtlanConnectorType . DATASTUDIO , // (4) listOf ( adminRoleGuid ), // (5) listOf ( \"group2\" ), // (6) listOf ( \"jsmith\" )) // (7) . build () val response = connection . save ( client ) // (8) val connectionQualifiedName = response . createdAssets [ 0 ] . qualifiedName // (9) Retrieve the GUID for the admin role, to use later for defining the roles that can administer the connection. Build up the minimum request to create a connection. Provide a human-readable name for your connection, such as production or development . Set the type of connection to Google Data Studio. List the workspace roles that should be able to administer the connection (or null if none). All users with that workspace role (current and future) will be administrators of the connection. Note that the values here need to be the GUID(s) of the workspace role(s). At least one of adminRoles , adminGroups , or adminUsers must be provided. List the group names that can administer this connection (or null if none). All users within that group (current and future) will be administrators of the connection. Note that the values here are the name(s) of the group(s). At least one of adminRoles , adminGroups , or adminUsers must be provided. List the user names that can administer this connection (or null if none). Note that the values here are the username(s) of the user(s). At least one of adminRoles , adminGroups , or adminUsers must be provided. Actually call Atlan to create the connection. Because this operation will persist the asset in Atlan, you must provide it an AtlanClient through which to connect to the tenant. Retrieve the qualifiedName for use in subsequent creation calls. (You'd probably want to do some null checking first.) POST /api/meta/entity/bulk 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 { \"entities\" : [ { \"typeName\" : \"Connection\" , // (1) \"attributes\" : { \"name\" : \"gds-connection\" , // (2) \"connectorName\" : \"datastudio\" , // (3) \"qualifiedName\" : \"default/datastudio/123456789\" , // (4) \"category\" : \"bi\" , // (5) \"adminRoles\" : [ // (6) \"e7ae0295-c60a-469a-bd2c-fb903943aa02\" ], \"adminGroups\" : [ // (7) \"group2\" ], \"adminUsers\" : [ // (8) \"jsmith\" ] } } ] } The typeName must be exactly Connection . Human-readable name for your connection, such as production or development . The connectorName must be exactly datastudio . The qualifiedName should follow the pattern: default/datastudio/<epoch> , where <epoch> is the time in milliseconds at which the connection is being created. The category must be bi . List any workspace roles that can administer this connection. All users with that workspace role (current and future) will be administrators of the connection. Note that the values here need to be the GUID(s) of the workspace role(s). At least one of adminRoles , adminGroups , or adminUsers must be provided. List any groups that can administer this connection. All users within that group (current and future) will be administrators of the connection. Note that the values here are the name(s) of the group(s). At least one of adminRoles , adminGroups , or adminUsers must be provided. List any users that can administer this connection. Note that the values here are the username(s) of the user(s). At least one of adminRoles , adminGroups , or adminUsers must be provided. Access policies Atlan creates the policies that grant access to a connection, including the ability to retrieve the connection and to create assets within it, asynchronously. It can take several seconds (even up to approximately 30 seconds) before these are in place after creating the connection. You may therefore need to wait before you'll be able to create the assets below within the connection. To confirm access, retrieve the connection after it has been created. The SDKs' retry loops will automatically retry until the connection can be successfully retrieved. At that point, your API token has permission to create the other assets. Note: if you are reusing an existing connection rather than creating one via your API token, you must give your API token a persona that has access to that connection. Otherwise all attempts to create, read, update, or delete assets within that connection will fail due to a lack of permissions. DataStudioAsset (report) ¶ 2.0.0 4.0.0 A Google Data Studio report asset requires a name and a qualifiedName . For creation, you also need to specify the connectionQualifiedName of the connection for the workspace and set the dataStudioAssetType to REPORT . Java Python Kotlin Raw REST API Create a Google Data Studio report 11 12 13 14 15 16 17 DataStudioAsset report = DataStudioAsset . creator ( // (1) \"gds-report\" , // (2) connectionQualifiedName , // (3) GoogleDataStudioAssetType . REPORT , // (4) \"identifier-from-gds\" ) // (5) . build (); AssetMutationResponse response = report . save ( client ); // (6) Build up the minimum request to create a report asset. Provide a human-readable name for your report asset. Provide the qualifiedName of the connection for this report asset. Specify the type of the asset, to ensure we are creating a report asset. (Recommended) Provide the unique identifier of this asset, from Google Data Studio itself. This will allow you to reconstruct the qualifiedName, for example if you later want to update this same asset. Alternatively, you can leave out this final parameter and a random UUID will be generated for you; however, you will not have a way to reconstruct this later for more efficient updates. Actually call Atlan to create the report asset. Because this operation will persist the asset in Atlan, you must provide it an AtlanClient through which to connect to the tenant. Create a Google Data Studio report 17 18 19 20 21 22 report = DataStudioAsset . creator ( # (1) name = \"gds-report\" , # (2) connection_qualified_name = connection_qualified_name # (3) data_studio_asset_type = GoogleDataStudioAssetType . REPORT # (4) ) response = client . asset . save ( report ) # (5) Build up the minimum request to create a report asset. Provide a human-readable name for your report asset. Provide the qualified_name of the connection for this report asset. Specify the type of the asset, to ensure we are creating a report asset. Actually call Atlan to create the report asset. Create a Google Data Studio report 11 12 13 14 15 16 17 val report = DataStudioAsset . creator ( // (1) \"gds-report\" , // (2) connectionQualifiedName , // (3) GoogleDataStudioAssetType . REPORT , // (4) \"identifier-from-gds\" ) // (5) . build () val response = report . save ( client ) // (6) Build up the minimum request to create a report asset. Provide a human-readable name for your report asset. Provide the qualifiedName of the connection for this report asset. Specify the type of the asset, to ensure we are creating a report asset. (Recommended) Provide the unique identifier of this asset, from Google Data Studio itself. This will allow you to reconstruct the qualifiedName, for example if you later want to update this same asset. Alternatively, you can leave out this final parameter and a random UUID will be generated for you; however, you will not have a way to reconstruct this later for more efficient updates. Actually call Atlan to create the report asset. Because this operation will persist the asset in Atlan, you must provide it an AtlanClient through which to connect to the tenant. POST /api/meta/entity/bulk 1 2 3 4 5 6 7 8 9 10 11 12 13 14 { \"entities\" : [ { \"typeName\" : \"DataStudioAsset\" , // (1) \"attributes\" : { \"name\" : \"gds-report\" , // (2) \"qualifiedName\" : \"default/datastudio/123456789/gds-report\" , // (3) \"connectionQualifiedName\" : \"default/datastudio/123456789\" , // (4) \"connectorName\" : \"datastudio\" , // (5) \"dataStudioAssetType\" : \"REPORT\" // (6) } } ] } The typeName must be exactly DataStudioAsset . Human-readable name for your asset. The qualifiedName should follow the pattern: default/datastudio/<epoch>/<asset_name> , where default/datastudio/<epoch> is the qualifiedName of the connection for this asset and <asset_name> is the name of the asset. The connectionQualifiedName must be the exact qualifiedName of the connection for this asset. The connectorName must be exactly datastudio . The dataStudioAssetType must be exactly REPORT . DataStudioAsset (source) ¶ 2.0.0 4.0.0 A Google Data Studio data source asset requires a name and a qualifiedName . For creation, you also need to specify the connectionQualifiedName of the connection for the workspace and set the dataStudioAssetType to DATA_SOURCE . Java Python Kotlin Raw REST API Create a Google Data Studio data source 11 12 13 14 15 16 17 DataStudioAsset source = DataStudioAsset . creator ( // (1) \"gds-source\" , // (2) connectionQualifiedName , // (3) GoogleDataStudioAssetType . DATA_SOURCE , // (4) \"identifier-from-gds\" ) // (5) . build (); AssetMutationResponse response = source . save ( client ); // (6) Build up the minimum request to create a data source asset. Provide a human-readable name for your data source asset. Provide the qualifiedName of the connection for this data source asset. Specify the type of the asset, to ensure we are creating a data source asset. (Recommended) Provide the unique identifier of this asset, from Google Data Studio itself. This will allow you to reconstruct the qualifiedName, for example if you later want to update this same asset. Alternatively, you can leave out this final parameter and a random UUID will be generated for you; however, you will not have a way to reconstruct this later for more efficient updates. Actually call Atlan to create the data source asset. Because this operation will persist the asset in Atlan, you must provide it an AtlanClient through which to connect to the tenant. Create a Google Data Studio data source 17 18 19 20 21 22 source = DataStudioAsset . creator ( # (1) name = \"gds-source\" , # (2) connection_qualified_name = connection_qualified_name # (3) data_studio_asset_type = GoogleDataStudioAssetType . DATA_SOURCE # (4) ) response = client . asset . save ( source ) # (5) Build up the minimum request to create a data source asset. Provide a human-readable name for your data source asset. Provide the qualified_name of the connection for this data source asset. Specify the type of the asset, to ensure we are creating a data source asset. Actually call Atlan to create the data source asset. Create a Google Data Studio data source 11 12 13 14 15 16 17 val source = DataStudioAsset . creator ( // (1) \"gds-source\" , // (2) connectionQualifiedName , // (3) GoogleDataStudioAssetType . DATA_SOURCE , // (4) \"identifier-from-gds\" ) // (5) . build () val response = source . save ( client ) // (6) Build up the minimum request to create a data source asset. Provide a human-readable name for your data source asset. Provide the qualifiedName of the connection for this data source asset. Specify the type of the asset, to ensure we are creating a data source asset. (Recommended) Provide the unique identifier of this asset, from Google Data Studio itself. This will allow you to reconstruct the qualifiedName, for example if you later want to update this same asset. Alternatively, you can leave out this final parameter and a random UUID will be generated for you; however, you will not have a way to reconstruct this later for more efficient updates. Actually call Atlan to create the data source asset. Because this operation will persist the asset in Atlan, you must provide it an AtlanClient through which to connect to the tenant. POST /api/meta/entity/bulk 1 2 3 4 5 6 7 8 9 10 11 12 13 14 { \"entities\" : [ { \"typeName\" : \"DataStudioAsset\" , // (1) \"attributes\" : { \"name\" : \"gds-source\" , // (2) \"qualifiedName\" : \"default/datastudio/123456789/gds-source\" , // (3) \"connectionQualifiedName\" : \"default/datastudio/123456789\" , // (4) \"connectorName\" : \"datastudio\" , // (5) \"dataStudioAssetType\" : \"DATA_SOURCE\" // (6) } } ] } The typeName must be exactly DataStudioAsset . Human-readable name for your asset. The qualifiedName should follow the pattern: default/datastudio/<epoch>/<asset_name> , where default/datastudio/<epoch> is the qualifiedName of the connection for this asset and <asset_name> is the name of the asset. The connectionQualifiedName must be the exact qualifiedName of the connection for this asset. The connectorName must be exactly datastudio . The dataStudioAssetType must be exactly DATA_SOURCE . Available relationships ¶ Every level of the business intelligence structure is an Asset , and can therefore be related to the following other assets. erDiagram Asset }o--o{ AtlasGlossaryTerm : meanings Asset ||--o{ Link : links Asset ||--o| Readme : readme Asset }o--o{ Process : inputToProcesses Asset }o--o{ Process : outputFromProcesses AtlasGlossaryTerm ¶ A glossary term provides meaning to an asset. The link terms to assets snippet provides more detail on setting this relationship. Link ¶ A link provides additional context to an asset, by providing a URL to additional information. Readme ¶ A README provides rich documentation for an asset. The add asset READMEs snippet provides more detail on setting this relationship. Process ¶ A process provides lineage information for an asset. An asset can be both an input and an output for one or more processes. The lineage snippets provide more detail on creating and working with lineage. Although if you want to delete everything in a connection, your better avenue is the packaged connection delete utility in the UI. ↩ Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/patterns/create/gds/",
    "scraped_at": "2025-09-15 19:53:45",
    "content_length": 19283,
    "topic": "SSO"
  },
  {
    "title": "What does Atlan crawl from Amazon Redshift? | Atlan Documentation",
    "content": "On this page Atlan crawls and maps the following assets and properties from Amazon Redshift. Databases ​ Atlan maps databases from Amazon Redshift to its Database asset type. Source property Atlan property DATABASE_NAME name SCHEMA_COUNT schemaCount Schemas ​ Atlan maps schemas from Amazon Redshift to its Schema asset type. Source property Atlan property TABLE_SCHEMA name TABLE_COUNT tableCount VIEW_COUNT viewsCount DATABASE_NAME databaseName OWNER sourceCreatedBy SCHEMA_TYPE subType Tables ​ Atlan maps tables from Amazon Redshift to its Table asset type. Source property Atlan property TABLE_NAME name REMARKS description COLUMN_COUNT columnCount ROW_COUNT rowCount BYTES sizeBytes TABLE_TYPE (EXTERNAL TABLE) subType LOCATION externalLocation INPUT_FORMAT externalLocationFormat TABLE_OWNER sourceCreatedBy CREATED sourceCreatedAt Views ​ Atlan maps views from Amazon Redshift to its View and MaterialisedView asset types. Source property Atlan property TABLE_NAME name REMARKS description COLUMN_COUNT columnCount VIEW_DEFINITION definition TABLE_OWNER sourceCreatedBy Columns ​ Atlan maps columns from Amazon Redshift to its Column asset type. Source property Atlan property COLUMN_NAME name REMARKS description ORDINAL_POSITION order TYPE_NAME dataType NOTNULL isNullable CHARACTER_MAXIMUM_LENGTH maxLength DECIMAL_DIGITS precision CONSTRAINT_TYPE (PRIMARY KEY) isPrimary CONSTRAINT_TYPE (FOREIGN KEY) isForeign SORTKEY isSort DISKEY isDist Databases Schemas Tables Views Columns",
    "url": "https://docs.atlan.com/apps/connectors/data-warehouses/amazon-redshift/references/what-does-atlan-crawl-from-amazon-redshift",
    "scraped_at": "2025-09-15 19:53:47",
    "content_length": 1490,
    "topic": "SSO"
  },
  {
    "title": "FivetranConnector - Developer",
    "content": "FivetranConnector ¶ Instance of a Fivetran connector asset in Atlan. Complete reference This is a complete reference for the FivetranConnector object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. FivetranConnector inherits its attributes and relationships from these other types: classDiagram direction RL class FivetranConnector link FivetranConnector \"../fivetranconnector\" class Fivetran { <<abstract>> } link Fivetran \"../fivetran\" Fivetran <|-- FivetranConnector : extends class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- Fivetran : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from FivetranConnector 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) fivetranLastSyncRecordsUpdated ¶ Number of records updated in the latest sync on Fivetran fivetranLastSyncStatus ¶ Status of the latest sync on Fivetran. fivetranWorkflowName ¶ Name of the atlan fivetran workflow that updated this asset These attributes are specific to instances of FivetranConnector (and all of its subtypes). fivetranConnectorCreditsUsed ¶ Total credits used by this destination fivetranConnectorDestinationName ¶ Destination name added by the user on Fivetran fivetranConnectorDestinationType ¶ Type of destination on Fivetran. Eg: redshift, bigquery etc. fivetranConnectorDestinationURL ¶ URL to open the destination details on Fivetran fivetranConnectorLastSyncExtractTimeSeconds ¶ Extract time in seconds in the latest sync on fivetran fivetranConnectorLastSyncExtractVolumeMegabytes ¶ Extracted data volume in metabytes in the latest sync on Fivetran fivetranConnectorLastSyncFinishedAt ¶ Timestamp (epoch) when the latest sync finished on Fivetran, in milliseconds fivetranConnectorLastSyncId ¶ ID of the latest sync fivetranConnectorLastSyncLoadTimeSeconds ¶ Load time in seconds in the latest sync on Fivetran fivetranConnectorLastSyncLoadVolumeMegabytes ¶ Loaded data volume in metabytes in the latest sync on Fivetran fivetranConnectorLastSyncProcessTimeSeconds ¶ Process time in seconds in the latest sync on Fivetran fivetranConnectorLastSyncProcessVolumeMegabytes ¶ Process volume in metabytes in the latest sync on Fivetran fivetranConnectorLastSyncReason ¶ Failure reason for the latest sync on Fivetran. If status is FAILURE, this is the description of the reason why the sync failed. If status is FAILURE_WITH_TASK, this is the description of the Error. If status is RESCHEDULED, this is the description of the reason why the sync is rescheduled. fivetranConnectorLastSyncRescheduledAt ¶ Timestamp (epoch) at which the latest sync is rescheduled at on Fivetran fivetranConnectorLastSyncStartedAt ¶ Timestamp (epoch) when the latest sync started on Fivetran, in milliseconds fivetranConnectorLastSyncTablesSynced ¶ Number of tables synced in the latest sync on Fivetran fivetranConnectorLastSyncTaskType ¶ Failure task type for the latest sync on Fivetran. If status is FAILURE_WITH_TASK or RESCHEDULED, this field displays the type of the Error that caused the failure or rescheduling, respectively, e.g., reconnect, update_service_account, etc. fivetranConnectorLastSyncTotalTimeSeconds ¶ Total sync time in seconds in the latest sync on Fivetran fivetranConnectorMonthlyActiveRowsChangePercentageFree ¶ Increase in the percentage of free MAR compared to the previous month fivetranConnectorMonthlyActiveRowsChangePercentagePaid ¶ Increase in the percentage of paid MAR compared to the previous month fivetranConnectorMonthlyActiveRowsChangePercentageTotal ¶ Increase in the percentage of total MAR compared to the previous month fivetranConnectorMonthlyActiveRowsFree ¶ Free Monthly Active Rows used by the connector in the past month fivetranConnectorMonthlyActiveRowsFreePercentageOfAccount ¶ Percentage of the account's total free MAR used by this connector fivetranConnectorMonthlyActiveRowsPaid ¶ Paid Monthly Active Rows used by the connector in the past month fivetranConnectorMonthlyActiveRowsPaidPercentageOfAccount ¶ Percentage of the account's total paid MAR used by this connector fivetranConnectorMonthlyActiveRowsTotal ¶ Total Monthly Active Rows used by the connector in the past month fivetranConnectorMonthlyActiveRowsTotalPercentageOfAccount ¶ Percentage of the account's total MAR used by this connector fivetranConnectorName ¶ Connector name added by the user on Fivetran fivetranConnectorSyncFrequency ¶ Sync frequency for the connector in number of hours. Eg: Every 6 hours fivetranConnectorSyncPaused ¶ Boolean to indicate whether the sync for this connector is paused or not fivetranConnectorSyncSetupOn ¶ Timestamp (epoch) on which the connector was setup on Fivetran, in milliseconds fivetranConnectorSyncSetupUserEmail ¶ Email ID of the user who setpu the connector on Fivetran fivetranConnectorSyncSetupUserFullName ¶ Full name of the user who setup the connector on Fivetran fivetranConnectorTopTablesByMAR ¶ Total five tables sorted by MAR synced by this connector fivetranConnectorTotalTablesSynced ¶ Total number of tables synced by this connector fivetranConnectorType ¶ Type of connector on Fivetran. Eg: snowflake, google_analytics, notion etc. fivetranConnectorURL ¶ URL to open the connector details on Fivetran fivetranConnectorUsageCost ¶ Total usage cost by this destination Relationships ¶ Inherited relationships These relationships are inherited from FivetranConnector 's supertypes: anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos inputToAirflowTasks ( AirflowTask ) ¶ Tasks to which this asset provides input. inputToProcesses ( Process ) ¶ Processes to which this asset provides input. inputToSparkJobs ( SparkJob ) ¶ TBC modelImplementedAttributes ( ModelAttribute ) ¶ Attributes implemented by this asset. modelImplementedEntities ( ModelEntity ) ¶ Entities implemented by this asset. outputFromAirflowTasks ( AirflowTask ) ¶ Tasks from which this asset is output. outputFromProcesses ( Process ) ¶ Processes from which this asset is produced as output. outputFromSparkJobs ( SparkJob ) ¶ TBC These relationships are specific to instances of FivetranConnector (and all of its subtypes). processes ( Process ) ¶ Processes related to this Fivetran connector Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/fivetranconnector/",
    "scraped_at": "2025-09-15 19:53:48",
    "content_length": 23535,
    "topic": "SSO"
  },
  {
    "title": "Set up client credentials flow | Atlan Documentation",
    "content": "On this page Important Atlan currently supports Salesforce Sales Cloud and Financial Services Cloud (FSC). Atlan supports the Salesforce OAuth 2.0 client credentials flow for server-to-server integration. This flow enables Atlan to authenticate using a dedicated integration user and an external client app in Salesforce, providing secure, non-interactive access to Salesforce metadata and data for crawling. Prerequisites ​ Before you begin, make sure you have: Salesforce administrator access Network connectivity between Atlan and your Salesforce instance Create custom profile ​ A custom profile defines the specific permissions and access levels for your integration user. You'll create this profile with the minimum necessary permissions for Atlan to crawl your Salesforce data securely. Create a custom profile to manage permissions for the integration user: From Setup , enter profiles in the Quick Find box and select Profiles . Click New Profile . Select Standard User from the Existing Profile dropdown to clone. Enter a name, for example AtlanIntegrationProfile . Click Save . On the new profile page, click Edit . Under Connected App Access , check the External Client App you create. Under Administrative Permissions , uncheck all except: API Enabled View All Data Run Reports Under Standard Object Permissions and Custom Object Permissions , select Read and View All for all items. Click Save . Create integration user ​ The integration user acts as the identity that Atlan uses to connect to Salesforce. This dedicated user ensures secure, auditable access separate from individual user accounts. Create a dedicated Salesforce user for the external client app: From Setup , expand Administration → Users and click Users . Click New User . Enter required details: First Name , Last Name , Username , Email , Nickname . Select Salesforce for User License . Assign the custom profile created in the previous step. Click Save . Create external client app ​ The external client app provides the OAuth infrastructure for secure server-to-server authentication. This app generates the credentials that Atlan uses to authenticate without requiring user interaction. Set up the external client app for client credentials flow: From Setup , enter external client app manager in Quick Find and select External Client App Manager . Click New External Client App . Enter: External Client App Name : for example, AtlanIntegration Contact Email : your email Distribution State : Local Expand API (Enable OAuth Settings) : Check Enable OAuth Set Callback URL : https://localhost (placeholder, unused) Move the following scopes to Selected OAuth Scopes : Manage user data via APIs (api) Perform requests at any time (refresh_token, offline_access) Access Lightning applications (lightning) Under Flow Enablement , check Enable Client Credentials Flow . Enable: Require Secret for Web Server Flow Require Secret for Refresh Token Flow Optional hardening: Require Proof Key for Code Exchange (PKCE) Enable Refresh Token Rotation Issue JSON Web Token (JWT)-based access tokens Click Create . On the app details page, copy the Consumer Key (Client ID) and Consumer Secret from OAuth Settings . Store these credentials securely—they're required to configure the Atlan connection. Configure policies ​ After creating the external client app, you need to configure its security policies. These policies control which users and profiles can access the app and define the authentication flow settings. From External Client App Manager , locate your app and click Edit . Open the Policies tab. Set Start Page to None . Move the integration custom profile to Selected Profiles . If using permission sets, move relevant sets to Selected Permission Sets . In OAuth Policies , set: Permitted Users : Admin approved users are pre-authorized OAuth Start URL : leave blank unless required In OAuth Flows and External Client App Enhancements : Check Enable Client Credentials Flow Run As (Username) : enter the integration user username Set additional policies as required (IP Relaxation, Session Timeout, Refresh Token Policy) Click Save . Troubleshooting ​ If you encounter issues with Client Credentials authentication, see Troubleshooting Salesforce Connectivity . Next steps ​ Crawl Salesforce to configure the connection in Atlan. Prerequisites Create custom profile Create integration user Create external client app Troubleshooting Next steps",
    "url": "https://docs.atlan.com/apps/connectors/crm/salesforce/how-tos/oauth-client-credentials-setup",
    "scraped_at": "2025-09-15 19:53:50",
    "content_length": 4431,
    "topic": "SSO"
  },
  {
    "title": "ByocSsoConfig - Developer",
    "content": "ByocSsoConfig ¶ Atlas Type representing byoc sso oauth config Complete reference This is a complete reference for the ByocSsoConfig struct in Atlan, showing all of its embedded properties. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. Embedded properties ¶ These are the attributes embedded within each instance of the ByocSsoConfig struct in an asset: ssoMetadataUri ¶ TBC ssoClientId ¶ TBC ssoClientSecret ¶ TBC ssoScope ¶ TBC Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/structs/byocssoconfig/",
    "scraped_at": "2025-09-15 19:53:51",
    "content_length": 743,
    "topic": "SSO"
  },
  {
    "title": "4 docs tagged with \"relational\" | Atlan Documentation",
    "content": "Microsoft SQL Server Integrate, catalog, and govern Microsoft SQL Server assets in Atlan. MySQL Integrate, catalog, and govern MySQL assets in Atlan. Oracle Integrate, catalog, and govern Oracle assets in Atlan. PostgreSQL Integrate, catalog, and govern PostgreSQL assets in Atlan.",
    "url": "https://docs.atlan.com/tags/relational",
    "scraped_at": "2025-09-15 19:53:52",
    "content_length": 281,
    "topic": "API_SDK"
  },
  {
    "title": "What does Atlan crawl from MicroStrategy? | Atlan Documentation",
    "content": "On this page Atlan crawls and maps the following assets and properties from MicroStrategy. danger Currently Atlan only represents the assets marked with 🔀 in lineage. Once you've crawled MicroStrategy , you can use connector-specific filters for quick asset discovery. The following filters are currently supported for these assets: Projects , attributes , facts , metrics , cubes , reports , documents , dossiers , and visualizations - Is Certified filter Cubes , reports , and visualizations - Type filter Projects ​ Atlan maps projects from MicroStrategy to its MicroStrategyProject asset type. Source property Atlan property Where in Atlan name name asset profile and overview sidebar description description asset profile and overview sidebar created_at createdAt properties sidebar updated_at updatedAt properties sidebar owner owners overview sidebar Attributes ​ Atlan maps attributes from MicroStrategy to its MicroStrategyAttribute asset type. Source property Atlan property Where in Atlan name name asset profile and overview sidebar description description asset profile and overview sidebar created_at createdAt properties sidebar updated_at updatedAt properties sidebar owner source owner overview sidebar certifiedInfo isCertified asset filter and properties sidebar certifiedInfo certifiedBy properties sidebar certifiedInfo certifiedAt properties sidebar ancestors location properties sidebar forms forms overview sidebar Facts ​ Atlan maps facts from MicroStrategy to its MicroStrategyFact asset type. Source property Atlan property Where in Atlan name name asset profile and overview sidebar description description asset profile and overview sidebar created_at createdAt properties sidebar updated_at updatedAt properties sidebar owner source owner overview sidebar certifiedInfo isCertified asset filter and properties sidebar certifiedInfo certifiedBy properties sidebar certifiedInfo certifiedAt properties sidebar ancestors location properties sidebar expressions expressions overview sidebar Metrics ​ Atlan maps metrics from MicroStrategy to its MicroStrategyMetric asset type. Source property Atlan property Where in Atlan name name asset profile and overview sidebar description description asset profile and overview sidebar created_at createdAt properties sidebar updated_at updatedAt properties sidebar owner source owner overview sidebar certifiedInfo isCertified asset filter and properties sidebar certifiedInfo certifiedBy properties sidebar certifiedInfo certifiedAt properties sidebar ancestors location properties sidebar expression expression overview sidebar Cubes 🔀 ​ Atlan maps cubes from MicroStrategy to its MicroStrategyCube asset type. Source property Atlan property Where in Atlan name name asset profile and overview sidebar description description asset profile and overview sidebar created_at createdAt properties sidebar updated_at updatedAt properties sidebar owner source owner overview sidebar certifiedInfo isCertified asset filter and properties sidebar certifiedInfo certifiedBy properties sidebar certifiedInfo certifiedAt properties sidebar ancestors location properties sidebar subtype type asset filter and properties sidebar sqlStatement query properties sidebar Reports 🔀 ​ Atlan maps reports from MicroStrategy to its MicroStrategyReport asset type. Source property Atlan property Where in Atlan name name asset profile and overview sidebar description description asset profile and overview sidebar created_at createdAt properties sidebar updated_at updatedAt properties sidebar owner source owner overview sidebar certifiedInfo isCertified asset filter and properties sidebar certifiedInfo certifiedBy properties sidebar certifiedInfo certifiedAt properties sidebar ancestors location properties sidebar subtype type asset filter and properties sidebar Documents 🔀 ​ Atlan maps documents from MicroStrategy to its MicroStrategyDocument asset type. Source property Atlan property Where in Atlan name name asset profile and overview sidebar description description asset profile and overview sidebar created_at createdAt properties sidebar updated_at updatedAt properties sidebar owner source owner overview sidebar certifiedInfo isCertified asset filter and properties sidebar certifiedInfo certifiedBy properties sidebar certifiedInfo certifiedAt properties sidebar ancestors location properties sidebar Dossiers 🔀 ​ Atlan maps dossiers from MicroStrategy to its MicroStrategyDossier asset type. Source property Atlan property Where in Atlan name name asset profile and overview sidebar description description asset profile and overview sidebar created_at createdAt properties sidebar updated_at updatedAt properties sidebar owner source owner overview sidebar certifiedInfo isCertified asset filter and properties sidebar certifiedInfo certifiedBy properties sidebar certifiedInfo certifiedAt properties sidebar ancestors location properties sidebar chapter chapterNames overview sidebar Visualizations ​ Atlan maps dossier visualizations from MicroStrategy to its MicroStrategyVisualization asset type. Source property Atlan property Where in Atlan name name asset profile and overview sidebar visualizationType visualizationType asset filter and properties sidebar Projects Attributes Facts Metrics Cubes 🔀 Reports 🔀 Documents 🔀 Dossiers 🔀 Visualizations",
    "url": "https://docs.atlan.com/apps/connectors/business-intelligence/microstrategy/references/what-does-atlan-crawl-from-microstrategy",
    "scraped_at": "2025-09-15 19:53:53",
    "content_length": 5324,
    "topic": "API_SDK"
  },
  {
    "title": "AzureServiceBusTopic - Developer",
    "content": "AzureServiceBusTopic ¶ Instances of AzureServiceBusField in Atlan. Complete reference This is a complete reference for the AzureServiceBusTopic object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. AzureServiceBusTopic inherits its attributes and relationships from these other types: classDiagram direction RL class AzureServiceBusTopic link AzureServiceBusTopic \"../azureservicebustopic\" class AzureServiceBus { <<abstract>> } link AzureServiceBus \"../azureservicebus\" AzureServiceBus <|-- AzureServiceBusTopic : extends class EventStore { <<abstract>> } link EventStore \"../eventstore\" EventStore <|-- AzureServiceBus : extends class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- EventStore : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from AzureServiceBusTopic 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) azureServiceBusNamespaceName ¶ Simple name of the AzureServiceBus Namespace in which this asset exists. azureServiceBusNamespaceQualifiedName ¶ Unique name of the AzureServiceBus Namespace in which this asset exists. azureServiceBusSchemaQualifiedName ¶ Unique name of the AzureServiceBus Schema in which this asset exists. Relationships ¶ Inherited relationships These relationships are inherited from AzureServiceBusTopic 's supertypes: anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos inputToAirflowTasks ( AirflowTask ) ¶ Tasks to which this asset provides input. inputToProcesses ( Process ) ¶ Processes to which this asset provides input. inputToSparkJobs ( SparkJob ) ¶ TBC modelImplementedAttributes ( ModelAttribute ) ¶ Attributes implemented by this asset. modelImplementedEntities ( ModelEntity ) ¶ Entities implemented by this asset. outputFromAirflowTasks ( AirflowTask ) ¶ Tasks from which this asset is output. outputFromProcesses ( Process ) ¶ Processes from which this asset is produced as output. outputFromSparkJobs ( SparkJob ) ¶ TBC These relationships are specific to instances of AzureServiceBusTopic (and all of its subtypes). azureServiceBusNamespace ( AzureServiceBusNamespace ) ¶ AzureServiceBusNamespace asset containing this AzureServiceBusTopic. azureServiceBusSchemas ( AzureServiceBusSchema ) ¶ AzureServiceBusSchema assets contained within this AzureServiceBusTopic. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/azureservicebustopic/",
    "scraped_at": "2025-09-15 19:53:55",
    "content_length": 19649,
    "topic": "SSO"
  },
  {
    "title": "Manage Preset assets - Developer",
    "content": "Manage Preset assets ¶ Operations on Preset assets (connections, workspaces, collections, charts, datasets). In general, these should be: Created in top-down order (connection, then workspace, then collection, then charts and datasets) Deleted in bottom-up order (charts and datasets, then collections, then workspaces, then connections) 1 erDiagram Connection ||--o{ PresetWorkspace : contains PresetWorkspace ||--o{ PresetDashboard : contains PresetDashboard ||--o{ PresetChart : contains PresetDashboard ||--o{ PresetDataset : contains Asset structure ¶ Connection ¶ 7.0.0 4.0.0 A Preset connection requires a name and qualifiedName . For creation, specific settings are also required to distinguish it as a Preset connection rather than another type of connection. In addition, at least one of adminRoles , adminGroups , or adminUsers must be provided. Java Python Kotlin Raw REST API Create a Preset connection 1 2 3 4 5 6 7 8 9 10 String adminRoleGuid = client . getRoleCache (). getIdForName ( \"$admin\" ); // (1) Connection connection = Connection . creator ( // (2) \"preset-connection\" , // (3) AtlanConnectorType . PRESET , // (4) List . of ( adminRoleGuid ), // (5) List . of ( \"group2\" ), // (6) List . of ( \"jsmith\" )) // (7) . build (); AssetMutationResponse response = connection . save ( client ); // (8) String connectionQualifiedName = response . getCreatedAssets (). get ( 0 ). getQualifiedName (); // (9) Retrieve the GUID for the admin role, to use later for defining the roles that can administer the connection. Build up the minimum request to create a connection. Provide a human-readable name for your connection, such as production or development . Set the type of connection to Preset. List the workspace roles that should be able to administer the connection (or null if none). All users with that workspace role (current and future) will be administrators of the connection. Note that the values here need to be the GUID(s) of the workspace role(s). At least one of adminRoles , adminGroups , or adminUsers must be provided. List the group names that can administer this connection (or null if none). All users within that group (current and future) will be administrators of the connection. Note that the values here are the name(s) of the group(s). At least one of adminRoles , adminGroups , or adminUsers must be provided. List the user names that can administer this connection (or null if none). Note that the values here are the username(s) of the user(s). At least one of adminRoles , adminGroups , or adminUsers must be provided. Actually call Atlan to create the connection. Because this operation will persist the asset in Atlan, you must provide it an AtlanClient through which to connect to the tenant. Retrieve the qualifiedName for use in subsequent creation calls. (You'd probably want to do some null checking first.) Create a Preset connection 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from pyatlan.client.atlan import AtlanClient from pyatlan.model.assets import Connection , PresetWorkspace , PresetDashboard , PresetChart , PresetDataset from pyatlan.model.enums import AtlanConnectorType client = AtlanClient () admin_role_guid = client . role_cache . get_id_for_name ( \"$admin\" ) # (1) connection = Connection . creator ( # (2) client = client , # (3) name = \"preset-connection\" , # (4) connector_type = AtlanConnectorType . PRESET , # (5) admin_roles = [ admin_role_guid ], # (6) admin_groups = [ \"group2\" ], # (7) admin_users = [ \"jsmith\" ] # (8) ) response = client . asset . save ( connection ) # (9) connection_qualified_name = response . assets_created ( asset_type = Connection )[ 0 ] . qualified_name # (10) Retrieve the GUID for the admin role, to use later for defining the roles that can administer the connection. Build up the minimum request to create a connection. You must provide a client instance. Provide a human-readable name for your connection, such as production or development . Set the type of connection to Preset. List the workspace roles that should be able to administer the connection (or None if none). All users with that workspace role (current and future) will be administrators of the connection. Note that the values here need to be the GUID(s) of the workspace role(s). At least one of admin_roles , admin_groups , or admin_users must be provided. List the group names that can administer this connection (or None if none). All users within that group (current and future) will be administrators of the connection. Note that the values here are the name(s) of the group(s). At least one of admin_roles , admin_groups , or admin_users must be provided. List the user names that can administer this connection (or None if none). Note that the values here are the username(s) of the user(s). At least one of admin_roles , admin_groups , or admin_users must be provided. Actually call Atlan to create the connection. Retrieve the qualified_name for use in subsequent creation calls. (You'd probably want to do some null checking first.) Create a Preset connection 1 2 3 4 5 6 7 8 9 10 val adminRoleGuid = client . roleCache . getIdForName ( \"\\ $ admin \" ) // (1) val connection = Connection . creator ( // (2) \"preset-connection\" , // (3) AtlanConnectorType . PRESET , // (4) listOf ( adminRoleGuid ), // (5) listOf ( \"group2\" ), // (6) listOf ( \"jsmith\" )) // (7) . build () val response = connection . save ( client ) // (8) val connectionQualifiedName = response . createdAssets [ 0 ] . qualifiedName // (9) Retrieve the GUID for the admin role, to use later for defining the roles that can administer the connection. Build up the minimum request to create a connection. Provide a human-readable name for your connection, such as production or development . Set the type of connection to Preset. List the workspace roles that should be able to administer the connection (or null if none). All users with that workspace role (current and future) will be administrators of the connection. Note that the values here need to be the GUID(s) of the workspace role(s). At least one of adminRoles , adminGroups , or adminUsers must be provided. List the group names that can administer this connection (or null if none). All users within that group (current and future) will be administrators of the connection. Note that the values here are the name(s) of the group(s). At least one of adminRoles , adminGroups , or adminUsers must be provided. List the user names that can administer this connection (or null if none). Note that the values here are the username(s) of the user(s). At least one of adminRoles , adminGroups , or adminUsers must be provided. Actually call Atlan to create the connection. Because this operation will persist the asset in Atlan, you must provide it an AtlanClient through which to connect to the tenant. Retrieve the qualifiedName for use in subsequent creation calls. (You'd probably want to do some null checking first.) POST /api/meta/entity/bulk 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 { \"entities\" : [ { \"typeName\" : \"Connection\" , // (1) \"attributes\" : { \"name\" : \"preset-connection\" , // (2) \"connectorName\" : \"preset\" , // (3) \"qualifiedName\" : \"default/preset/123456789\" , // (4) \"category\" : \"bi\" , // (5) \"adminRoles\" : [ // (6) \"e7ae0295-c60a-469a-bd2c-fb903943aa02\" ], \"adminGroups\" : [ // (7) \"group2\" ], \"adminUsers\" : [ // (8) \"jsmith\" ] } } ] } The typeName must be exactly Connection . Human-readable name for your connection, such as production or development . The connectorName must be exactly preset . The qualifiedName should follow the pattern: default/preset/<epoch> , where <epoch> is the time in milliseconds at which the connection is being created. The category must be bi . List any workspace roles that can administer this connection. All users with that workspace role (current and future) will be administrators of the connection. Note that the values here need to be the GUID(s) of the workspace role(s). At least one of adminRoles , adminGroups , or adminUsers must be provided. List any groups that can administer this connection. All users within that group (current and future) will be administrators of the connection. Note that the values here are the name(s) of the group(s). At least one of adminRoles , adminGroups , or adminUsers must be provided. List any users that can administer this connection. Note that the values here are the username(s) of the user(s). At least one of adminRoles , adminGroups , or adminUsers must be provided. Access policies Atlan creates the policies that grant access to a connection, including the ability to retrieve the connection and to create assets within it, asynchronously. It can take several seconds (even up to approximately 30 seconds) before these are in place after creating the connection. You may therefore need to wait before you'll be able to create the assets below within the connection. To confirm access, retrieve the connection after it has been created. The SDKs' retry loops will automatically retry until the connection can be successfully retrieved. At that point, your API token has permission to create the other assets. Note: if you are reusing an existing connection rather than creating one via your API token, you must give your API token a persona that has access to that connection. Otherwise all attempts to create, read, update, or delete assets within that connection will fail due to a lack of permissions. PresetWorkspace ¶ 2.0.0 4.0.0 A Preset workspace requires a name and a qualifiedName . For creation, you also need to specify the connectionQualifiedName of the connection for the workspace. Java Python Kotlin Raw REST API Create a Preset workspace 11 12 13 14 15 16 PresetWorkspace workspace = PresetWorkspace . creator ( // (1) \"ps-workspace\" , // (2) connectionQualifiedName ) // (3) . build (); AssetMutationResponse response = workspace . save ( client ); // (4) workspace = response . getResult ( workspace ); // (5) Build up the minimum request to create a workspace. Provide a human-readable name for your workspace. Provide the qualifiedName of the connection for this workspace. Actually call Atlan to create the workspace. Because this operation will persist the asset in Atlan, you must provide it an AtlanClient through which to connect to the tenant. Retrieve the created workspace for use in subsequent creation calls. (You'd probably want to do some null checking first.) Create a Preset workspace 17 18 19 20 21 22 workspace = PresetWorkspace . creator ( # (1) name = \"ps-workspace\" , # (2) connection_qualified_name = connection_qualified_name # (3) ) response = client . asset . save ( workspace ) # (4) preset_workspace_qualified_name = response . assets_created ( asset_type = PresetWorkspace )[ 0 ] . qualified_name # (5) Build up the minimum request to create a workspace. Provide a human-readable name for your workspace. Provide the qualified_name of the connection for this workspace. Actually call Atlan to create the workspace. Retrieve the created workspace for use in subsequent creation calls. (You'd probably want to do some null checking first.) Create a Preset workspace 11 12 13 14 15 16 var workspace = PresetWorkspace . creator ( // (1) \"ps-workspace\" , // (2) connectionQualifiedName ) // (3) . build () val response = workspace . save ( client ) // (4) workspace = response . getResult ( workspace ) // (5) Build up the minimum request to create a workspace. Provide a human-readable name for your workspace. Provide the qualifiedName of the connection for this workspace. Actually call Atlan to create the workspace. Because this operation will persist the asset in Atlan, you must provide it an AtlanClient through which to connect to the tenant. Retrieve the created workspace for use in subsequent creation calls. (You'd probably want to do some null checking first.) POST /api/meta/entity/bulk 1 2 3 4 5 6 7 8 9 10 11 12 13 { \"entities\" : [ { \"typeName\" : \"PresetWorkspace\" , // (1) \"attributes\" : { \"name\" : \"ps-workspace\" , // (2) \"qualifiedName\" : \"default/preset/123456789/ps-workspace\" , // (3) \"connectionQualifiedName\" : \"default/preset/123456789\" , // (4) \"connectorName\" : \"preset\" // (5) } } ] } The typeName must be exactly PresetWorkspace . Human-readable name for your workspace. The qualifiedName should follow the pattern: default/preset/<epoch>/<workspace_name> , where default/preset/<epoch> is the qualifiedName of the connection for this workspace and <workspace_name> is the name of the workspace. The connectionQualifiedName must be the exact qualifiedName of the connection for this workspace. The connectorName must be exactly preset . PresetDashboard ¶ 2.0.0 4.0.0 A Preset collection requires a name and a qualifiedName . For creation, you also need to specify the connectionQualifiedName of the connection for the collection, and the names and qualifiedNames of the collection's ancestors. Java Python Kotlin Raw REST API Create a Preset collection 17 18 19 20 21 22 PresetDashboard collection = PresetDashboard . creator ( // (1) \"ps-collection\" , // (2) workspace ) // (3) . build (); AssetMutationResponse response = collection . save ( client ); // (4) collection = response . getResult ( collection ); // (5) Build up the minimum request to create a collection. Provide a human-readable name for your collection. Provide the workspace for this collection. If you did not already have the object, you could also use PresetWorkspace.refByGuid() with the GUID of the workspace, or PresetWorkspace.refByQualifiedName() with the qualifiedName of the workspace. Actually call Atlan to create the collection. Because this operation will persist the asset in Atlan, you must provide it an AtlanClient through which to connect to the tenant. Retrieve the created collection for use in subsequent creation calls. (You'd probably want to do some null checking first.) Create an Preset collection 23 24 25 26 27 28 collection = PresetDashboard . creator ( # (1) name = \"ps-collection\" , # (2) preset_workspace_qualified_name = preset_workspace_qualified_name # (3) ) response = client . asset . save ( collection ) # (4) preset_dashboard_qualified_name = response . assets_created ( asset_type = PresetDashboard )[ 0 ] . qualified_name # (5) Build up the minimum request to create a collection. Provide a human-readable name for your collection. Provide the qualified_name of the Preset workspace for this collection. Actually call Atlan to create the collection. Retrieve the created collection for use in subsequent creation calls. (You'd probably want to do some null checking first.) Create a Preset collection 17 18 19 20 21 22 var collection = PresetDashboard . creator ( // (1) \"ps-collection\" , // (2) workspace ) // (3) . build () val response = collection . save ( client ) // (4) collection = response . getResult ( collection ) // (5) Build up the minimum request to create a collection. Provide a human-readable name for your collection. Provide the workspace for this collection. If you did not already have the object, you could also use PresetWorkspace.refByGuid() with the GUID of the workspace, or PresetWorkspace.refByQualifiedName() with the qualifiedName of the workspace. Actually call Atlan to create the collection. Because this operation will persist the asset in Atlan, you must provide it an AtlanClient through which to connect to the tenant. Retrieve the created collection for use in subsequent creation calls. (You'd probably want to do some null checking first.) POST /api/meta/entity/bulk 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 { \"entities\" : [ { \"typeName\" : \"PresetDashboard\" , // (1) \"attributes\" : { \"name\" : \"ps-collection\" , // (2) \"qualifiedName\" : \"default/preset/123456789/ps-workspace/ps-collection\" , // (3) \"connectionQualifiedName\" : \"default/preset/123456789\" , // (4) \"connectorName\" : \"preset\" , // (5) \"presetWorkspace\" : { // (6) \"typeName\" : \"PresetWorkspace\" , // (7) \"uniqueAttributes\" : { // (8) \"qualifiedName\" : \"default/preset/123456789/ps-workspace\" } }, \"presetWorkspaceQualifiedName\" : \"default/preset/123456789/ps-workspace\" // (9) } } ] } The typeName must be exactly PresetDashboard . Human-readable name for your collection. The qualifiedName should follow the pattern: default/preset/<epoch>/<workspace_name>/<collection_name> , where default/preset/<epoch>/<workspace_name> is the qualifiedName of the workspace for this collection and <collection_name> is the name for this collection. The connectionQualifiedName must be the exact qualifiedName of the connection for this collection. The connectorName must be exactly preset . The workspace in which this collection exists is embedded in the presetWorkspace attribute. The typeName for this embedded reference must be PresetWorkspace . To complete the reference, you must include a uniqueAttributes object with the qualifiedName of the workspace. Note: the workspace must already exist in Atlan before creating the collection. The presetWorkspaceQualifiedName should be the qualifiedName of the workspace. PresetChart ¶ 2.0.0 4.0.0 A Preset chart requires a name and a qualifiedName . For creation, you also need to specify the connectionQualifiedName of the connection for the chart, and the names and qualifiedNames of the chart's ancestors. Java Python Kotlin Raw REST API Create a Preset chart 23 24 25 26 27 PresetChart chart = PresetChart . creator ( // (1) \"ps-chart\" , // (2) collection ) // (3) . build (); AssetMutationResponse response = chart . save ( client ); // (4) Build up the minimum request to create a chart. Provide a human-readable name for your chart. Provide the collection for this chart. Actually call Atlan to create the chart. Because this operation will persist the asset in Atlan, you must provide it an AtlanClient through which to connect to the tenant. Create a Preset chart 29 30 31 32 33 chart = PresetChart . creator ( # (1) name = \"ps-chart \" , # (2) preset_dashboard_qualified_name = preset_dashboard_qualified_name # (3) ) response = client . asset . save ( chart ) # (4) Build up the minimum request to create a chart. Provide a human-readable name for your chart. Provide the qualified_name of the collection. Actually call Atlan to create the chart. Create a Preset chart 23 24 25 26 27 val chart = PresetChart . creator ( // (1) \"ps-chart\" , // (2) collection ) // (3) . build () val response = chart . save ( client ) // (4) Build up the minimum request to create a chart. Provide a human-readable name for your chart. Provide the collection for this chart. Actually call Atlan to create the chart. Because this operation will persist the asset in Atlan, you must provide it an AtlanClient through which to connect to the tenant. POST /api/meta/entity/bulk 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 { \"entities\" : [ { \"typeName\" : \"PresetChart\" , // (1) \"attributes\" : { \"name\" : \"ps-chart\" , // (2) \"qualifiedName\" : \"default/preset/123456789/ps-workspace/ps-collection/ps-chart\" , // (3) \"connectionQualifiedName\" : \"default/preset/123456789\" , // (4) \"connectorName\" : \"preset\" , // (5) \"presetDashboard\" : { // (6) \"typeName\" : \"PresetDashboard\" , // (7) \"uniqueAttributes\" : { // (8) \"qualifiedName\" : \"default/preset/123456789/ps-workspace/ps-collection\" } }, \"presetDashboardQualifiedName\" : \"default/preset/123456789/ps-workspace/ps-collection\" , // (9) \"presetWorkspaceQualifiedName\" : \"default/preset/123456789/ps-workspace\" // (10) } } ] } The typeName must be exactly PresetChart . Human-readable name for your chart. The qualifiedName should follow the pattern: default/preset/<epoch>/<workspace_name>/<collection_name>/<chart_name> , where default/preset/<epoch>/<workspace_name>/<collection_name> is the qualifiedName of the collection for this chart and <chart_name> is the name for this chart. The connectionQualifiedName must be the exact qualifiedName of the connection for this chart. The connectorName must be exactly preset . The collection in which this chart exists is embedded in the presetDashboard attribute. The typeName for this embedded reference must be PresetDashboard . To complete the reference, you must include a uniqueAttributes object with the qualifiedName of the collection. Note: the collection must already exist in Atlan before creating the chart. The presetDashboardQualifiedName should be the qualifiedName of the collection. The presetWorkspaceQualifiedName should be the qualifiedName of the workspace. PresetDataset ¶ 2.0.0 4.0.0 A Preset dataset requires a name and a qualifiedName . For creation, you also need to specify the connectionQualifiedName of the connection for the dataset, and the names and qualifiedNames of the dataset's ancestors. Java Python Kotlin Raw REST API Create a Preset dataset 23 24 25 26 27 PresetDataset dataset = PresetDataset . creator ( // (1) \"ps-dataset\" , // (2) collection ) // (3) . build (); AssetMutationResponse response = dataset . save ( client ); // (4) Build up the minimum request to create a dataset. Provide a human-readable name for your dataset. Provide the collection for this dataset. Actually call Atlan to create the dataset. Because this operation will persist the asset in Atlan, you must provide it an AtlanClient through which to connect to the tenant. Create a Preset dataset 29 30 31 32 33 dataset = PresetDataset . creator ( # (1) name = \"ps-dataset \" , # (2) preset_dashboard_qualified_name = preset_dashboard_qualified_name # (3) ) response = client . asset . save ( dataset ) # (4) Build up the minimum request to create a dataset. Provide a human-readable name for your dataset. Provide the qualified_name of the collection. Actually call Atlan to create the dataset. Create a Preset dataset 23 24 25 26 27 val dataset = PresetDataset . creator ( // (1) \"ps-dataset\" , // (2) collection ) // (3) . build () val response = dataset . save ( client ) // (4) Build up the minimum request to create a dataset. Provide a human-readable name for your dataset. Provide the collection for this dataset. Actually call Atlan to create the dataset. Because this operation will persist the asset in Atlan, you must provide it an AtlanClient through which to connect to the tenant. POST /api/meta/entity/bulk 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 { \"entities\" : [ { \"typeName\" : \"PresetDataset\" , // (1) \"attributes\" : { \"name\" : \"ps-dataset\" , // (2) \"qualifiedName\" : \"default/preset/123456789/ps-workspace/ps-collection/ps-dataset\" , // (3) \"connectionQualifiedName\" : \"default/preset/123456789\" , // (4) \"connectorName\" : \"preset\" , // (5) \"presetDashboard\" : { // (6) \"typeName\" : \"PresetDashboard\" , // (7) \"uniqueAttributes\" : { // (8) \"qualifiedName\" : \"default/preset/123456789/ps-workspace/ps-collection\" } }, \"presetDashboardQualifiedName\" : \"default/preset/123456789/ps-workspace/ps-collection\" , // (9) \"presetWorkspaceQualifiedName\" : \"default/preset/123456789/ps-workspace\" // (10) } } ] } The typeName must be exactly PresetDataset . Human-readable name for your dataset. The qualifiedName should follow the pattern: default/preset/<epoch>/<workspace_name>/<collection_name>/<dataset_name> , where default/preset/<epoch>/<workspace_name>/<collection_name> is the qualifiedName of the collection for this dataset and <dataset_name> is the name for this dataset. The connectionQualifiedName must be the exact qualifiedName of the connection for this dataset. The connectorName must be exactly preset . The collection in which this dataset exists is embedded in the presetDashboard attribute. The typeName for this embedded reference must be PresetDashboard . To complete the reference, you must include a uniqueAttributes object with the qualifiedName of the collection. Note: the collection must already exist in Atlan before creating the dataset. The presetDashboardQualifiedName should be the qualifiedName of the collection. The presetWorkspaceQualifiedName should be the qualifiedName of the workspace. Available relationships ¶ Every level of the business intelligence structure is an Asset , and can therefore be related to the following other assets. erDiagram Asset }o--o{ AtlasGlossaryTerm : meanings Asset ||--o{ Link : links Asset ||--o| Readme : readme Asset }o--o{ Process : inputToProcesses Asset }o--o{ Process : outputFromProcesses AtlasGlossaryTerm ¶ A glossary term provides meaning to an asset. The link terms to assets snippet provides more detail on setting this relationship. Link ¶ A link provides additional context to an asset, by providing a URL to additional information. Readme ¶ A README provides rich documentation for an asset. The add asset READMEs snippet provides more detail on setting this relationship. Process ¶ A process provides lineage information for an asset. An asset can be both an input and an output for one or more processes. The lineage snippets provide more detail on creating and working with lineage. Although if you want to delete everything in a connection, your better avenue is the packaged connection delete utility in the UI. ↩ Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/patterns/create/preset/",
    "scraped_at": "2025-09-15 19:53:56",
    "content_length": 25186,
    "topic": "API_SDK"
  },
  {
    "title": "Set up Amazon QuickSight | Atlan Documentation",
    "content": "On this page warning 🤓 Who can do this? You will probably need your Amazon QuickSight administrator to run these commands - you may not have access yourself. Atlan currently only supports IAM user authentication for Amazon QuickSight. Create IAM policy ​ To create an IAM policy with the necessary permissions, follow the steps in the AWS Identity and Access Management User Guide . Create the policy using the following JSON: { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Effect\" : \"Allow\" , \"Action\" : [ \"quicksight:ListAnalyses\" , \"quicksight:ListDataSets\" , \"quicksight:ListDashboards\" , \"quicksight:ListFolders\" , \"quicksight:ListDataSources\" , \"quicksight:DescribeAnalysis\" , \"quicksight:DescribeDashboard\" , \"quicksight:DescribeDataSet\" , \"quicksight:DescribeFolder\" , \"quicksight:ListFolderMembers\" ] , \"Resource\" : [ \"arn:aws:quicksight:<region>:<account_id>:*\" ] } ] } Replace <region> with the AWS region of your Amazon QuickSight instance. Replace <account_id> with your AWS account ID. Configure user-based authentication ​ Using the IAM policy created above, configure user-based authentication. To configure user-based authentication: Create an AWS IAM user by following the steps in the AWS Identity and Access Management User Guide . On the Set permissions page, attach the policy created in the previous step to this user. Once the user is created, view or download the user's access key ID and secret access key . danger This will be your only opportunity to view or download the access keys. You will not have access to them again after leaving the user creation screen. Create IAM policy Configure user-based authentication",
    "url": "https://docs.atlan.com/apps/connectors/business-intelligence/amazon-quicksight/how-tos/set-up-amazon-quicksight",
    "scraped_at": "2025-09-15 19:53:58",
    "content_length": 1646,
    "topic": "SSO"
  },
  {
    "title": "Set up on-premises Looker access | Atlan Documentation",
    "content": "On this page Who can do this? You will need access to a machine that can run Docker on-premises. You will also need your Looker access details, including credentials. In some cases you won't be able to expose your Looker instance for Atlan to crawl and ingest metadata. For example, this may happen when security requirements restrict access to sensitive, mission-critical data. In such cases you may want to decouple the extraction of metadata from its ingestion in Atlan. This approach gives you full control over your resources and metadata transfer to Atlan. Prerequisites ​ To extract metadata from your on-premises Looker instance you will need to use Atlan's looker-extractor tool. Did you know? Atlan uses exactly the same looker-extractor behind the scenes when it connects to Looker in the cloud. Install Docker Compose ​ Docker Compose is a tool for defining and running applications composed of many Docker containers. (Any guesses where the name came from? 😉) To install Docker Compose: Install Docker Install Docker Compose Did you know? Instructions provided in this documentation should be enough even if you are completely new to Docker and Docker Compose. But you can also walk through the Get started with Docker Compose tutorial if you want to learn Docker Compose basics first. Get the looker-extractor tool ​ To get the looker-extractor tool: Raise a support ticket to get a link to the latest version. Download the image using the link provided by support. Load the image to the server you'll use to crawl Looker: sudo docker load -i /path/to/looker-extractor-master.tar Get the compose file ​ Atlan provides you with a configuration file for the looker-extractor tool. This is a Docker compose file . To get the compose file: Download the latest compose file . Save the file to an empty directory on the server you'll use to access your on-premises databases. The file is docker-compose.yaml . Define Looker connections ​ The structure of the compose file includes three main sections: x-templates contains configuration fragments. You should ignore this section - do not make any changes to it. services is where you will define your Looker connections. volumes contains mount information. You should ignore this section as well - do not make any changes to it. Define services ​ For each on-premises Looker instance, define an entry under services in the compose file. Each entry will have the following structure: services: CONNECTION-NAME: <<: *extract environment: <<: *looker-defaults INCLUDE_PROJECTS: \"project1,project2\" USE_FIELD_LEVEL_LINEAGE: \"true\" volumes: - ./output/looker-example:/output/process Replace CONNECTION-NAME with the name of your connection. <<: *extract tells the looker-extractor tool to run. environment contains all parameters for the tool. Replaces the values given for INCLUDE_PROJECTS with the names of your own Looker projects you want to extract. Separate each project name by a comma. volumes specifies where to store results. In this example, the extractor will store results in the ./output/looker-example folder on the local file system. You can add as many Looker connections as you want. Did you know? Docker's documentation describes the services format in more detail. Provide credentials ​ To define the credentials for your Looker connections you will need to provide: A Looker SDK configuration file A private key to access your git repository via ssh (to extract field-level lineage) A passphrase to decipher the private key (to extract field-level lineage) The Looker metadata includes the git repo locations. The Looker SDK configuration is a .ini file with the following format: [Looker] # Base URL for your looker instance API. Do not include /api/* in the URL. base_url=https://<host>:<port> # API 3 client id client_id=YourClientID # API 3 client secret client_secret=YourClientSecret verify_ssl=True Secure credentials ​ Using local files ​ danger If you decide to keep Looker credentials in plaintext files, we recommend you restrict access to the directory and the compose file. For extra security, we recommend you use Docker secrets to store the sensitive passwords. To specify the local files in your compose file: secrets: looker_config: file: ./looker.ini looker_git_private_key: file: ./id_ed25519 looker_git_private_key_passphrase: file: ./passphrase.txt danger This secrets section is at the same top-level as the services section described earlier. It is not a sub-section of the services section. Using Docker secrets ​ To create and use Docker secrets: Store the Looker SDK configuration file: sudo docker secret create looker_config path/to/looker.ini At the top of your compose file, add a secrets element to access your secret: secrets: looker_config: external: true name: looker_config The name should be the same one you used in the docker secret create command above. Once stored as a Docker secret, you can remove the local Looker SDK configuration file. info 💪 Did you know? You can use the same steps to create Docker secrets for your git details, as well. Replace the name ( looker_config ) and path to the file, but otherwise run the same command. Within the service section of the compose file, add a new secrets element and specify the name of the secret within your service to use it. Example ​ Let's explain in detail with an example: secrets: looker_config: external: true name: looker_config looker_git_private_key: file: ./id_ed25519 looker_git_private_key_passphrase: external: true name: looker_git_private_key_passphrase x-templates: # ... services: my-looker: <<: *extract environment: <<: *looker-defaults INCLUDE_PROJECTS: \"project1,project2\" USE_FIELD_LEVEL_LINEAGE: \"true\" volumes: - ./output/looker-example:/output/process secrets: - looker_config - looker_git_private_key - looker_git_private_key_passphrase volumes: jars: In this example we've defined the secrets at the top of the file (you could also define them at the bottom): looker_config refers to an external Docker secret created using the docker secret create command. looker_git_private_key refers to a local file. looker_git_private_key_passphrase refers to an external Docker secret created using the docker secret create command. The name of this service is my-looker . You can use any meaningful name you want. The <<: *looker-defaults sets the connection type to Looker. INCLUDE_PROJECTS tells the extractor to only extract project1 and project2 from Looker. USE_FIELD_LEVEL_LINEAGE tells the extractor to extract field-level lineage. This means the git private key information is also required. The ./output/looker-example:/output/process line tells the extractor where to store results. In this example, the extractor will store results in the ./output/looker-example directory on the local file system. We recommend you output metadata for different connections in separate directories. The secrets section within services tells the extractor which secrets to use for this service. Each of these refers to the name of a secret listed at the beginning of the compose file. Prerequisites Get the compose file Define Looker connections Provide credentials Secure credentials Example",
    "url": "https://docs.atlan.com/apps/connectors/business-intelligence/looker/how-tos/set-up-on-premises-looker-access",
    "scraped_at": "2025-09-15 19:54:00",
    "content_length": 7170,
    "topic": "API_SDK"
  },
  {
    "title": "DbtColumnProcess - Developer",
    "content": "DbtColumnProcess ¶ Instance of a column-level dbt process in Atlan. Complete reference This is a complete reference for the DbtColumnProcess object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. DbtColumnProcess inherits its attributes and relationships from these other types: classDiagram direction RL class DbtColumnProcess link DbtColumnProcess \"../dbtcolumnprocess\" class Dbt { <<abstract>> } link Dbt \"../dbt\" Dbt <|-- DbtColumnProcess : extends class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- Dbt : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends class ColumnProcess link ColumnProcess \"../columnprocess\" ColumnProcess <|-- DbtColumnProcess : extends class Process link Process \"../process\" Process <|-- ColumnProcess : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Process : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from DbtColumnProcess 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. additionalEtlContext ¶ TBC ast ¶ TBC code ¶ TBC sql ¶ TBC qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) dbtAccountName ¶ TBC dbtAlias ¶ TBC dbtConnectionContext ¶ TBC dbtEnvironmentDbtVersion ¶ TBC dbtEnvironmentName ¶ TBC dbtJobLastRun ¶ TBC dbtJobName ¶ TBC dbtJobNextRun ¶ TBC dbtJobNextRunHumanized ¶ TBC dbtJobRuns ¶ List of latest DBT job runs across all environments dbtJobSchedule ¶ TBC dbtJobScheduleCronHumanized ¶ TBC dbtJobStatus ¶ TBC dbtMeta ¶ TBC dbtPackageName ¶ TBC dbtProjectName ¶ TBC dbtSemanticLayerProxyUrl ¶ TBC dbtTags ¶ TBC dbtUniqueId ¶ TBC These attributes are specific to instances of DbtColumnProcess (and all of its subtypes). dbtColumnProcessJobStatus ¶ TBC Relationships ¶ Inherited relationships These relationships are inherited from DbtColumnProcess 's supertypes: adfActivity ( AdfActivity ) ¶ TBC airflowTasks ( AirflowTask ) ¶ TBC columnProcesses ( ColumnProcess ) ¶ TBC fivetranConnector ( FivetranConnector ) ¶ TBC inputs ( Catalog ) ¶ TBC matillionComponent ( MatillionComponent ) ¶ TBC outputs ( Catalog ) ¶ TBC powerBIDataflow ( PowerBIDataflow ) ¶ TBC sparkJobs ( SparkJob ) ¶ TBC anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos inputToAirflowTasks ( AirflowTask ) ¶ Tasks to which this asset provides input. inputToProcesses ( Process ) ¶ Processes to which this asset provides input. inputToSparkJobs ( SparkJob ) ¶ TBC modelImplementedAttributes ( ModelAttribute ) ¶ Attributes implemented by this asset. modelImplementedEntities ( ModelEntity ) ¶ Entities implemented by this asset. outputFromAirflowTasks ( AirflowTask ) ¶ Tasks from which this asset is output. outputFromProcesses ( Process ) ¶ Processes from which this asset is produced as output. outputFromSparkJobs ( SparkJob ) ¶ TBC process ( Process ) ¶ Process in which this task exists. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/dbtcolumnprocess/",
    "scraped_at": "2025-09-15 19:54:02",
    "content_length": 20181,
    "topic": "SSO"
  },
  {
    "title": "ModeWorkspace - Developer",
    "content": "ModeWorkspace ¶ Instance of a Mode workspace in Atlan. Complete reference This is a complete reference for the ModeWorkspace object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. ModeWorkspace inherits its attributes and relationships from these other types: classDiagram direction RL class ModeWorkspace link ModeWorkspace \"../modeworkspace\" class Mode { <<abstract>> } link Mode \"../mode\" Mode <|-- ModeWorkspace : extends class BI { <<abstract>> } link BI \"../bi\" BI <|-- Mode : extends class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- BI : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from ModeWorkspace 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) modeId ¶ TBC modeQueryName ¶ TBC modeQueryQualifiedName ¶ TBC modeReportName ¶ TBC modeReportQualifiedName ¶ TBC modeToken ¶ TBC modeWorkspaceName ¶ TBC modeWorkspaceQualifiedName ¶ TBC modeWorkspaceUsername ¶ TBC These attributes are specific to instances of ModeWorkspace (and all of its subtypes). modeCollectionCount ¶ Number of collections in this workspace. Relationships ¶ Inherited relationships These relationships are inherited from ModeWorkspace 's supertypes: anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos inputToAirflowTasks ( AirflowTask ) ¶ Tasks to which this asset provides input. inputToProcesses ( Process ) ¶ Processes to which this asset provides input. inputToSparkJobs ( SparkJob ) ¶ TBC modelImplementedAttributes ( ModelAttribute ) ¶ Attributes implemented by this asset. modelImplementedEntities ( ModelEntity ) ¶ Entities implemented by this asset. outputFromAirflowTasks ( AirflowTask ) ¶ Tasks from which this asset is output. outputFromProcesses ( Process ) ¶ Processes from which this asset is produced as output. outputFromSparkJobs ( SparkJob ) ¶ TBC These relationships are specific to instances of ModeWorkspace (and all of its subtypes). modeCollections ( ModeCollection ) ¶ Collections that exist within this workspace. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/modeworkspace/",
    "scraped_at": "2025-09-15 19:54:03",
    "content_length": 19353,
    "topic": "SSO"
  },
  {
    "title": "GoogleTag - Developer",
    "content": "GoogleTag ¶ Detailed information about a Google tag. Complete reference This is a complete reference for the GoogleTag struct in Atlan, showing all of its embedded properties. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. Embedded properties ¶ These are the attributes embedded within each instance of the GoogleTag struct in an asset: googleTagKey ¶ Key of the Google tag. googleTagValue ¶ Value for the Google tag. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/structs/googletag/",
    "scraped_at": "2025-09-15 19:54:05",
    "content_length": 731,
    "topic": "SSO"
  },
  {
    "title": "6 docs tagged with \"data-catalog\" | Atlan Documentation",
    "content": "Crawl GCS assets Configure and run the GCS crawler to catalog your GCP GCS buckets and objects in Atlan. Crawl S3 assets Configure and run the S3 crawler to catalog your Amazon S3 buckets and objects in Atlan. Custom Metadata Learn how to create and manage custom metadata attributes in Atlan to extend your data catalog with organization-specific information. Google Cloud Storage Integrate, catalog, and govern Google Cloud Storage assets in Atlan. What does Atlan crawl from Amazon S3 Complete reference for the S3 assets and properties that Atlan crawls and maps during S3 cataloging. What does Atlan crawl from Google GCS Complete reference for the GCS assets and properties that Atlan crawls and maps during GCS cataloging.",
    "url": "https://docs.atlan.com/tags/data-catalog",
    "scraped_at": "2025-09-15 19:54:08",
    "content_length": 729,
    "topic": "SSO"
  },
  {
    "title": "AtlasGlossaryTermRelationshipStatus - Developer",
    "content": "AtlasGlossaryTermRelationshipStatus ¶ How reliable the relationship is between two glossary terms. Complete reference This is a complete reference for the AtlasGlossaryTermRelationshipStatus enumeration in Atlan, showing all of its possible values. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. Valid values ¶ DRAFT ACTIVE DEPRECATED OBSOLETE OTHER Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/enums/atlasglossarytermrelationshipstatus/",
    "scraped_at": "2025-09-15 19:54:10",
    "content_length": 663,
    "topic": "API_SDK"
  },
  {
    "title": "17 docs tagged with \"business-terms\" | Atlan Documentation",
    "content": "A Glossary A glossary is a list of terms that is organized in a specific way to help users understand their data assets. For example, terms like `cost`, `P&L`, and `revenue` can be used to group and search all financial data assets. Bulk upload terms in the glossary Learn about bulk upload terms in the glossary. Can I add duplicate glossary terms? Each [term](/product/capabilities/governance/glossary/concepts/what-is-a-glossary#term) in a glossary should be unique. Duplicate terms in the same glossary may cause confusion rather than provide the context that users need. Enable associated terms To enable associated terms, follow these steps. Glossary update request approval issue Learn about why am i unable to approve a glossary update request?. How do I fully delete glossary terms or archived items? Learn about how do i fully delete glossary terms or archived items?. Link terms to assets Once you've [set up a glossary](/product/capabilities/governance/glossary/how-tos/set-up-glossaries), you can link terms from your glossary to your data assets in Atlan. Report on assets Learn about report on assets. Report on automations You can track asset enrichment through [suggestions from similar assets](/product/integrations/automation/always-on/references/suggestions-from-similar-assets). You can also view top users who have accepted automated suggestions. Report on glossaries The [glossary](/product/capabilities/governance/glossary/concepts/what-is-a-glossary) dashboard in the reporting center helps you track your glossaries, categories, and terms. You can view a high-level overview of all your glossaries or use a [variety of filters](/product/capabilities/discovery/how-tos/use-the-filters-menu) to drill down further. Report on governance You can review query access for your personas and purposes from the governance dashboard. This can be especially helpful in managing your data governance setup. Report on queries The Insights dashboard in the reporting center helps you track metrics for all your [queries](/product/capabilities/insights/how-tos/query-data) and query runs. Report on usage and cost The usage and cost dashboard in the reporting center can help you better understand asset usage and optimize your operations accordingly. You can track storage consumption for your assets, sort asset metrics by popularity, and filter assets by context - all in one dashboard. Restrict asset visibility Note that [glossary access works slightly differently](/product/administration/labs/how-tos/restrict-glossary-visibility). Restrict glossary visibility Restrict glossary visibility <Badge variant=\"preview\" text=\"Private Preview\" link=\"/get-started/references/product-release-stages#private-preview\" /> Set up glossaries The Atlan [glossary](/product/capabilities/governance/glossary/concepts/what-is-a-glossary) allows you to add new terms and categories, search for existing glossary definitions, and archive old ones. You can also nest terms under categories and subcategories to create a glossary hierarchy. Summarize metadata The reporting center helps you summarize and report on what's happening to your assets in Atlan. You can track metrics for asset enrichment, view metadata updates over time, review your data governance setup, and so much more.",
    "url": "https://docs.atlan.com/tags/business-terms",
    "scraped_at": "2025-09-15 19:54:11",
    "content_length": 3283,
    "topic": "SSO"
  },
  {
    "title": "Cubes - Developer",
    "content": "Cube model ¶ Reference documentation This is reference documentation covering the entire Atlan model. It is not the best place to start when trying to understand how to manage multidimensional cube assets in Atlan. For that, we would suggest starting with the manage cube assets pattern . These model elements all deal with multidimensional cube constructs. classDiagram direction RL class MultiDimensionalDataset { <<abstract>> } link MultiDimensionalDataset \"../multidimensionaldataset\" class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- MultiDimensionalDataset : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends class Cube link Cube \"entities/cube\" MultiDimensionalDataset <|-- Cube : extends class CubeHierarchy link CubeHierarchy \"../entities/cubehierarchy\" MultiDimensionalDataset <|-- CubeHierarchy : extends class CubeField link CubeField \"../entities/cubefield\" MultiDimensionalDataset <|-- CubeField : extends class CubeDimension link CubeDimension \"../entities/cubedimension\" MultiDimensionalDataset <|-- CubeDimension : extends Properties ¶ These attributes are specific to instances of MultiDimensionalDataset (and all of its subtypes). cubeDimensionName ¶ Simple name of the cube dimension in which this asset exists, or empty if it is itself a dimension. cubeDimensionQualifiedName ¶ Unique name of the cube dimension in which this asset exists, or empty if it is itself a dimension. cubeHierarchyName ¶ Simple name of the dimension hierarchy in which this asset exists, or empty if it is itself a hierarchy. cubeHierarchyQualifiedName ¶ Unique name of the dimension hierarchy in which this asset exists, or empty if it is itself a hierarchy. cubeName ¶ Simple name of the cube in which this asset exists, or empty if it is itself a cube. cubeQualifiedName ¶ Unique name of the cube in which this asset exists, or empty if it is itself a cube. Relationships ¶ The following illustrates how the various pieces of multi-dimensional datasets inter-relate with each other: erDiagram Connection ||..o{ Cube : \"\" Cube ||--o{ CubeDimension : cubeDimensions CubeDimension ||--o{ CubeHierarchy : cubeHierarchies CubeHierarchy ||--o{ CubeField : cubeFields CubeField |o--o{ CubeField : cubeNestedFields Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/multidimensionaldataset/",
    "scraped_at": "2025-09-15 19:54:12",
    "content_length": 2552,
    "topic": "API_SDK"
  },
  {
    "title": "End-to-end bulk update - Developer",
    "content": "End-to-end bulk update ¶ Running example To walk through this using an example, and to compare and contrast the approaches, imagine you want to: Mark all views (including materialized views) in a particular schema as verified, unless they already have some certificate. Change the owner of the same views. Step-by-step ¶ The usual end-to-end pattern for updating many assets efficiently involves three steps: Finding the assets you want to update. Applying your updates to each asset (in-memory). Sending those changes to Atlan (in batches). You can do each of these steps in sequence, for example: 1. Find the assets ¶ 1.4.0 1.1.0 You start by first finding the assets you want to update. This is usually best done through a search . (For other common examples, have a look at the search snippets .) Java Python Kotlin Raw REST API Example: get all views in a schema 1 2 3 4 5 6 7 8 9 10 11 12 String schemaQN = \"default/snowflake/1662194632/MYDB/MY_SCH\" ; // (1) IndexSearchRequest findViews = client . assets . select () // (2) . where ( Asset . QUALIFIED_NAME . startsWith ( schemaQN )) // (3) . where ( Asset . TYPE_NAME . in ( List . of ( View . TYPE_NAME , MaterializedView . TYPE_NAME ))) // (4) . whereNot ( Asset . CERTIFICATE_STATUS . hasAnyValue ()) // (5) . pageSize ( 100 ) // (6) . includeOnResults ( Asset . DESCRIPTION ) // (7) . includeOnResults ( Asset . CERTIFICATE_STATUS ) . includeOnResults ( Asset . OWNER_USERS ) . toRequest (); // (8) IndexSearchResponse response = findViews . search (); // (9) The qualifiedName of every view starts with the qualifiedName of its parent (schema), so we can limit the results to a particular schema by using the qualifiedName . To start building up a query with multiple conditions, you can use the select() helper on any client's assets member. You can chain where() methods to define all the conditions the search results must match. You can use the static constants within any given type to select a particular attribute (like QUALIFIED_NAME in this example), and then limit results to only those assets whose qualifiedName starts with the qualifiedName of the schema (by using the startsWith() predicate). In this example, that means only assets that are within this particular schema will be returned as results. Since there could be tables, views, materialized views and columns in this schema — but you only want views and materialized views — you can use the Asset.TYPE_NAME.in() method to restrict results to only views and materialized views. Since you only want to update views that do not already have a certificate, you can further limit the results using the whereNot() method. This will exclude any assets where a certificate already hasAnyValue() . Here you can play around with different page sizes, to further limit API calls by retrieving more results per page. Add as many attributes as needed. Each attribute you add here will ensure that detail is included in each search result. So in this example, every view will include its description, certificate, and individual owners. (Limit these attributes to the minimum you need about each view to do your intended work.) You can translate the object you've built up into various outputs, for example immediately calculating a count of how many results match or streaming them directly for processing. In this case, the toRequest() method will give us the resulting set of criteria back as a complete index search request. You can then execute the search based on the request. Example: get all views in a schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 from pyatlan.client.atlan import AtlanClient from pyatlan.client.asset import Batch from pyatlan.errors import AtlanError from pyatlan.model.enums import CertificateStatus from pyatlan.model.fluent_search import CompoundQuery , FluentSearch from pyatlan.model.assets import Asset , View , MaterialisedView client = AtlanClient () schema_qualified_name = \"default/snowflake/1662194632/MYDB/MY_SCH\" # (1) find_views = ( FluentSearch () # (2) . where ( Asset . QUALIFIED_NAME . startswith ( schema_qualified_name )) # (3) . where ( CompoundQuery . asset_types ([ View , MaterialisedView ])) # (4) . where ( CompoundQuery . active_assets ()) . where_not ( Asset . CERTIFICATE_STATUS . has_any_value ()) # (5) . page_size ( 100 ) # (6) . include_on_results ( Asset . DESCRIPTION ) # (7) . include_on_results ( Asset . CERTIFICATE_STATUS ) . include_on_results ( Asset . OWNER_USERS ) ) . to_request () # (8) response = client . asset . search ( find_views ) # (9) The qualified_name of every view starts with the qualified_name of its parent (schema), so we can limit the results to a particular schema by using the qualified_name . To start building up a query with multiple conditions, you can use a FluentSearch() object. You can chain where() methods to define all the conditions the search results must match. You can use the class variables within any given type to select a particular attribute (like QUALIFIED_NAME in this example), and then limit results to only those assets whose qualified_name starts with the qualified_name of the schema (by using the startswith() predicate). In this example, that means only assets that are within this particular schema will be returned as results. Since there could be tables, views, materialized views and columns in this schema — but you only want views and materialized views — you can use the CompoundQuery.asset_types() helper method to restrict results to only views and materialized views. Since you only want to update views that do not already have a certificate, you can further limit the results using the where_not() method. This will exclude any assets where a certificate already has_any_value() . Here you can play around with different page sizes, to further limit API calls by retrieving more results per page. Add as many attributes as needed. Each attribute you add here will ensure that detail is included in each search result. So in this example, every view will include its description, certificate, and individual owners. (Limit these attributes to the minimum you need about each view to do your intended work.) You can translate the object you've built up into various outputs, for example immediately calculating a count of how many results match or executing the query to start processing results directly. In this case, the to_request() method will give us the resulting set of criteria back as a complete index search request. You can then execute the search based on the request. Example: get all views in a schema 1 2 3 4 5 6 7 8 9 10 11 12 val schemaQN = \"default/snowflake/1662194632/MYDB/MY_SCH\" // (1) val findViews = client . assets . select () // (2) . where ( Asset . QUALIFIED_NAME . startsWith ( schemaQN )) // (3) . where ( Asset . TYPE_NAME . `in` ( listOf ( View . TYPE_NAME , MaterializedView . TYPE_NAME ))) // (4) . whereNot ( Asset . CERTIFICATE_STATUS . hasAnyValue ()) // (5) . pageSize ( 100 ) // (6) . includeOnResults ( Asset . DESCRIPTION ) // (7) . includeOnResults ( Asset . CERTIFICATE_STATUS ) . includeOnResults ( Asset . OWNER_USERS ) . toRequest () // (8) val response = findViews . search () // (9) The qualifiedName of every view starts with the qualifiedName of its parent (schema), so we can limit the results to a particular schema by using the qualifiedName . To start building up a query with multiple conditions, you can use the select() helper on any client's assets member. You can chain where() methods to define all the conditions the search results must match. You can use the static constants within any given type to select a particular attribute (like QUALIFIED_NAME in this example), and then limit results to only those assets whose qualifiedName starts with the qualifiedName of the schema (by using the startsWith() predicate). In this example, that means only assets that are within this particular schema will be returned as results. Since there could be tables, views, materialized views and columns in this schema — but you only want views and materialized views — you can use the Asset.TYPE_NAME.in() helper method to restrict results to only views and materialized views. Since you only want to update views that do not already have a certificate, you can further limit the results using the whereNot() method. This will exclude any assets where a certificate already hasAnyValue() . Here you can play around with different page sizes, to further limit API calls by retrieving more results per page. Add as many attributes as needed. Each attribute you add here will ensure that detail is included in each search result. So in this example, every view will include its description, certificate, and individual owners. (Limit these attributes to the minimum you need about each view to do your intended work.) You can translate the object you've built up into various outputs, for example immediately calculating a count of how many results match or streaming them directly for processing. In this case, the toRequest() method will give us the resulting set of criteria back as a complete index search request. You can then execute the search based on the request. POST /api/meta/search/indexsearch 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 { \"dsl\" : { // (1) \"query\" : { \"bool\" : { // (2) \"filter\" : [ // (3) { \"prefix\" : { // (4) \"qualifiedName\" : { \"value\" : \"default/snowflake/1662194632/MYDB/MY_SCH\" } } }, { \"terms\" : { // (5) \"__typeName.keyword\" : [ \"View\" , \"MaterialisedView\" ] } }, { \"term\" : { // (6) \"__state\" : { \"value\" : \"ACTIVE\" } } } ], \"must_not\" : [ // (7) { \"exists\" : { \"field\" : \"certificateStatus\" } } ] } }, \"sort\" : [ // (8) { \"__guid\" : { \"order\" : \"asc\" } } ], \"from\" : 0 , // (9) \"size\" : 100 , \"track_total_hits\" : true }, \"attributes\" : [ // (10) \"description\" , \"certificateStatus\" , \"ownerUsers\" ], \"suppressLogs\" : true , \"showSearchScore\" : false , \"excludeMeanings\" : false , \"excludeClassifications\" : false } Run a search to find the views and materialized views. To start building up a query with multiple conditions, you can use a bool query in Elasticsearch. You can use the filter criteria to define all the conditions the search results must match in a binary way (either matches or doesn't). This avoids the need to calculate a score for each result. The qualifiedName of every view starts with the qualifiedName of its parent (schema), so we can limit the results to a particular schema by using the qualifiedName . Since there could be tables, views, materialized views and columns in this schema — but you only want views and materialized views — you can use an exact match on multiple types to restrict results to only views and materialized views. Searches by default will return all assets that are found — whether active or archived (soft-deleted). In most cases, you probably only want the active ones. Since you only want to update views that do not already have a certificate, you can further limit the results using the must_not clause. This will exclude any assets that already have a certificate present. When paging through results, you should specify a sort to give a stable set of results across pages. The most reliable sort will be by GUID of the asset, as this is guaranteed to be unique for every asset. Here you can play around with different page sizes, to further limit API calls by retrieving more results per page. Add as many attributes as needed. Each attribute you add here will ensure that detail is included in each search result. So in this example, every view will include its description, certificate, and individual owners. (Limit these attributes to the minimum you need about each column to do your intended work.) 2. Build-up your changes ¶ 3.0.0 1.10.5 Next, you iterate through those results and make the changes you want to each one. Use the multiple operations pattern to make multiple changes to each asset. Java Python Kotlin Raw REST API Example: iterate through results and make changes 13 14 15 16 17 18 19 20 21 AssetBatch batch = new AssetBatch ( client , 20 ); // (1) try { for ( Asset result : response ) { // (2) Asset revised = result . trimToRequired () // (3) . certificateStatus ( CertificateStatus . VERIFIED ) // (4) . ownerUser ( \"jsmith\" ) . build (); batch . add ( revised ); // (5) } Create a batch of assets to build-up the changes across multiple assets before applying those changes in Atlan itself. The first parameter defines the Atlan tenant on which the batch will be processed The second specifies the maximum number of assets to build-up before sending them across to Atlan Additional parameters By default (using only the options above) no classifications or custom metadata will be added or changed on the assets in each batch. To also include classifications and custom metadata, you need to use these additional parameters: A third parameter of true to replace all classifications on the assets in the batch, which would include removing classifications if none are provided for the assets in the batch itself (or false if you still want to ignore classifications) A fourth parameter to control how custom metadata should be handled for the assets: IGNORE any custom metadata changes in the batch, OVERWRITE to replace all custom metadata with what's provided in the batch (including removing custom metadata that already exists on an asset), or MERGE to only add or update custom metadata based on what's in the batch (leaving other existing custom metadata unchanged) a fifth parameter to control whether failures should be captured across batches ( true ) or ignored ( false ) a sixth parameter to control whether the batch should only attempt to update assets that already exist ( true ) or also create assets if they do not yet exist ( false ) a seventh parameter to control whether details about each created and updated asset across batches should be tracked ( true ) or ignored ( false ) — counts will always be kept an eighth parameter to control whether the matching for determining whether an asset already exists should be done in a case-insensitive way ( true ) or case-sensitively ( false ) a ninth parameter to control what kind of assets to create, if not running in updateOnly mode: partial assets (only available in lineage), or full assets a tenth parameter to control whether the matching for determining whether an asset already exists should be done strictly according to the data type specified ( false ), or if tables, views and materialized views should be treated interchangeably ( true ) This is the pattern for iterating through all results (across pages) covered in the Searching for assets portion of the SDK documentation. Every asset implements the trimToRequired() method, which gives you a builder containing only the bare minimum information needed to update that asset. Limit your asset to only what you intend to update When you send an update to Atlan, it will only attempt to change the information you send in your request — leaving any information not in your request as-is (unchanged) on the asset in Atlan. By using trimToRequired() you can remove all information you do not want to update, and then chain on only the details you do want to update. In this running example, you are updating the certificate to verified and setting a new owner — so you simply chain those updates onto the trimmed builder. You can then add your (in-memory) modified asset to the batch. Auto-saves as it goes As long as the number of assets built-up is below the maximum batch size specified when creating the batch, this will simply continue to build up the batch. As soon as you hit the size limit for the batch, though, this same method will call the save() operation to batch-update all of those assets in a single API call. Remember to flush Since your loop could finish before you reach another full batch, you must always remember to flush() the batch. This will send any remaining assets that were queued up, when the size of the queue did not yet reach the full batch size. Example: iterate through results and make changes 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 batch = Batch ( # (1) client = client , max_size = 20 , replace_atlan_tags = False , custom_metadata_handling = CustomMetadataHandling . IGNORE , capture_failures = False , update_only = False , track = False , case_insensitive = False , table_view_agnostic = False , creation_handling = AssetCreationHandling . FULL , ) try : for asset in response : # (2) revised = asset . trim_to_required () # (3) revised . certificate_status = CertificateStatus . VERIFIED # (4) revised . owner_users = { \"jsmith\" } batch . add ( asset ) # (5) Create a batch of assets to accumulate changes across multiple assets before applying those changes in Atlan itself. The Batch() takes the following parameters: client : an instance of AssetClient . max_size : the maximum size of each batch to be processed (per API call). Additional optional parameters By default (using only the options above) no classifications or custom metadata will be added or changed on the assets in each batch. To also include classifications and custom metadata, you need to use these additional parameters: replace_atlan_tags ( default: False ): If True replace all classifications (tags) on the assets in the batch, which would include removing classifications (tags) if none are provided for the assets in the batch itself (or False if you still want to ignore classifications) custom_metadata_handling ( default: CustomMetadataHandling.IGNORE ): control how custom metadata should be handled for the assets: IGNORE any custom metadata changes in the batch, OVERWRITE to replace all custom metadata with what's provided in the batch (including removing custom metadata that already exists on an asset), or MERGE to only add or update custom metadata based on what's in the batch (leaving other existing custom metadata unchanged) capture_failures ( default: False ): control whether failures should be captured across batches ( True ) or ignored ( False ) update_only ( default: False ): control whether the batch should only attempt to update assets that already exist ( True ) or also create assets if they do not yet exist ( False ) track ( default: False ): control whether details about each created and updated asset across batches should be tracked ( True ) or ignored ( False ) — counts will always be kept case_insensitive ( default: False ): control whether the matching for determining whether an asset already exists should be done in a case-insensitive way ( True ) or case-sensitively ( False ) creation_handling ( default: AssetCreationHandling.FULL ): control what kind of assets to create, if not running in update_only mode; PARTIAL assets (only available in lineage), or FULL assets table_view_agnostic ( default: False ): control whether the matching for determining whether an asset already exists should be done strictly according to the data type specified ( False ), or if tables, views and materialized views should be treated interchangeably ( True ) This is the pattern for iterating through all results (across pages) covered in the Searching for assets portion of the SDK documentation. Every asset implements the trim_to_required() method, which gives you an object containing only the bare minimum information needed to update that asset. Limit your asset to only what you intend to update When you send an update to Atlan, it will only attempt to change the information you send in your request — leaving any information not in your request as-is (unchanged) on the asset in Atlan. By using trimToRequired() you can remove all information you do not want to update, and then chain on only the details you do want to update. In this running example, you are updating the certificate to verified and setting a new owner — so you simply add those updates onto the trimmed object. You can then add your (in-memory) modified asset to the batch. Auto-saves as it goes As long as the number of assets built-up is below the maximum batch size specified when creating the batch, this will simply continue to build up the batch. As soon as you hit the size limit for the batch, though, this same method will call the save() operation to batch-update all of those assets in a single API call. Remember to flush Since your loop could finish before you reach another full batch, you must always remember to flush() the batch. This will send any remaining assets that were queued up, when the size of the queue did not yet reach the full batch size. Example: iterate through results and make changes 13 14 15 16 17 18 19 20 21 val batch = AssetBatch ( client , 20 ) // (1) try { for ( result in response ) { // (2) val revised = result . trimToRequired () // (3) . certificateStatus ( CertificateStatus . VERIFIED ) // (4) . ownerUser ( \"jsmith\" ) . build () batch . add ( revised ) // (5) } Create a batch of assets to build-up the changes across multiple assets before applying those changes in Atlan itself. The first parameter defines the Atlan tenant on which the batch will be processed The second specifies the maximum number of assets to build-up before sending them across to Atlan Additional parameters By default (using only the options above) no classifications or custom metadata will be added or changed on the assets in each batch. To also include classifications and custom metadata, you need to use these additional parameters: A third parameter of true to replace all classifications on the assets in the batch, which would include removing classifications if none are provided for the assets in the batch itself (or false if you still want to ignore classifications) A fourth parameter to control how custom metadata should be handled for the assets: IGNORE any custom metadata changes in the batch, OVERWRITE to replace all custom metadata with what's provided in the batch (including removing custom metadata that already exists on an asset), or MERGE to only add or update custom metadata based on what's in the batch (leaving other existing custom metadata unchanged) a fifth parameter to control whether failures should be captured across batches ( true ) or ignored ( false ) a sixth parameter to control whether the batch should only attempt to update assets that already exist ( true ) or also create assets if they do not yet exist ( false ) a seventh parameter to control whether details about each created and updated asset across batches should be tracked ( true ) or ignored ( false ) — counts will always be kept an eighth parameter to control whether the matching for determining whether an asset already exists should be done in a case-insensitive way ( true ) or case-sensitively ( false ) a ninth parameter to control what kind of assets to create, if not running in updateOnly mode: partial assets (only available in lineage), or full assets a tenth parameter to control whether the matching for determining whether an asset already exists should be done strictly according to the data type specified ( false ), or if tables, views and materialized views should be treated interchangeably ( true ) This is the pattern for iterating through all results (across pages) covered in the Searching for assets portion of the SDK documentation. Every asset implements the trimToRequired() method, which gives you a builder containing only the bare minimum information needed to update that asset. Limit your asset to only what you intend to update When you send an update to Atlan, it will only attempt to change the information you send in your request — leaving any information not in your request as-is (unchanged) on the asset in Atlan. By using trimToRequired() you can remove all information you do not want to update, and then chain on only the details you do want to update. In this running example, you are updating the certificate to verified and setting a new owner — so you simply chain those updates onto the trimmed builder. You can then add your (in-memory) modified asset to the batch. Auto-saves as it goes As long as the number of assets built-up is below the maximum batch size specified when creating the batch, this will simply continue to build up the batch. As soon as you hit the size limit for the batch, though, this same method will call the save() operation to batch-update all of those assets in a single API call. Remember to flush Since your loop could finish before you reach another full batch, you must always remember to flush() the batch. This will send any remaining assets that were queued up, when the size of the queue did not yet reach the full batch size. Up to your own code There are no API calls to make to change the results in-memory. How you implement this will be entirely up to how you are writing your code. 3. Save them in batches ¶ 3.0.0 1.1.0 Finally, send the changes you have queued up in batches. Use the multiple assets pattern to update multiple assets at the same time. Java Python Kotlin Raw REST API Example: save the changes in batches 22 23 24 25 batch . flush (); // (1) } catch ( AtlanException e ) { // (2) } The AssetBatch 's add() method used in the previous step will automatically save as its internal queue of assets reaches a full batch size. Remember to flush However, since your loop could finish before you reach another full batch, you must always remember to flush() the batch. This will send any remaining assets that were queued up. Both the .add() and .flush() operations of the AssetBatch could send a request over to Atlan. Either can therefore also run into trouble and raise an error through an AtlanException . It is up to you to handle such potential errors as you see fit. Example: save the changes in batches 30 31 32 batch . flush () # (1) except AtlanError as err : ... # (2) The Batch 's add() method used in the previous step will automatically save as its internal queue of assets reaches a full batch size. Remember to flush However, since your loop could finish before you reach another full batch, you must always remember to flush() the batch. This will send any remaining assets that were queued up. Both the .add() and .flush() operations of the Batch could send a request over to Atlan. Either can therefore also run into trouble and raise an error through an AtlanError . It is up to you to handle such potential errors as you see fit. Example: save the changes in batches 22 23 24 25 batch . flush () // (1) } catch ( e : AtlanException ) { // (2) } The AssetBatch 's add() method used in the previous step will automatically save as its internal queue of assets reaches a full batch size. Remember to flush However, since your loop could finish before you reach another full batch, you must always remember to flush() the batch. This will send any remaining assets that were queued up. Both the .add() and .flush() operations of the AssetBatch could send a request over to Atlan. Either can therefore also run into trouble and raise an error through an AtlanException . It is up to you to handle such potential errors as you see fit. POST /api/meta/entity/bulk 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 { \"entities\" : [ // (1) { \"typeName\" : \"View\" , // (2) \"attributes\" : { \"name\" : \"VIEW1\" , // (3) \"qualifiedName\" : \"default/snowflake/1662194632/MYDB/MY_SCH/VIEW1\" , \"certificateStatus\" : \"VERIFIED\" , // (4) \"ownerUsers\" : [ \"jsmith\" ] } }, { // (5) \"typeName\" : \"MaterialisedView\" , \"attributes\" : { \"name\" : \"MVIEW2\" , \"qualifiedName\" : \"default/snowflake/1662194632/MYDB/MY_SCH/MVIEW2\" , \"certificateStatus\" : \"VERIFIED\" , \"ownerUsers\" : [ \"jsmith\" ] } } ] } All details must still be included in an outer entities array. You need to specify the type for each asset you are updating. You need to specify other required attributes for each asset, such as its name and qualifiedName. Add on any other attributes or relationships you want to set on the asset, such as in the running example a verified certificate and new individual owner. Add another object to the payload to represent another asset that should be updated by the same API call. Once again specify all the required information for that kind of asset, and any of the details for attributes or relationships you want to set. Pipelining ¶ 3.0.0 1.10.5 Alternatively, when using an SDK, you can pipeline these operations together. The pipeline will run just as efficiently as the step-by-step approach above: Pushing down the criteria to run as a search on Atlan Lazily-fetching each page of results Batching up and bulk-saving changes Java Python Kotlin Raw REST API Example: pipelining 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 String schemaQN = \"default/snowflake/1662194632/MYDB/MY_SCH\" ; // (1) try ( ParallelBatch batch = new ParallelBatch ( client , 20 )) { // (2) client . assets . select () // (3) . where ( Asset . QUALIFIED_NAME . startsWith ( schemaQN )) // (4) . where ( Asset . TYPE_NAME . in ( List . of ( View . TYPE_NAME , MaterializedView . TYPE_NAME ))) // (5) . whereNot ( Asset . CERTIFICATE_STATUS . hasAnyValue ()) // (6) . pageSize ( 100 ) // (7) . includeOnResults ( Asset . DESCRIPTION ) // (8) . includeOnResults ( Asset . CERTIFICATE_STATUS ) . includeOnResults ( Asset . OWNER_USERS ) . stream ( true ) // (9) . forEach ( result -> { // (10) try { batch . add ( result . trimToRequired () // (11) . certificateStatus ( CertificateStatus . VERIFIED ) // (12) . ownerUser ( \"jsmith\" ) . build ()); // (13) } catch ( AtlanException e ) { // (14) log . error ( \"Unable to update: {}\" , result . getQualifiedName ()); } }); batch . flush (); // (15) log . info ( \"Created: {}\" , batch . getCreated (). size ()); log . info ( \"Updated: {}\" , batch . getUpdated (). size ()); } The qualifiedName of every view starts with the qualifiedName of its parent (schema), so we can limit the results to a particular schema by using the qualifiedName . Create a batch of assets to build-up the changes across multiple assets before applying those changes in Atlan itself. When parallel-processing (see further notes on the stream(true) ) you need to use a parallel-capable ParallelBatch : The first parameter defines the Atlan tenant on which the batch will be processed The second specifies the maximum number of assets to build-up before sending them across to Atlan Additional parameters By default (using only the options above) no classifications or custom metadata will be added or changed on the assets in each batch. To also include classifications and custom metadata, you need to use these additional parameters: A third parameter of true to replace all classifications on the assets in the batch, which would include removing classifications if none are provided for the assets in the batch itself (or false if you still want to ignore classifications) A fourth parameter to control how custom metadata should be handled for the assets: IGNORE any custom metadata changes in the batch, OVERWRITE to replace all custom metadata with what's provided in the batch (including removing custom metadata that already exists on an asset), or MERGE to only add or update custom metadata based on what's in the batch (leaving other existing custom metadata unchanged) a fifth parameter to control whether failures should be captured across batches ( true ) or ignored ( false ) a sixth parameter to control whether the batch should only attempt to update assets that already exist ( true ) or also create assets if they do not yet exist ( false ) a seventh parameter to control whether details about each created and updated asset across batches should be tracked ( true ) or ignored ( false ) — counts will always be kept an eighth parameter to control whether the matching for determining whether an asset already exists should be done in a case-insensitive way ( true ) or case-sensitively ( false ) a ninth parameter to control what kind of assets to create, if not running in updateOnly mode: partial assets (only available in lineage), or full assets a tenth parameter to control whether the matching for determining whether an asset already exists should be done strictly according to the data type specified ( false ), or if tables, views and materialized views should be treated interchangeably ( true ) You can then start defining a pipeline directly against the client's assets by using the select() method. Including archived (soft-deleted) assets Searches by default will return all assets that are found — whether active or archived (soft-deleted). In most cases, you probably only want the active ones, so this is the default behavior of select() . Sending in true to this select() method will start the pipeline to include any archived (soft-deleted) assets in the results, if you do want them. You can chain as many where() methods as you want to define all the conditions the search results must match. You can use the static constants within any given type to select a particular attribute (like QUALIFIED_NAME in this example), and then limit results to only those assets whose qualifiedName starts with the qualifiedName of the schema (by using the startsWith() predicate). In this example, that means only assets that are within this particular schema will be returned as results. Since there could be tables, views, materialized views and columns in this schema — but you only want views and materialized views — you can use the Asset.TYPE_NAME.in() method to restrict results to only views and materialized views. Since you only want to update views that do not already have a certificate, you can further limit the results using the whereNot() method. This will exclude any assets where a certificate already hasAnyValue() . (Optional) You can play around with different page sizes, to further limit API calls by retrieving more results per page. Add as many attributes as needed. Each attribute you add here will ensure that detail is included in each search result. So in this example, every view will include its description, certificate, and individual owners. (Limit these attributes to the minimum you need about each view to do your intended work.) Once you have defined the criteria for your pipeline, call the stream() method to push-down the pipeline to Atlan. This will: Create a search that combines all the criteria you have specified. Run that search against Atlan to produce the first page of results. Page through the results by lazily fetching each subsequent page as you iterate through them. (So if you use a limit() on the stream, for example, you can break out before retrieving all pages.) Can also run in parallel threads You can also parallel-stream the results by passing true to the stream() method. This will spawn multiple threads that each independently process a page of results and combine the results in parallel. While this can be significantly faster for processing many results, keep in mind if you are collecting the results into any structure that structure must be thread-safe. (For example, you'll need to use things like ConcurrentHashMap rather than just HashMap , and to use ParallelBatch rather than AssetBatch if making changes.) For each result, you can then carry out your changes and submit them into the batch. Every asset implements the trimToRequired() method, which gives you a builder containing only the bare minimum information needed to update that asset. Limit your asset to only what you intend to update When you send an update to Atlan, it will only attempt to change the information you send in your request — leaving any information not in your request as-is (unchanged) on the asset in Atlan. By using trimToRequired() you can remove all information you do not want to update, and then chain on only the details you do want to update. In this running example, you are updating the certificate to verified and setting a new owner — so you simply chain those updates onto the trimmed builder. You can then add your (in-memory) modified asset to the batch. Auto-saves as it goes As long as the number of assets built-up is below the maximum batch size specified when creating the batch, this will simply continue to build up the batch. As soon as you hit the size limit for the batch, though, this same method will call the save() operation to batch-update all of those assets in a single API call. Remember to flush Since your loop could finish before you reach another full batch, you must always remember to flush() the batch. This will send any remaining assets that were queued up, when the size of the queue did not yet reach the full batch size. Both the .add() and .flush() operations of the AssetBatch could send a request over to Atlan. Either can therefore also run into trouble and raise an error through an AtlanException . It is up to you to handle such potential errors as you see fit. The AssetBatch 's add() method used in the previous step will automatically save as its internal queue of assets reaches a full batch size. Remember to flush However, since your loop could finish before you reach another full batch, you must always remember to flush() the batch. This will send any remaining assets that were queued up. Example: pipelining 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 import logging from pyatlan.client.atlan import AtlanClient from pyatlan.client.asset import Batch from pyatlan.model.enums import CertificateStatus from pyatlan.model.fluent_search import CompoundQuery , FluentSearch from pyatlan.model.assets import Asset , View , MaterialisedView LOGGER = logging . getLogger ( __name__ ) client = AtlanClient () schema_qualified_name = \"default/snowflake/1662194632/MYDB/MY_SCH\" # (1) batch = Batch ( # (2) client = client , max_size = 20 , replace_atlan_tags = False , custom_metadata_handling = CustomMetadataHandling . IGNORE , capture_failures = False , update_only = False , track = False , case_insensitive = False , table_view_agnostic = False , creation_handling = AssetCreationHandling . FULL , ) find_views = ( FluentSearch () # (3) . where ( Asset . QUALIFIED_NAME . startswith ( schema_qualified_name )) # (4) . where ( CompoundQuery . asset_types ([ View , MaterialisedView ])) # (5) . where ( CompoundQuery . active_assets ()) . where_not ( Asset . CERTIFICATE_STATUS . has_any_value ()) # (6) . page_size ( 100 ) # (7) . include_on_results ( Asset . DESCRIPTION ) # (8) . include_on_results ( Asset . CERTIFICATE_STATUS ) . include_on_results ( Asset . OWNER_USERS ) ) . to_request () # (9) response = client . asset . search ( find_views ) # (10) try : for asset in response : # (11) revised = asset . trim_to_required () # (12) revised . certificate_status = CertificateStatus . VERIFIED # (13) revised . owner_users = { \"jsmith\" } batch . add ( asset ) # (14) batch . flush () # (15) LOGGER . info ( \"Created %s \" , len ( batch . created )) LOGGER . info ( \"Updated %s \" , len ( batch . updated )) except AtlanError as err : LOGGER . error ( \"Unable to update: %s \" , asset . qualified_name ) The qualifiedName of every view starts with the qualifiedName of its parent (schema), so we can limit the results to a particular schema by using the qualifiedName . Create a batch of assets to accumulate changes across multiple assets before applying those changes in Atlan itself. The Batch() takes the following parameters: client : an instance of AssetClient . max_size : the maximum size of each batch to be processed (per API call). Additional optional parameters By default (using only the options above) no classifications or custom metadata will be added or changed on the assets in each batch. To also include classifications and custom metadata, you need to use these additional parameters: replace_atlan_tags ( default: False ): If True replace all classifications (tags) on the assets in the batch, which would include removing classifications (tags) if none are provided for the assets in the batch itself (or False if you still want to ignore classifications) custom_metadata_handling ( default: CustomMetadataHandling.IGNORE ): control how custom metadata should be handled for the assets: IGNORE any custom metadata changes in the batch, OVERWRITE to replace all custom metadata with what's provided in the batch (including removing custom metadata that already exists on an asset), or MERGE to only add or update custom metadata based on what's in the batch (leaving other existing custom metadata unchanged) capture_failures ( default: False ): control whether failures should be captured across batches ( True ) or ignored ( False ) update_only ( default: False ): control whether the batch should only attempt to update assets that already exist ( True ) or also create assets if they do not yet exist ( False ) track ( default: False ): control whether details about each created and updated asset across batches should be tracked ( True ) or ignored ( False ) — counts will always be kept case_insensitive ( default: False ): control whether the matching for determining whether an asset already exists should be done in a case-insensitive way ( True ) or case-sensitively ( False ) creation_handling ( default: AssetCreationHandling.FULL ): control what kind of assets to create, if not running in update_only mode; PARTIAL assets (only available in lineage), or FULL assets table_view_agnostic ( default: False ): control whether the matching for determining whether an asset already exists should be done strictly according to the data type specified ( False ), or if tables, views and materialized views should be treated interchangeably ( True ) You can then start defining a pipeline directly using a FluentSearch() object. You can chain as many where() methods as you want to define all the conditions the search results must match. You can use the class variables within any given type to select a particular attribute (like QUALIFIED_NAME in this example), and then limit results to only those assets whose qualified_name starts with the qualified_name of the schema (by using the startswith() predicate). In this example, that means only assets that are within this particular schema will be returned as results. Since there could be tables, views, materialized views and columns in this schema — but you only want views and materialized views — you can use the CompoundQuery.asset_types() helper method to restrict results to only views and materialized views. Since you only want to update views that do not already have a certificate, you can further limit the results using the where_not() method. This will exclude any assets where a certificate already has_any_value() . (Optional) You can play around with different page sizes, to further limit API calls by retrieving more results per page. Add as many attributes as needed. Each attribute you add here will ensure that detail is included in each search result. So in this example, every view will include its description, certificate, and individual owners. (Limit these attributes to the minimum you need about each view to do your intended work.) You can translate the object you've built up into various outputs, for example immediately calculating a count of how many results match or streaming them directly for processing. In this case, the toRequest() method will give us the resulting set of criteria back as a complete index search request. You can then execute the search based on the request.tore all of those details back into a response object. For each result, you can then carry out your changes and submit them into the batch. Every asset implements the trim_to_required() method, which gives you a builder containing only the bare minimum information needed to update that asset. Limit your asset to only what you intend to update When you send an update to Atlan, it will only attempt to change the information you send in your request — leaving any information not in your request as-is (unchanged) on the asset in Atlan. By using trim_to_required() you can remove all information you do not want to update, and then chain on only the details you do want to update. In this running example, you are updating the certificate to verified and setting a new owner — so you simply set those updates on the trimmed object. You can then add your (in-memory) modified asset to the batch. The Batch 's add() method used in the previous step will automatically save as its internal queue of assets reaches a full batch size. Remember to flush However, since your loop could finish before you reach another full batch, you must always remember to flush() the batch. This will send any remaining assets that were queued up. Example: pipelining 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 val schemaQN = \"default/snowflake/1662194632/MYDB/MY_SCH\" // (1) ParallelBatch ( client , 20 ). use { batch -> // (2) client . assets . select () // (3) . where ( Asset . QUALIFIED_NAME . startsWith ( schemaQN )) // (4) . where ( Asset . TYPE_NAME . `in` ( listOf ( View . TYPE_NAME , MaterializedView . TYPE_NAME ))) // (5) . whereNot ( Asset . CERTIFICATE_STATUS . hasAnyValue ()) // (6) . pageSize ( 100 ) // (7) . includeOnResults ( Asset . DESCRIPTION ) // (8) . includeOnResults ( Asset . CERTIFICATE_STATUS ) . includeOnResults ( Asset . OWNER_USERS ) . stream ( true ) // (9) . forEach ( result -> { // (10) try { batch . add ( result . trimToRequired () // (11) . certificateStatus ( CertificateStatus . VERIFIED ) // (12) . ownerUser ( \"jsmith\" ) . build ()) // (13) } catch ( AtlanException e ) { // (14) log . error ( \"Unable to update: {}\" , result . qualifiedName ); } }); batch . flush () // (15) log . info ( \"Created: {}\" , batch . created . size ) log . info ( \"Updated: {}\" , batch . updated . size ) } The qualifiedName of every view starts with the qualifiedName of its parent (schema), so we can limit the results to a particular schema by using the qualifiedName . Create a batch of assets to build-up the changes across multiple assets before applying those changes in Atlan itself. When parallel-processing (see further notes on the stream(true) ) you need to use a parallel-capable ParallelBatch : The first parameter defines the Atlan tenant on which the batch will be processed The second specifies the maximum number of assets to build-up before sending them across to Atlan Additional parameters By default (using only the options above) no classifications or custom metadata will be added or changed on the assets in each batch. To also include classifications and custom metadata, you need to use these additional parameters: A third parameter of true to replace all classifications on the assets in the batch, which would include removing classifications if none are provided for the assets in the batch itself (or false if you still want to ignore classifications) A fourth parameter to control how custom metadata should be handled for the assets: IGNORE any custom metadata changes in the batch, OVERWRITE to replace all custom metadata with what's provided in the batch (including removing custom metadata that already exists on an asset), or MERGE to only add or update custom metadata based on what's in the batch (leaving other existing custom metadata unchanged) a fifth parameter to control whether failures should be captured across batches ( true ) or ignored ( false ) a sixth parameter to control whether the batch should only attempt to update assets that already exist ( true ) or also create assets if they do not yet exist ( false ) a seventh parameter to control whether details about each created and updated asset across batches should be tracked ( true ) or ignored ( false ) — counts will always be kept an eighth parameter to control whether the matching for determining whether an asset already exists should be done in a case-insensitive way ( true ) or case-sensitively ( false ) a ninth parameter to control what kind of assets to create, if not running in updateOnly mode: partial assets (only available in lineage), or full assets a tenth parameter to control whether the matching for determining whether an asset already exists should be done strictly according to the data type specified ( false ), or if tables, views and materialized views should be treated interchangeably ( true ) You can then start defining a pipeline directly against the client's assets by using the select() method. Including archived (soft-deleted) assets Searches by default will return all assets that are found — whether active or archived (soft-deleted). In most cases, you probably only want the active ones, so this is the default behavior of select() . Sending in true to this select() method will start the pipeline to include any archived (soft-deleted) assets in the results, if you do want them. You can chain as many where() methods as you want to define all the conditions the search results must match. You can use the static constants within any given type to select a particular attribute (like QUALIFIED_NAME in this example), and then limit results to only those assets whose qualifiedName starts with the qualifiedName of the schema (by using the startsWith() predicate). In this example, that means only assets that are within this particular schema will be returned as results. Since there could be tables, views, materialized views and columns in this schema — but you only want views and materialized views — you can use the Asset.TYPE_NAME.in helper method to restrict results to only views and materialized views. Since you only want to update views that do not already have a certificate, you can further limit the results using the whereNot() method. This will exclude any assets where a certificate already hasAnyValue() . (Optional) You can play around with different page sizes, to further limit API calls by retrieving more results per page. Add as many attributes as needed. Each attribute you add here will ensure that detail is included in each search result. So in this example, every view will include its description, certificate, and individual owners. (Limit these attributes to the minimum you need about each view to do your intended work.) Once you have defined the criteria for your pipeline, call the stream() method to push-down the pipeline to Atlan. This will: Create a search that combines all the criteria you have specified. Run that search against Atlan to produce the first page of results. Page through the results by lazily fetching each subsequent page as you iterate through them. (So if you use a limit() on the stream, for example, you can break out before retrieving all pages.) Can also run in parallel threads You can also parallel-stream the results by passing true to the stream() method. This will spawn multiple threads that each independently process a page of results and combine the results in parallel. While this can be significantly faster for processing many results, keep in mind if you are collecting the results into any structure that structure must be thread-safe. (For example, you'll need to use things like ConcurrentHashMap rather than just HashMap , and to use ParallelBatch rather than AssetBatch if making changes.) For each result, you can then carry out your changes and submit them into the batch. Every asset implements the trimToRequired() method, which gives you a builder containing only the bare minimum information needed to update that asset. Limit your asset to only what you intend to update When you send an update to Atlan, it will only attempt to change the information you send in your request — leaving any information not in your request as-is (unchanged) on the asset in Atlan. By using trimToRequired() you can remove all information you do not want to update, and then chain on only the details you do want to update. In this running example, you are updating the certificate to verified and setting a new owner — so you simply chain those updates onto the trimmed builder. You can then add your (in-memory) modified asset to the batch. Auto-saves as it goes As long as the number of assets built-up is below the maximum batch size specified when creating the batch, this will simply continue to build up the batch. As soon as you hit the size limit for the batch, though, this same method will call the save() operation to batch-update all of those assets in a single API call. Remember to flush Since your loop could finish before you reach another full batch, you must always remember to flush() the batch. This will send any remaining assets that were queued up, when the size of the queue did not yet reach the full batch size. Both the .add() and .flush() operations of the AssetBatch could send a request over to Atlan. Either can therefore also run into trouble and raise an error through an AtlanException . It is up to you to handle such potential errors as you see fit. The AssetBatch 's add() method used in the previous step will automatically save as its internal queue of assets reaches a full batch size. Remember to flush However, since your loop could finish before you reach another full batch, you must always remember to flush() the batch. This will send any remaining assets that were queued up. Requires numerous API calls To implement the same logic purely through raw API calls will require making many calls: To run the search. To page through the results. To batch up a set of assets to update. To submit each batch of assets to update. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/patterns/bulk/end-to-end/",
    "scraped_at": "2025-09-15 19:54:14",
    "content_length": 53834,
    "topic": "API_SDK"
  },
  {
    "title": "Manage DocumentDB assets - Developer",
    "content": "Manage DocumentDB assets ¶ Operations on DocumentDB assets (connections, databases, collections). In general, these should be: Created in top-down order (connection, then database, then collection) Deleted in bottom-up order (collections, then databases, then connections) 1 erDiagram Connection ||--o{ DocumentDBDatabase : contains DocumentDBDatabase ||--o{ DocumentDBCollection : contains Asset structure ¶ Connection ¶ 7.0.0 5.0.6 A DocumentDB connection requires a name and qualifiedName . For creation, specific settings are also required to distinguish it as a DocumentDB connection rather than another type of connection. In addition, at least one of adminRoles , adminGroups , or adminUsers must be provided. Java Python Kotlin Raw REST API Create a DocumentDB connection 1 2 3 4 5 6 7 8 9 10 String adminRoleGuid = client . getRoleCache (). getIdForName ( \"$admin\" ); // (1) Connection connection = Connection . creator ( // (2) \"documentdb-connection\" , // (3) AtlanConnectorType . DOCUMENTDB , // (4) List . of ( adminRoleGuid ), // (5) List . of ( \"group2\" ), // (6) List . of ( \"jsmith\" )) // (7) . build (); AssetMutationResponse response = connection . save ( client ); // (8) String connectionQualifiedName = response . getCreatedAssets (). get ( 0 ). getQualifiedName (); // (9) Retrieve the GUID for the admin role, to use later for defining the roles that can administer the connection. Build up the minimum request to create a connection. Provide a human-readable name for your connection, such as production or development . Set the type of connection to DocumentDB. List the workspace roles that should be able to administer the connection (or null if none). All users with that workspace role (current and future) will be administrators of the connection. Note that the values here need to be the GUID(s) of the workspace role(s). At least one of adminRoles , adminGroups , or adminUsers must be provided. List the group names that can administer this connection (or null if none). All users within that group (current and future) will be administrators of the connection. Note that the values here are the name(s) of the group(s). At least one of adminRoles , adminGroups , or adminUsers must be provided. List the user names that can administer this connection (or null if none). Note that the values here are the username(s) of the user(s). At least one of adminRoles , adminGroups , or adminUsers must be provided. Actually call Atlan to create the connection. Because this operation will persist the asset in Atlan, you must provide it an AtlanClient through which to connect to the tenant. Retrieve the qualifiedName for use in subsequent creation calls. (You'd probably want to do some null checking first.) Create a DocumentDB connection 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from pyatlan.client.atlan import AtlanClient from pyatlan.model.assets import Connection , DocumentDBDatabase , DocumentDBCollection from pyatlan.model.enums import AtlanConnectorType client = AtlanClient () admin_role_guid = str ( client . role_cache . get_id_for_name ( \"$admin\" )) # (1) connection = Connection . creator ( # (2) client = client , # (3) name = \"documentdb-connection\" , # (4) connector_type = AtlanConnectorType . DOCUMENTDB , # (5) admin_roles = [ admin_role_guid ], # (6) admin_groups = [ \"group2\" ], # (7) admin_users = [ \"jsmith\" ], # (8) ) response = client . asset . save ( connection ) # (9) connection_qualified_name = response . assets_created ( asset_type = Connection )[ 0 ] . qualified_name # (10) Retrieve the GUID for the admin role, to use later for defining the roles that can administer the connection. Build up the minimum request to create a connection. You must provide a client instance. Provide a human-readable name for your connection, such as production or development . Set the type of connection to DocumentDB. List the workspace roles that should be able to administer the connection (or None if none). All users with that workspace role (current and future) will be administrators of the connection. Note that the values here need to be the GUID(s) of the workspace role(s). At least one of admin_roles , admin_groups , or admin_users must be provided. List the group names that can administer this connection (or None if none). All users within that group (current and future) will be administrators of the connection. Note that the values here are the name(s) of the group(s). At least one of admin_roles , admin_groups , or admin_users must be provided. List the user names that can administer this connection (or None if none). Note that the values here are the username(s) of the user(s). At least one of admin_roles , admin_groups , or admin_users must be provided. Actually call Atlan to create the connection. Retrieve the qualified_name for use in subsequent creation calls. (You'd probably want to do some null checking first.) Create a DocumentDB connection 1 2 3 4 5 6 7 8 9 10 val adminRoleGuid = client . roleCache . getIdForName ( \"\\ $ admin \" ) // (1) val connection = Connection . creator ( // (2) \"documentdb-connection\" , // (3) AtlanConnectorType . DOCUMENTDB , // (4) listOf ( adminRoleGuid ), // (5) listOf ( \"group2\" ), // (6) listOf ( \"jsmith\" )) // (7) . build () val response = connection . save ( client ) // (8) val connectionQualifiedName = response . createdAssets [ 0 ] . qualifiedName // (9) Retrieve the GUID for the admin role, to use later for defining the roles that can administer the connection. Build up the minimum request to create a connection. Provide a human-readable name for your connection, such as production or development . Set the type of connection to DocumentDB. List the workspace roles that should be able to administer the connection (or null if none). All users with that workspace role (current and future) will be administrators of the connection. Note that the values here need to be the GUID(s) of the workspace role(s). At least one of adminRoles , adminGroups , or adminUsers must be provided. List the group names that can administer this connection (or null if none). All users within that group (current and future) will be administrators of the connection. Note that the values here are the name(s) of the group(s). At least one of adminRoles , adminGroups , or adminUsers must be provided. List the user names that can administer this connection (or null if none). Note that the values here are the username(s) of the user(s). At least one of adminRoles , adminGroups , or adminUsers must be provided. Actually call Atlan to create the connection. Because this operation will persist the asset in Atlan, you must provide it an AtlanClient through which to connect to the tenant. Retrieve the qualifiedName for use in subsequent creation calls. (You'd probably want to do some null checking first.) POST /api/meta/entity/bulk 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 { \"entities\" : [ { \"typeName\" : \"Connection\" , // (1) \"attributes\" : { \"name\" : \"documentdb-connection\" , // (2) \"connectorName\" : \"documentdb\" , // (3) \"qualifiedName\" : \"default/documentdb/123456789\" , // (4) \"category\" : \"database\" , // (5) \"adminRoles\" : [ // (6) \"e7ae0295-c60a-469a-bd2c-fb903943aa02\" ], \"adminGroups\" : [ // (7) \"group2\" ], \"adminUsers\" : [ // (8) \"jsmith\" ] } } ] } The typeName must be exactly Connection . Human-readable name for your connection, such as production or development . The connectorName must be exactly documentdb . The qualifiedName should follow the pattern: default/documentdb/<epoch> , where <epoch> is the time in milliseconds at which the connection is being created. The category must be database . List any workspace roles that can administer this connection. All users with that workspace role (current and future) will be administrators of the connection. Note that the values here need to be the GUID(s) of the workspace role(s). At least one of adminRoles , adminGroups , or adminUsers must be provided. List any groups that can administer this connection. All users within that group (current and future) will be administrators of the connection. Note that the values here are the name(s) of the group(s). At least one of adminRoles , adminGroups , or adminUsers must be provided. List any users that can administer this connection. Note that the values here are the username(s) of the user(s). At least one of adminRoles , adminGroups , or adminUsers must be provided. Access policies Atlan creates the policies that grant access to a connection, including the ability to retrieve the connection and to create assets within it, asynchronously. It can take several seconds (even up to approximately 30 seconds) before these are in place after creating the connection. You may therefore need to wait before you'll be able to create the assets below within the connection. To confirm access, retrieve the connection after it has been created. The SDKs' retry loops will automatically retry until the connection can be successfully retrieved. At that point, your API token has permission to create the other assets. Note: if you are reusing an existing connection rather than creating one via your API token, you must give your API token a persona that has access to that connection. Otherwise all attempts to create, read, update, or delete assets within that connection will fail due to a lack of permissions. DocumentDBDatabase ¶ 6.0.3 5.0.6 A DocumentDB database requires a name and a qualifiedName . For creation, you also need to specify the connectionQualifiedName of the connection for the database. Java Python Kotlin Raw REST API Create a DocumentDB database 11 12 13 14 15 16 17 DocumentDBDatabase database = DocumentDBDatabase . creator ( // (1) \"my-docdb\" , // (2) connectionQualifiedName ) // (3) . documentDBDatabaseCollectionCount ( 10 ) // (4) . build (); AssetMutationResponse response = database . save ( client ); // (5) database = response . getResult ( database ); // (6) Build up the minimum request to create a DocumentDB database. Provide a human-readable name for your database. Provide the qualifiedName of the connection for this database. Optionally provide additional metadata about the database. Actually call Atlan to create the database. Because this operation will persist the asset in Atlan, you must provide it an AtlanClient through which to connect to the tenant. Retrieve the created database for use in subsequent creation calls. (You'd probably want to do some null checking first.) Create a DocumentDB database 17 18 19 20 21 22 23 database = DocumentDBDatabase . creator ( # (1) name = \"my-docdb\" , # (2) connection_qualified_name = connection_qualified_name , # (3) ) database . document_dbdatabase_collection_count = 10 # (4) response = client . asset . save ( database ) # (5) database = response . assets_created ( asset_type = DocumentDBDatabase )[ 0 ] # (6) Build up the minimum request to create a DocumentDB database. Provide a human-readable name for your database. Provide the qualifiedName of the connection for this database. Optionally provide additional metadata about the database. Actually call Atlan to create the database. Retrieve the created database for use in subsequent creation calls. (You'd probably want to do some null checking first.) Create a DocumentDB database 11 12 13 14 15 16 17 val database = DocumentDBDatabase . creator ( // (1) \"my-docdb\" , // (2) connectionQualifiedName ) // (3) . documentDBDatabaseCollectionCount ( 10 ) // (4) . build () val response = database . save ( client ) // (5) val createdDatabase = response . getResult ( database ) // (6) Build up the minimum request to create a DocumentDB database. Provide a human-readable name for your database. Provide the qualifiedName of the connection for this database. Optionally provide additional metadata about the database. Actually call Atlan to create the database. Because this operation will persist the asset in Atlan, you must provide it an AtlanClient through which to connect to the tenant. Retrieve the created database for use in subsequent creation calls. (You'd probably want to do some null checking first.) POST /api/meta/entity/bulk 1 2 3 4 5 6 7 8 9 10 11 12 13 14 { \"entities\" : [ { \"typeName\" : \"DocumentDBDatabase\" , // (1) \"attributes\" : { \"name\" : \"my-docdb\" , // (2) \"qualifiedName\" : \"default/documentdb/123456789/my-docdb\" , // (3) \"connectionQualifiedName\" : \"default/documentdb/123456789\" , // (4) \"connectorName\" : \"documentdb\" , // (5) \"documentDBDatabaseCollectionCount\" : 10 // (6) } } ] } The typeName must be exactly DocumentDBDatabase . Human-readable name for your database. The qualifiedName should follow the pattern: default/documentdb/<epoch>/<database_name> , where default/documentdb/<epoch> is the qualifiedName of the connection for this asset and <database_name> is the name of the database. The connectionQualifiedName must be the exact qualifiedName of the connection for this asset. The connectorName must be the same value as the connector type used when creating the connection. Optionally include additional metadata about the database. DocumentDBCollection ¶ 6.0.3 5.0.6 A DocumentDB collection requires a name and a qualifiedName . For creation, you also need to specify the databaseQualifiedName of the database that contains the collection. Java Python Kotlin Raw REST API Create a DocumentDB collection 18 19 20 21 22 23 24 25 DocumentDBCollection collection = DocumentDBCollection . creator ( // (1) \"users\" , // (2) database . getQualifiedName ()) // (3) . documentDBCollectionSchemaDefinition ( \"{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"name\\\":{\\\"type\\\":\\\"string\\\"},\\\"email\\\":{\\\"type\\\":\\\"string\\\"}}}\" ) // (4) . documentDBCollectionIsCapped ( false ) // (5) . documentDBCollectionNumIndexes ( 3 ) // (6) . build (); AssetMutationResponse response = collection . save ( client ); // (7) Build up the minimum request to create a DocumentDB collection. Provide a human-readable name for your collection. Provide the qualifiedName of the database that contains this collection. Optionally provide the schema definition for the collection. Optionally specify whether the collection is capped or not. Optionally provide additional metadata about the collection. Actually call Atlan to create the collection. Because this operation will persist the asset in Atlan, you must provide it an AtlanClient through which to connect to the tenant. Create a DocumentDB collection 24 25 26 27 28 29 30 31 collection = DocumentDBCollection . creator ( # (1) name = \"users\" , # (2) database_qualified_name = database . qualified_name , # (3) ) collection . document_dbcollection_schema_definition = \"{ \\\" type \\\" : \\\" object \\\" , \\\" properties \\\" :{ \\\" name \\\" :{ \\\" type \\\" : \\\" string \\\" }, \\\" email \\\" :{ \\\" type \\\" : \\\" string \\\" }}}\" # (4) collection . document_dbcollection_is_capped = False # (5) collection . document_dbcollection_num_indexes = 3 # (6) response = client . asset . save ( collection ) # (7) Build up the minimum request to create a DocumentDB collection. Provide a human-readable name for your collection. Provide the qualifiedName of the database that contains this collection. Optionally provide the schema definition for the collection. Optionally specify whether the collection is capped or not. Optionally provide additional metadata about the collection. Actually call Atlan to create the collection. Create a DocumentDB collection 18 19 20 21 22 23 24 25 val collection = DocumentDBCollection . creator ( # ( 1 ) \"users\" , # ( 2 ) database . qualifiedName ) # ( 3 ) . documentDBCollectionSchemaDefinition ( \"{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"name\\\":{\\\"type\\\":\\\"string\\\"},\\\"email\\\":{\\\"type\\\":\\\"string\\\"}}}\" ) # ( 4 ) . documentDBCollectionIsCapped ( false ) # ( 5 ) . documentDBCollectionNumIndexes ( 3 ) # ( 6 ) . build () val response = collection . save ( client ) # ( 7 ) Build up the minimum request to create a DocumentDB collection. Provide a human-readable name for your collection. Provide the qualifiedName of the database that contains this collection. Optionally provide the schema definition for the collection. Optionally specify whether the collection is capped or not. Optionally provide additional metadata about the collection. Actually call Atlan to create the collection. Because this operation will persist the asset in Atlan, you must provide it an AtlanClient through which to connect to the tenant. POST /api/meta/entity/bulk 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 { \"entities\" : [ { \"typeName\" : \"DocumentDBCollection\" , // (1) \"attributes\" : { \"name\" : \"users\" , // (2) \"qualifiedName\" : \"default/documentdb/123456789/my-docdb/users\" , // (3) \"databaseQualifiedName\" : \"default/documentdb/123456789/my-docdb\" , // (4) \"connectorName\" : \"documentdb\" , // (5) \"documentDBCollectionSchemaDefinition\" : \"{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"name\\\":{\\\"type\\\":\\\"string\\\"},\\\"email\\\":{\\\"type\\\":\\\"string\\\"}}}\" , // (6) \"documentDBCollectionIsCapped\" : false , // (7) \"documentDBCollectionNumIndexes\" : 3 // (8) } } ] } The typeName must be exactly DocumentDBCollection . Human-readable name for your collection. The qualifiedName should follow the pattern: default/documentdb/<epoch>/<database_name>/<collection_name> , where default/documentdb/<epoch>/<database_name> is the qualifiedName of the database that contains this collection. The databaseQualifiedName must be the exact qualifiedName of the database that contains this collection. The connectorName must be the same value as the connector type used when creating the connection. Optionally provide the schema definition for the collection. Optionally specify whether the collection is capped or not. Optionally provide additional metadata about the collection. Additional collection properties ¶ The DocumentDBCollection asset type has a number of specific properties that you can use to provide more detailed information: documentDBCollectionAverageObjectSize : Average size of an object in the collection documentDBCollectionExpireAfterSeconds : Seconds after which documents in a time series collection or clustered collection expire documentDBCollectionMaxSize : Maximum size allowed in a capped collection documentDBCollectionMaximumDocumentCount : Maximum number of documents allowed in a capped collection documentDBCollectionNumOrphanDocs : Number of orphaned documents in the collection documentDBCollectionSubtype : Subtype of a DocumentDB collection (e.g., Capped, Time Series, etc.) documentDBCollectionTimeField : Name of the field containing the date in each time series document documentDBCollectionTimeGranularity : Closest match to the time span between consecutive incoming measurements documentDBCollectionTotalIndexSize : Total size of all indexes Available relationships ¶ Each DocumentDB asset is an Asset , and can therefore be related to the following other assets. erDiagram Asset }o--o{ AtlasGlossaryTerm : meanings Asset ||--o{ Link : links Asset ||--o| Readme : readme Asset }o--o{ Process : inputToProcesses Asset }o--o{ Process : outputFromProcesses AtlasGlossaryTerm ¶ A glossary term provides meaning to an asset. The link terms to assets snippet provides more detail on setting this relationship. Link ¶ A link provides additional context to an asset, by providing a URL to additional information. Readme ¶ A README provides rich documentation for an asset. The add asset READMEs snippet provides more detail on setting this relationship. Process ¶ A process provides lineage information for an asset. An asset can be both an input and an output for one or more processes. The lineage snippets provide more detail on creating and working with lineage. Note that unlike other assets, the packaged connection delete utility in the UI will not remove DocumentDB assets associated with the connection. So the DocumentDB assets themselves must be deleted, separately from the connection. ↩ Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/patterns/create/documentdb/",
    "scraped_at": "2025-09-15 19:54:15",
    "content_length": 20045,
    "topic": "SSO"
  },
  {
    "title": "Troubleshooting Domo connectivity | Atlan Documentation",
    "content": "On this page What are the known limitations of the Domo connector? ​ Following are the known limitations of the Domo connector: Column-level lineage is currently not supported. Admin privileges are required for the user creating the client credentials to crawl both datasets and dataset columns. Otherwise, only datasets will be crawled. All three DomoStats dataset IDs are required to run the Domo crawler. An access token is required to generate upstream lineage for datasets , currently only supported with Google BigQuery and Snowflake as data sources.",
    "url": "https://docs.atlan.com/apps/connectors/business-intelligence/domo/troubleshooting/troubleshooting-domo-connectivity",
    "scraped_at": "2025-09-15 19:54:17",
    "content_length": 556,
    "topic": "SSO"
  },
  {
    "title": "DynamoDBLocalSecondaryIndex - Developer",
    "content": "DynamoDBLocalSecondaryIndex ¶ Atlan DynamoDB Local Secondary Index Complete reference This is a complete reference for the DynamoDBLocalSecondaryIndex object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. DynamoDBLocalSecondaryIndex inherits its attributes and relationships from these other types: classDiagram direction RL class DynamoDBLocalSecondaryIndex link DynamoDBLocalSecondaryIndex \"../dynamodblocalsecondaryindex\" class DynamoDBSecondaryIndex { <<abstract>> } link DynamoDBSecondaryIndex \"../dynamodbsecondaryindex\" DynamoDBSecondaryIndex <|-- DynamoDBLocalSecondaryIndex : extends class Table link Table \"../table\" Table <|-- DynamoDBSecondaryIndex : extends class SQL { <<abstract>> } link SQL \"../sql\" SQL <|-- Table : extends class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- SQL : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends class DynamoDB { <<abstract>> } link DynamoDB \"../dynamodb\" DynamoDB <|-- DynamoDBSecondaryIndex : extends class NoSQL { <<abstract>> } link NoSQL \"../nosql\" NoSQL <|-- DynamoDB : extends class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- NoSQL : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from DynamoDBLocalSecondaryIndex 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. noSQLSchemaDefinition ¶ Represents attributes for describing the key schema for the table and indexes. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) calculationViewName ¶ Simple name of the calculation view in which this SQL asset exists, or empty if it does not exist within a calculation view. calculationViewQualifiedName ¶ Unique name of the calculation view in which this SQL asset exists, or empty if it does not exist within a calculation view. databaseName ¶ Simple name of the database in which this SQL asset exists, or empty if it does not exist within a database. databaseQualifiedName ¶ Unique name of the database in which this SQL asset exists, or empty if it does not exist within a database. isProfiled ¶ Whether this asset has been profiled (true) or not (false). lastProfiledAt ¶ Time (epoch) at which this asset was last profiled, in milliseconds. queryCount ¶ Number of times this asset has been queried. queryCountUpdatedAt ¶ Time (epoch) at which the query count was last updated, in milliseconds. queryUserCount ¶ Number of unique users who have queried this asset. queryUserMap ¶ Map of unique users who have queried this asset to the number of times they have queried it. schemaName ¶ Simple name of the schema in which this SQL asset exists, or empty if it does not exist within a schema. schemaQualifiedName ¶ Unique name of the schema in which this SQL asset exists, or empty if it does not exist within a schema. tableName ¶ Simple name of the table in which this SQL asset exists, or empty if it does not exist within a table. tableQualifiedName ¶ Unique name of the table in which this SQL asset exists, or empty if it does not exist within a table. viewName ¶ Simple name of the view in which this SQL asset exists, or empty if it does not exist within a view. viewQualifiedName ¶ Unique name of the view in which this SQL asset exists, or empty if it does not exist within a view. dynamoDBPartitionKey ¶ Specifies the partition key of the DynamoDB Table/Index dynamoDBReadCapacityUnits ¶ The maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException dynamoDBSortKey ¶ Specifies the sort key of the DynamoDB Table/Index dynamoDBStatus ¶ Status of the DynamoDB Asset dynamoDBWriteCapacityUnits ¶ The maximum number of writes consumed per second before DynamoDB returns a ThrottlingException alias ¶ Alias for this table. columnCount ¶ Number of columns in this table. externalLocation ¶ External location of this table, for example: an S3 object location. externalLocationFormat ¶ Format of the external location of this table, for example: JSON, CSV, PARQUET, etc. externalLocationRegion ¶ Region of the external location of this table, for example: S3 region. icebergCatalogName ¶ iceberg table catalog name (can be any user defined name) icebergCatalogSource ¶ iceberg table catalog type (glue, polaris, snowflake) icebergCatalogTableName ¶ catalog table name (actual table name on the catalog side). icebergCatalogTableNamespace ¶ catalog table namespace (actual database name on the catalog side). icebergTableBaseLocation ¶ iceberg table base location inside the external volume. icebergTableType ¶ iceberg table type (managed vs unmanaged) isPartitioned ¶ Whether this table is partitioned (true) or not (false). isQueryPreview ¶ Whether preview queries are allowed for this table (true) or not (false). isSharded ¶ Whether this table is a sharded table (true) or not (false). isTemporary ¶ Whether this table is temporary (true) or not (false). partitionCount ¶ Number of partitions in this table. partitionList ¶ List of partitions in this table. partitionStrategy ¶ Partition strategy for this table. queryPreviewConfig ¶ Configuration for preview queries. rowCount ¶ Number of rows in this table. sizeBytes ¶ Size of this table, in bytes. tableExternalVolumeName ¶ external volume name for the table. tableRetentionTime ¶ Data retention time in days. tableType ¶ Type of the table. dynamoDBSecondaryIndexProjectionType ¶ Specifies attributes that are projected from the DynamoDB table into the index Relationships ¶ Inherited relationships These relationships are inherited from DynamoDBLocalSecondaryIndex 's supertypes: anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos inputToAirflowTasks ( AirflowTask ) ¶ Tasks to which this asset provides input. inputToProcesses ( Process ) ¶ Processes to which this asset provides input. inputToSparkJobs ( SparkJob ) ¶ TBC modelImplementedAttributes ( ModelAttribute ) ¶ Attributes implemented by this asset. modelImplementedEntities ( ModelEntity ) ¶ Entities implemented by this asset. outputFromAirflowTasks ( AirflowTask ) ¶ Tasks from which this asset is output. outputFromProcesses ( Process ) ¶ Processes from which this asset is produced as output. outputFromSparkJobs ( SparkJob ) ¶ TBC dbtModels ( DbtModel ) ¶ TBC dbtSources ( DbtSource ) ¶ TBC dbtTests ( DbtTest ) ¶ TBC sqlDBTSources ( DbtSource ) ¶ TBC sqlDbtModels ( DbtModel ) ¶ TBC columns ( Column ) ¶ Columns that exist within this table. dimensions ( Table ) ¶ TBC facts ( Table ) ¶ TBC partitions ( TablePartition ) ¶ Partitions that exist within this table. queries ( Query ) ¶ Queries that access this table. atlanSchema ( Schema ) ¶ Schema in which this table exists. (1) Uses a different name in SDKs schema schema These relationships are specific to instances of DynamoDBLocalSecondaryIndex (and all of its subtypes). dynamoDBTable ( DynamoDBTable ) ¶ TBC Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/dynamodblocalsecondaryindex/",
    "scraped_at": "2025-09-15 19:54:18",
    "content_length": 24245,
    "topic": "SSO"
  },
  {
    "title": "APIPath - Developer",
    "content": "APIPath ¶ Instance of an API path that could contain one or more endpoints in Atlan. Complete reference This is a complete reference for the APIPath object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. APIPath inherits its attributes and relationships from these other types: classDiagram direction RL class APIPath link APIPath \"../apipath\" class API { <<abstract>> } link API \"../api\" API <|-- APIPath : extends class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- API : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from APIPath 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) apiExternalDocs ¶ External documentation of the API. apiIsAuthOptional ¶ Whether authentication is optional (true) or required (false). apiIsObjectReference ¶ If this asset refers to an APIObject apiObjectQualifiedName ¶ Qualified name of the APIObject that is referred to by this asset. When apiIsObjectReference is true. apiSpecName ¶ Simple name of the API spec, if this asset is contained in an API spec. apiSpecQualifiedName ¶ Unique name of the API spec, if this asset is contained in an API spec. apiSpecType ¶ Type of API, for example: OpenAPI, GraphQL, etc. apiSpecVersion ¶ Version of the API specification. These attributes are specific to instances of APIPath (and all of its subtypes). apiPathAvailableOperations ¶ List of the operations available on the endpoint. apiPathAvailableResponseCodes ¶ Response codes available on the path across all operations. apiPathIsIngressExposed ¶ Whether the path is exposed as an ingress (true) or not (false). apiPathIsTemplated ¶ Whether the endpoint's path contains replaceable parameters (true) or not (false). apiPathRawURI ¶ Absolute path to an individual endpoint. apiPathSummary ¶ Descriptive summary intended to apply to all operations in this path. Relationships ¶ Inherited relationships These relationships are inherited from APIPath 's supertypes: anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos inputToAirflowTasks ( AirflowTask ) ¶ Tasks to which this asset provides input. inputToProcesses ( Process ) ¶ Processes to which this asset provides input. inputToSparkJobs ( SparkJob ) ¶ TBC modelImplementedAttributes ( ModelAttribute ) ¶ Attributes implemented by this asset. modelImplementedEntities ( ModelEntity ) ¶ Entities implemented by this asset. outputFromAirflowTasks ( AirflowTask ) ¶ Tasks from which this asset is output. outputFromProcesses ( Process ) ¶ Processes from which this asset is produced as output. outputFromSparkJobs ( SparkJob ) ¶ TBC These relationships are specific to instances of APIPath (and all of its subtypes). apiSpec ( APISpec ) ¶ API specification in which this path exists. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/apipath/",
    "scraped_at": "2025-09-15 19:54:20",
    "content_length": 20090,
    "topic": "SSO"
  },
  {
    "title": "6 docs tagged with \"faq-connections\" | Atlan Documentation",
    "content": "Can I connect to any source with an ODBC/JDBC driver? A number of Atlan's [supported connectors](/product/connections/references/connectors-and-capabilities) use a JDBC- or REST API-based approach for metadata extraction. If you are attempting to connect to a source with no native integration, [contact Atlan support](/support/submit-request) to share more details about your use case. Can the Hive crawler connect to an independent Hive metastore? Learn about can the hive crawler connect to an independent hive metastore?. Data Connections and Integration Complete guide for connecting Atlan to your data sources, managing integrations, and troubleshooting connection issues. How often does Atlan crawl Snowflake? Learn about how often does atlan crawl snowflake?. What column keys does Atlan crawl? Learn about what column keys does atlan crawl?. What's the difference between connecting to Athena and Glue? Learn about what's the difference between connecting to athena and glue?.",
    "url": "https://docs.atlan.com/tags/faq-connections",
    "scraped_at": "2025-09-15 19:54:21",
    "content_length": 985,
    "topic": "API_SDK"
  },
  {
    "title": "SigmaPage - Developer",
    "content": "SigmaPage ¶ Instance of a Sigma page in Atlan. Complete reference This is a complete reference for the SigmaPage object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. SigmaPage inherits its attributes and relationships from these other types: classDiagram direction RL class SigmaPage link SigmaPage \"../sigmapage\" class Sigma { <<abstract>> } link Sigma \"../sigma\" Sigma <|-- SigmaPage : extends class BI { <<abstract>> } link BI \"../bi\" BI <|-- Sigma : extends class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- BI : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from SigmaPage 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) sigmaDataElementName ¶ Simple name of the data element in which this asset exists. sigmaDataElementQualifiedName ¶ Unique name of the data element in which this asset exists. sigmaPageName ¶ Simple name of the page on which this asset exists. sigmaPageQualifiedName ¶ Unique name of the page on which this asset exists. sigmaWorkbookName ¶ Simple name of the workbook in which this asset exists. sigmaWorkbookQualifiedName ¶ Unique name of the workbook in which this asset exists. These attributes are specific to instances of SigmaPage (and all of its subtypes). sigmaDataElementCount ¶ Number of data elements on this page. Relationships ¶ Inherited relationships These relationships are inherited from SigmaPage 's supertypes: anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos inputToAirflowTasks ( AirflowTask ) ¶ Tasks to which this asset provides input. inputToProcesses ( Process ) ¶ Processes to which this asset provides input. inputToSparkJobs ( SparkJob ) ¶ TBC modelImplementedAttributes ( ModelAttribute ) ¶ Attributes implemented by this asset. modelImplementedEntities ( ModelEntity ) ¶ Entities implemented by this asset. outputFromAirflowTasks ( AirflowTask ) ¶ Tasks from which this asset is output. outputFromProcesses ( Process ) ¶ Processes from which this asset is produced as output. outputFromSparkJobs ( SparkJob ) ¶ TBC These relationships are specific to instances of SigmaPage (and all of its subtypes). sigmaDataElements ( SigmaDataElement ) ¶ Data elements that exist on this page. sigmaWorkbook ( SigmaWorkbook ) ¶ Workbook in which this page exists. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/sigmapage/",
    "scraped_at": "2025-09-15 19:54:23",
    "content_length": 19643,
    "topic": "SSO"
  },
  {
    "title": "Set up Amazon DynamoDB | Atlan Documentation",
    "content": "On this page warning 🤓 Who can do this? You will probably need your Amazon DynamoDB administrator to run these commands - you may not have access yourself. Atlan supports the following authentication methods for fetching metadata from Amazon DynamoDB: IAM user authentication - this method uses an AWS access key, secret key, and region to fetch metadata. IAM role authentication - this method uses an AWS role ARN and region to fetch metadata. Create IAM policy ​ To create an IAM policy with the necessary permissions, follow the steps in the AWS Identity and Access Management User Guide . Create the policy using the following JSON: { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Effect\" : \"Allow\" , \"Action\" : [ \"dynamodb:ListTables\" ] , \"Resource\" : \"*\" } , { \"Effect\" : \"Allow\" , \"Action\" : [ \"dynamodb:DescribeTable\" ] , \"Resource\" : \"arn:aws:dynamodb:<region>:<account_id>:table/*\" } ] } Replace <region> with the AWS region of your Amazon DynamoDB instance. Replace <account_id> with your AWS account ID. IAM permissions ​ Atlan requires the following permissions: dynamodb:ListTables : Fetches a list of your Amazon DynamoDB tables. This permission is used during the metadata extraction process to dynamically determine a list of tables. Note that this action does not support resource-level permissions and requires you to choose all resources, hence * for Resource . dynamodb:DescribeTable : Fetches metadata for extracted tables. This action supports resource-level permissions, so for Resource , you can either: Grant permission to all tables in the region for which you want to extract metadata: arn:aws:dynamodb:<region>:<account_id>:table/* Specify the table names for which you want to extract metadata: arn:aws:dynamodb:<region>:<account_id>:table/table_name_1 , arn:aws:dynamodb:<region>:<account_id>:table/table_name_2 Choose authentication mechanism ​ Using the policy created above , configure one of the following options for authentication. User-based authentication ​ To configure IAM user-based authentication: Create an AWS IAM user by following the steps in the AWS Identity and Access Management User Guide . On the Set permissions page, attach the policy created in the previous step to this user. Refer to managing access keys for IAM users to create an access key for the new user. Once the user is created, view or download the user's access key ID and secret access key . danger This will be your only opportunity to view or download the access keys. You will not have access to them again after leaving the user creation screen. Role delegation-based authentication ​ To configure role delegation-based authentication: Raise a support ticket to get the ARN of the Node Instance Role for your Atlan EKS cluster. Create a new role in your AWS account by following the steps in the AWS Identity and Access Management User Guide . When prompted for policies, attach the policy created in the previous step to this role. When prompted, create a trust relationship for the role using the following trust policy. (Replace <atlan_nodeinstance_role_arn> with the ARN received from Atlan support.) { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Effect\" : \"Allow\" , \"Principal\" : { \"AWS\" : \"<atlan_nodeinstance_role_arn>\" } , \"Action\" : \"sts:AssumeRole\" , \"Condition\" : { } } ] } (Optional) To use an external ID for additional security, paste the external ID into the policy: { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Effect\" : \"Allow\" , \"Principal\" : { \"AWS\" : \"<atlan_nodeinstance_role_arn>\" } , \"Action\" : \"sts:AssumeRole\" , \"Condition\" : { \"StringEquals\" : { \"sts:ExternalId\" : \"<atlan_external_id>\" } } } ] } Replace <atlan_external_id> with the external ID you want to use. Now, reach out to Atlan support with: The name of the role you created above. The ID of the AWS account where the role was created. danger Wait until the support team confirms the account is allowlisted to assume the role before running the crawler. Create IAM policy IAM permissions Choose authentication mechanism",
    "url": "https://docs.atlan.com/apps/connectors/database/amazon-dynamodb/how-tos/set-up-amazon-dynamodb",
    "scraped_at": "2025-09-15 19:54:24",
    "content_length": 4031,
    "topic": "SSO"
  },
  {
    "title": "9 docs tagged with \"monitoring\" | Atlan Documentation",
    "content": "Automate data governance You can streamline your data governance requirements in Atlan with [governance workflows](/product/capabilities/governance/stewardship/how-tos/create-governance-workflows) and manage alerts, approvals, and tasks using the [inbox](/product/capabilities/governance/stewardship/how-tos/manage-tasks). Governance workflows enable you to set up robust controls on data access management, metadata enrichment, new entity creation, and more, with out-of-the-box workflow templates and automated execution. Cloud logging and monitoring Learn about Atlan's Cloud logging and monitoring exported in OpenTelemetry Protocol (OTLP) format for SIEM integration and security monitoring. Link your Microsoft Teams account To get alerts for [starred assets](/product/capabilities/discovery/how-tos/star-assets) directly delivered to your Microsoft Teams account, you may need to first link your Microsoft Teams account. This is done automatically for the user that [set up the Microsoft Teams integration](/product/integrations/collaboration/microsoft-teams/how-tos/integrate-microsoft-teams), but not for other users. Manage tasks :::warning Who can do this? Anyone with access to Atlan - admin, member, or guest user - can use the inbox. Security monitoring Learn about security monitoring. Supported sources Learn about supported sources. Troubleshooting Fivetran connectivity Learn about troubleshooting fivetran connectivity. Troubleshooting Redash connectivity Learn about troubleshooting redash connectivity. What's Data Quality Studio Understand Atlan's Data Quality Studio and how it enables business and data teams to collaborate on defining, monitoring, and enforcing data quality expectations",
    "url": "https://docs.atlan.com/tags/monitoring",
    "scraped_at": "2025-09-15 19:54:25",
    "content_length": 1712,
    "topic": "API_SDK"
  },
  {
    "title": "4 docs tagged with \"collaboration\" | Atlan Documentation",
    "content": "Collaboration Integrations Integrate Atlan with collaboration tools like Microsoft Teams and Slack. Microsoft Teams Integrate Atlan with Microsoft Teams to enable collaboration and notifications. Slack Integrate Atlan with Slack to enable collaboration and notifications. What is included in the Slack integration? Learn about the features and capabilities of the Slack integration with Atlan.",
    "url": "https://docs.atlan.com/tags/collaboration",
    "scraped_at": "2025-09-15 19:54:26",
    "content_length": 393,
    "topic": "API_SDK"
  },
  {
    "title": "Relational databases - Developer",
    "content": "Relational database model ¶ Reference documentation This is reference documentation covering the entire Atlan model. It is not the best place to start when trying to understand how to manage relational database assets in Atlan. For that, we would suggest starting with the manage relational assets pattern . These model elements all deal with relational database constructs. classDiagram direction RL class Referenceable { <<abstract>> } link Referenceable \"../entities/referenceable\" class Asset { <<abstract>> } link Asset \"../entities/asset\" Referenceable <|-- Asset : extends class Catalog { <<abstract>> } link Catalog \"../entities/catalog\" Asset <|-- Catalog : extends class SQL { <<abstract>> } link SQL \"../entities/sql\" Catalog <|-- SQL : extends class Tag { <<abstract>> } link Tag \"../entities/tag\" Catalog <|-- Tag : extends class TablePartition link TablePartition \"../entities/tablepartition\" SQL <|-- TablePartition : extends class Table link Table \"../entities/table\" SQL <|-- Table : extends class Query link Query \"../entities/query\" SQL <|-- Query : extends class Column link Column \"../entities/column\" SQL <|-- Column : extends class Schema link Schema \"../entities/schema\" SQL <|-- Schema : extends class SnowflakeStream link SnowflakeStream \"../entities/snowflakestream\" SQL <|-- SnowflakeStream : extends class SnowflakePipe link SnowflakePipe \"../entities/snowflakepipe\" SQL <|-- SnowflakePipe : extends class Database link Database \"../entities/database\" SQL <|-- Database : extends class Procedure link Procedure \"../entities/procedure\" SQL <|-- Procedure : extends class View link View \"../entities/view\" SQL <|-- View : extends class MaterialisedView link MaterialisedView \"../entities/materialisedview\" SQL <|-- MaterialisedView : extends class SnowflakeTag link SnowflakeTag \"../entities/snowflaketag\" SQL <|-- SnowflakeTag : extends Tag <|-- SnowflakeTag : extends class Function link Function \"../entities/function\" SQL <|-- Function : extends Relationships ¶ The following illustrates how the various relational database objects inter-relate with each other: erDiagram Connection ||..o{ Database : \"\" Database ||--o{ Schema : schemas Schema ||--o{ Table : tables Schema ||--o{ View : views Schema ||--o{ MaterialisedView : materialisedViews Schema ||--o{ Procedure : procedures Schema ||--o{ SnowflakePipe : snowflakePipes Schema ||--o{ SnowflakeStream : snowflakeStreams Schema ||--o{ SnowflakeTag : snowflakeTags Table |o--o{ TablePartition : partitions Table }o--o{ Query : queries Table |o--o{ Column : columns View }o--o{ Query : queries View |o--o{ Column : columns MaterialisedView |o--o{ Column : columns TablePartition |o--o{ Column : columns Column }o--o{ Query : queries Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/rdbms/",
    "scraped_at": "2025-09-15 19:54:28",
    "content_length": 2892,
    "topic": "API_SDK"
  },
  {
    "title": "Crawl Cloudera Impala | Atlan Documentation",
    "content": "On this page Once you have configured the Cloudera Impala user permissions , you can establish a connection between Atlan and Cloudera Impala. To crawl metadata from Cloudera Impala, review the order of operations and then complete the following steps. Select the source ​ To select Cloudera Impala as your source: In the top right of any screen in Atlan, navigate to +New and click New Workflow . From the Marketplace page, click Cloudera Impala Assets . In the right panel, click Setup Workflow . Provide your credentials ​ To enter your Cloudera Impala credentials: For Extraction method , Direct is the default selection. For Hostname , enter the host name of your Cloudera Impala coordinator or load balancer. For Authentication , select LDAP as the authentication method. For Username , enter the LDAP username that has access to Cloudera Impala. For Password , enter the password associated with the LDAP username. For SSL , keep Enabled to connect via a Secure Sockets Layer (SSL) channel or click Disabled . Click the Test Authentication button to confirm connectivity to Cloudera Impala. Once authentication is successful, navigate to the bottom of the screen and click Next . Configure the connection ​ To complete the Cloudera Impala connection configuration: Provide a Connection Name that represents your source environment. For example, you might use values like production , development , gold , or analytics . (Optional) To change the users who are able to manage this connection, change the users or groups listed under Connection Admins . Careful If you do not specify any user or group, no one will be able to manage the connection — not even admins. Navigate to the bottom of the screen and click Next to proceed. Configure the crawler ​ Before running the Cloudera Impala crawler, you can further configure it. On the Metadata Filters page, you can override the defaults for any of these options: To include specific assets in crawling, click Include Metadata , and select the assets you want. If you don't select any, all assets will be included by default. To exclude specific assets from crawling, click Exclude Metadata , and choose the assets you want to omit. If you don't select any, no assets will be excluded. Did you know? If an asset appears in both the include and exclude filters, the exclude filter takes precedence. Run the crawler ​ To run the Cloudera Impala crawler, after completing the steps above: To run the crawler once, immediately, at the bottom of the screen, click the Run button. To schedule the crawler to run hourly, daily, weekly, or monthly, at the bottom of the screen, click the Schedule & Run button. Once the crawler has completed running, you will see the assets on Atlan's asset page! 🎉 Select the source Provide your credentials Configure the connection Configure the crawler Run the crawler",
    "url": "https://docs.atlan.com/apps/connectors/database/cloudera-impala/how-tos/crawl-cloudera-impala",
    "scraped_at": "2025-09-15 19:54:29",
    "content_length": 2852,
    "topic": "SSO"
  },
  {
    "title": "MicroStrategyVisualization - Developer",
    "content": "MicroStrategyVisualization ¶ Instance of a MicroStrategy visualization in Atlan. Complete reference This is a complete reference for the MicroStrategyVisualization object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. MicroStrategyVisualization inherits its attributes and relationships from these other types: classDiagram direction RL class MicroStrategyVisualization link MicroStrategyVisualization \"../microstrategyvisualization\" class MicroStrategy { <<abstract>> } link MicroStrategy \"../microstrategy\" MicroStrategy <|-- MicroStrategyVisualization : extends class BI { <<abstract>> } link BI \"../bi\" BI <|-- MicroStrategy : extends class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- BI : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from MicroStrategyVisualization 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) microStrategyCertifiedAt ¶ Time (epoch) this asset was certified in MicroStrategy, in milliseconds. microStrategyCertifiedBy ¶ User who certified this asset, in MicroStrategy. microStrategyCubeNames ¶ Simple names of the cubes related to this asset. microStrategyCubeQualifiedNames ¶ Unique names of the cubes related to this asset. microStrategyIsCertified ¶ Whether the asset is certified in MicroStrategy (true) or not (false). microStrategyLocation ¶ Location of this asset in MicroStrategy. microStrategyProjectName ¶ Simple name of the project in which this asset exists. microStrategyProjectQualifiedName ¶ Unique name of the project in which this asset exists. microStrategyReportNames ¶ Simple names of the reports related to this asset. microStrategyReportQualifiedNames ¶ Unique names of the reports related to this asset. These attributes are specific to instances of MicroStrategyVisualization (and all of its subtypes). microStrategyDossierName ¶ Simple name of the dossier in which this visualization exists. microStrategyDossierQualifiedName ¶ Unique name of the dossier in which this visualization exists. microStrategyVisualizationType ¶ Type of visualization. Relationships ¶ Inherited relationships These relationships are inherited from MicroStrategyVisualization 's supertypes: anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos inputToAirflowTasks ( AirflowTask ) ¶ Tasks to which this asset provides input. inputToProcesses ( Process ) ¶ Processes to which this asset provides input. inputToSparkJobs ( SparkJob ) ¶ TBC modelImplementedAttributes ( ModelAttribute ) ¶ Attributes implemented by this asset. modelImplementedEntities ( ModelEntity ) ¶ Entities implemented by this asset. outputFromAirflowTasks ( AirflowTask ) ¶ Tasks from which this asset is output. outputFromProcesses ( Process ) ¶ Processes from which this asset is produced as output. outputFromSparkJobs ( SparkJob ) ¶ TBC These relationships are specific to instances of MicroStrategyVisualization (and all of its subtypes). microStrategyDossier ( MicroStrategyDossier ) ¶ Dossier in which this visualization exists. microStrategyProject ( MicroStrategyProject ) ¶ Project in which this visualization exists. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/microstrategyvisualization/",
    "scraped_at": "2025-09-15 19:54:30",
    "content_length": 20457,
    "topic": "SSO"
  },
  {
    "title": "58 docs tagged with \"impact-analysis\" | Atlan Documentation",
    "content": "Column Level Lineage Data lineage shows the upstream and downstream dependencies of an asset. For a more granular view of these dependencies, you can view column-level lineage. Connectors and capabilities Learn about connectors and capabilities. Create data products You can either create a data product from the products module or lineage graph. Does Atlan support field-level lineage for BI tools? Atlan supports field-level lineage across most BI sources that have the concept of fields. See [supported BI sources](/product/connections/references/supported-. Download and export lineage Understanding the flow of data from the source to its destination is a critical need for many organizations. To help you build trust in your data assets, Atlan allows you to [view](#view-impacted-assets), [download](#download-lineage), and [export](#export-impacted-assets) your impacted assets and share it with others in your organization. Download impacted assets in Google Sheets Once you've [connected Atlan with Google Sheets](/product/integrations/collaboration/spreadsheets/how-tos/integrate-atlan-with-google-sheets), you can download impacted assets in Google Sheets. This can help you assess the downstream impact of any changes made to an upstream asset for [impact analysis](/product/capabilities/lineage/concepts/what-is-lineage#impact-analysis). High availability and disaster recovery (HA/DR) Learn about high availability and disaster recovery (ha/dr). How can Atlan generate upstream lineage from the data warehouse layer? Learn about how can atlan generate upstream lineage from the data warehouse layer?. How do you enable data lineage for different data sources? Learn about how do you enable data lineage for different data sources?. How does a Snowflake connection know that a table referenced in LookML is actually the same table? Learn about how does a snowflake connection know that a table referenced in lookml is actually the same table?. How does Atlan handle lineage from Spark jobs? Learn about how does atlan handle lineage from spark jobs?. How is the Atlan lineage graph depicted using Power BI measures? Learn about how is the atlan lineage graph depicted using power bi measures?. How to obtain upstream lineage if I connect to a Tableau data asset? Learn about how to obtain upstream lineage if i connect to a tableau data asset?. Integrate Google Cloud Composer/OpenLineage To integrate Google Cloud Composer/OpenLineage with Atlan, complete the following steps. To learn more about OpenLineage, refer to [OpenLineage configuration and facets](/product/connections/references/openlineage-configuration-and-facets). Is there a way to build lineage from NetSuite to Snowflake? Learn about is there a way to build lineage from netsuite to snowflake?. Lineage [Data lineage](/product/capabilities/lineage/how-tos/view-lineage) captures how data moves across your data landscape. This information is useful to:. Lineage Generator (no transformations) Learn how Atlan can generate upstream lineage from the data warehouse layer, including configuration options and behavior. Monitor data domains The _Statistics_ tab within a data domain helps you take the pulse of what's happening to your data domains in Atlan and gain actionable insights. You can view a summary of data products, track metrics for domain enrichment, view data product creation over time, monitor domain usage, and more. OpenLineage configuration and facets Learn about openlineage configuration and facets. Preflight checks for Apache Airflow Learn about preflight checks for apache airflow. Provider package versions for OpenLineage Learn about provider package versions for openlineage. Report on glossaries The [glossary](/product/capabilities/governance/glossary/concepts/what-is-a-glossary) dashboard in the reporting center helps you track your glossaries, categories, and terms. You can view a high-level overview of all your glossaries or use a [variety of filters](/product/capabilities/discovery/how-tos/use-the-filters-menu) to drill down further. Report on queries The Insights dashboard in the reporting center helps you track metrics for all your [queries](/product/capabilities/insights/how-tos/query-data) and query runs. Report on usage and cost The usage and cost dashboard in the reporting center can help you better understand asset usage and optimize your operations accordingly. You can track storage consumption for your assets, sort asset metrics by popularity, and filter assets by context - all in one dashboard. Set up on-premises Databricks lineage extraction In some cases you will not be able to expose your Databricks instance for Atlan to extract and ingest lineage. For example, this may happen when security requirements restrict access to sensitive, mission-critical data. Tag propagation Learn about tag propagation. Tenant logs Learn about tenant logs. Troubleshooting Amazon DynamoDB connectivity Learn about troubleshooting amazon dynamodb connectivity. Troubleshooting Amazon MSK connectivity Learn about troubleshooting amazon msk connectivity. Troubleshooting Amazon Redshift connectivity Learn about troubleshooting amazon redshift connectivity. Troubleshooting Apache Airflow/OpenLineage connectivity Learn about troubleshooting apache airflow/openlineage connectivity. Troubleshooting Apache Spark/OpenLineage connectivity Learn about troubleshooting apache spark/openlineage connectivity. Troubleshooting Domo connectivity Learn about troubleshooting domo connectivity. Troubleshooting Fivetran connectivity Learn about troubleshooting fivetran connectivity. Troubleshooting IBM Cognos Analytics connectivity Learn about troubleshooting ibm cognos analytics connectivity. Troubleshooting Matillion connectivity Learn about troubleshooting matillion connectivity. Troubleshooting Microsoft Azure Cosmos DB connectivity Learn about troubleshooting microsoft azure cosmos db connectivity. Troubleshooting Microsoft Azure Data Factory connectivity Learn about troubleshooting microsoft azure data factory connectivity. Troubleshooting Microsoft Power BI connectivity Learn about troubleshooting microsoft power bi connectivity. Troubleshooting Mode connectivity Learn about troubleshooting mode connectivity. Troubleshooting MongoDB connectivity Learn about troubleshooting mongodb connectivity. Troubleshooting on-premises Looker connectivity Learn about troubleshooting on-premises looker connectivity. Troubleshooting Qlik Sense Cloud connectivity Learn about troubleshooting qlik sense cloud connectivity. Troubleshooting Sigma connectivity Learn about troubleshooting sigma connectivity. Troubleshooting Sisense connectivity Learn about troubleshooting sisense connectivity. Troubleshooting ThoughtSpot connectivity Learn about troubleshooting thoughtspot connectivity. Troubleshooting usage and popularity metrics Learn about troubleshooting usage and popularity metrics. Use Atlan AI for lineage analysis ➕ Available to customers in Enterprise and Business-Critical platform editions View event logs Event logs help you track and debug events received from supported connectors, providing you with greater observability in Atlan. Event logs are currently stored in Atlan for 7 days. view lineage The [lineage](/product/capabilities/lineage/concepts/what-is-lineage) graph in Atlan provides a granular view of the data flows and transformations for your assets. To learn how to use the lineage graph, complete the following steps. What are processes? Learn about what are processes?. What do the numbers in lineage view mean? Learn about what do the numbers in lineage view mean?. What does Atlan crawl from Cloudera Impala? Learn about what does atlan crawl from cloudera impala?. What does Atlan crawl from Metabase? Atlan crawls and maps the following assets and properties from Metabase. What does Atlan crawl from Sigma? Atlan crawls and maps the following assets and properties from Sigma. What is business lineage? Learn about what is business lineage?. What lineage do you support? Learn about what lineage do you support?. Why is my Databricks lineage API not working? Learn about why is my databricks lineage api not working?.",
    "url": "https://docs.atlan.com/tags/impact-analysis",
    "scraped_at": "2025-09-15 19:54:31",
    "content_length": 8177,
    "topic": "SSO"
  },
  {
    "title": "quick_sight_dataset_import_mode - Developer",
    "content": "quick_sight_dataset_import_mode ¶ TBC Complete reference This is a complete reference for the quick_sight_dataset_import_mode enumeration in Atlan, showing all of its possible values. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. Valid values ¶ SPICE DIRECT_QUERY Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/enums/quick_sight_dataset_import_mode/",
    "scraped_at": "2025-09-15 19:54:33",
    "content_length": 578,
    "topic": "API_SDK"
  },
  {
    "title": "CosmosMongoDBAccount - Developer",
    "content": "CosmosMongoDBAccount ¶ Instance of a Cosmos MongoDB account in Atlan. Complete reference This is a complete reference for the CosmosMongoDBAccount object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. CosmosMongoDBAccount inherits its attributes and relationships from these other types: classDiagram direction RL class CosmosMongoDBAccount link CosmosMongoDBAccount \"../cosmosmongodbaccount\" class CosmosMongoDB { <<abstract>> } link CosmosMongoDB \"../cosmosmongodb\" CosmosMongoDB <|-- CosmosMongoDBAccount : extends class NoSQL { <<abstract>> } link NoSQL \"../nosql\" NoSQL <|-- CosmosMongoDB : extends class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- NoSQL : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from CosmosMongoDBAccount 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) noSQLSchemaDefinition ¶ Represents attributes for describing the key schema for the table and indexes. These attributes are specific to instances of CosmosMongoDBAccount (and all of its subtypes). cosmosMongoDBAccountConsistencyPolicy ¶ The consistency policy configured for the Cosmos MongoDB account. cosmosMongoDBAccountDocumentEndpoint ¶ The Document Endpoint URL for the Cosmos MongoDB account. cosmosMongoDBAccountEnableAutomaticFailover ¶ Indicates whether automatic failover is enabled for the Cosmos MongoDB account. cosmosMongoDBAccountEnableMultipleWriteLocations ¶ Indicates whether multiple write locations are enabled for the Cosmos MongoDB account. cosmosMongoDBAccountEnablePartitionKeyMonitor ¶ Indicates whether partition key monitoring is enabled for the Cosmos MongoDB account. cosmosMongoDBAccountInstanceId ¶ The unique identifier for the Cosmos MongoDB account. cosmosMongoDBAccountIsVirtualNetworkFilterEnabled ¶ Indicates whether the virtual network filter is enabled for the Cosmos MongoDB account. cosmosMongoDBAccountLocations ¶ The locations where the Cosmos MongoDB account is available. cosmosMongoDBAccountMongoEndpoint ¶ The MongoDB connection endpoint for the Cosmos MongoDB account. cosmosMongoDBAccountPublicNetworkAccess ¶ The status of public network access for the Cosmos MongoDB account. cosmosMongoDBAccountReadLocations ¶ The read locations configured for the Cosmos MongoDB account. cosmosMongoDBAccountResourceGroup ¶ The resource group that contains the Cosmos MongoDB account. cosmosMongoDBAccountSubscriptionId ¶ The ID of the subscription to which the Cosmos MongoDB account belongs. cosmosMongoDBAccountType ¶ The type of the Cosmos MongoDB account, such as RU or VCORE. cosmosMongoDBAccountWriteLocations ¶ The write locations configured for the Cosmos MongoDB account. cosmosMongoDBDatabaseCount ¶ Number of databases in this Cosmos MongoDB account. Relationships ¶ Inherited relationships These relationships are inherited from CosmosMongoDBAccount 's supertypes: anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos inputToAirflowTasks ( AirflowTask ) ¶ Tasks to which this asset provides input. inputToProcesses ( Process ) ¶ Processes to which this asset provides input. inputToSparkJobs ( SparkJob ) ¶ TBC modelImplementedAttributes ( ModelAttribute ) ¶ Attributes implemented by this asset. modelImplementedEntities ( ModelEntity ) ¶ Entities implemented by this asset. outputFromAirflowTasks ( AirflowTask ) ¶ Tasks from which this asset is output. outputFromProcesses ( Process ) ¶ Processes from which this asset is produced as output. outputFromSparkJobs ( SparkJob ) ¶ TBC These relationships are specific to instances of CosmosMongoDBAccount (and all of its subtypes). cosmosMongoDBDatabases ( CosmosMongoDBDatabase ) ¶ Databases that exist within this account. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/cosmosmongodbaccount/",
    "scraped_at": "2025-09-15 19:54:35",
    "content_length": 21038,
    "topic": "SSO"
  },
  {
    "title": "Preflight checks for Amazon QuickSight | Atlan Documentation",
    "content": "On this page Before running the Amazon QuickSight crawler , you can run preflight checks to perform the necessary technical validations. The following preflight checks will be completed: Analysis view permission ​ The ListAnalyses REST API is used to fetch the actual list of analyses for which the user has view permission. ✅ Check successful. Analysis API is accessible. ❌ Check failed for listed analyses Folder view permission ​ The ListFolders REST API is used to fetch the actual list of folders for which the user has view permission. ✅ Check successful. Folder API is accessible. ❌ Check failed for listed folders Dashboard view permission ​ The ListDashboards REST API is used to fetch the actual list of dashboards for which the user has view permission. ✅ Check successful. Dashboard API is accessible. ❌ Check failed for listed dashboards Dataset view permission ​ The ListDataSets REST API is used to fetch the actual list of datasets for which the user has view permission. ✅ Check successful. Dataset API is accessible. ❌ Check failed for listed datasets Analysis view permission Folder view permission Dashboard view permission Dataset view permission",
    "url": "https://docs.atlan.com/apps/connectors/business-intelligence/amazon-quicksight/references/preflight-checks-for-amazon-quicksight",
    "scraped_at": "2025-09-15 19:54:36",
    "content_length": 1167,
    "topic": "API_SDK"
  },
  {
    "title": "10 docs tagged with \"salesforce\" | Atlan Documentation",
    "content": "Crawl Salesforce Once you have configured the [Salesforce user permissions](/apps/connectors/crm/salesforce/how-tos/set-up-salesforce), you can establish a connection between Atlan and Salesforce. Does Atlan require an admin user in Salesforce? No. However, it is recommended that a Salesforce administrator establishes a [connection between Atlan and Salesforce](/apps/connectors/crm/salesforce/how-tos/set-up-salesforce). To learn more, see [here](/apps/connectors/crm/salesforce/troubleshooting/troubleshooting-salesforce-connectivity). Preflight checks for Salesforce Before [running the Salesforce crawler](/apps/connectors/crm/salesforce/how-tos/crawl-salesforce), you can run [preflight checks](/product/connections/co. Set up client credentials flow Configure Salesforce for OAuth 2.0 client credentials authentication in Atlan. Set up JWT bearer flow Configure Salesforce for OAuth 2.0 JWT bearer authentication for Atlan. Set up Salesforce Learn about setting up Salesforce authentication for Atlan. Set up username-password flow Configure Salesforce username-password flow for Atlan integration. What does Atlan crawl from Amazon QuickSight? Atlan currently supports lineage for the Amazon QuickSight connector to the following data sources:. What does Atlan crawl from Salesforce? Atlan only performs GET requests on these five endpoints:. Why does the description from Salesforce not show up in Atlan? Atlan supports extracting and displaying description metadata for your [Salesforce objects](/apps/connectors/crm/salesforce/references/what-does-atlan-crawl-from-salesforce).",
    "url": "https://docs.atlan.com/tags/salesforce",
    "scraped_at": "2025-09-15 19:54:37",
    "content_length": 1589,
    "topic": "API_SDK"
  },
  {
    "title": "DynamoDBGlobalSecondaryIndex - Developer",
    "content": "DynamoDBGlobalSecondaryIndex ¶ Atlan DynamoDB Global Secondary Index Complete reference This is a complete reference for the DynamoDBGlobalSecondaryIndex object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. DynamoDBGlobalSecondaryIndex inherits its attributes and relationships from these other types: classDiagram direction RL class DynamoDBGlobalSecondaryIndex link DynamoDBGlobalSecondaryIndex \"../dynamodbglobalsecondaryindex\" class DynamoDBSecondaryIndex { <<abstract>> } link DynamoDBSecondaryIndex \"../dynamodbsecondaryindex\" DynamoDBSecondaryIndex <|-- DynamoDBGlobalSecondaryIndex : extends class Table link Table \"../table\" Table <|-- DynamoDBSecondaryIndex : extends class SQL { <<abstract>> } link SQL \"../sql\" SQL <|-- Table : extends class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- SQL : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends class DynamoDB { <<abstract>> } link DynamoDB \"../dynamodb\" DynamoDB <|-- DynamoDBSecondaryIndex : extends class NoSQL { <<abstract>> } link NoSQL \"../nosql\" NoSQL <|-- DynamoDB : extends class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- NoSQL : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from DynamoDBGlobalSecondaryIndex 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. noSQLSchemaDefinition ¶ Represents attributes for describing the key schema for the table and indexes. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) calculationViewName ¶ Simple name of the calculation view in which this SQL asset exists, or empty if it does not exist within a calculation view. calculationViewQualifiedName ¶ Unique name of the calculation view in which this SQL asset exists, or empty if it does not exist within a calculation view. databaseName ¶ Simple name of the database in which this SQL asset exists, or empty if it does not exist within a database. databaseQualifiedName ¶ Unique name of the database in which this SQL asset exists, or empty if it does not exist within a database. isProfiled ¶ Whether this asset has been profiled (true) or not (false). lastProfiledAt ¶ Time (epoch) at which this asset was last profiled, in milliseconds. queryCount ¶ Number of times this asset has been queried. queryCountUpdatedAt ¶ Time (epoch) at which the query count was last updated, in milliseconds. queryUserCount ¶ Number of unique users who have queried this asset. queryUserMap ¶ Map of unique users who have queried this asset to the number of times they have queried it. schemaName ¶ Simple name of the schema in which this SQL asset exists, or empty if it does not exist within a schema. schemaQualifiedName ¶ Unique name of the schema in which this SQL asset exists, or empty if it does not exist within a schema. tableName ¶ Simple name of the table in which this SQL asset exists, or empty if it does not exist within a table. tableQualifiedName ¶ Unique name of the table in which this SQL asset exists, or empty if it does not exist within a table. viewName ¶ Simple name of the view in which this SQL asset exists, or empty if it does not exist within a view. viewQualifiedName ¶ Unique name of the view in which this SQL asset exists, or empty if it does not exist within a view. dynamoDBPartitionKey ¶ Specifies the partition key of the DynamoDB Table/Index dynamoDBReadCapacityUnits ¶ The maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException dynamoDBSortKey ¶ Specifies the sort key of the DynamoDB Table/Index dynamoDBStatus ¶ Status of the DynamoDB Asset dynamoDBWriteCapacityUnits ¶ The maximum number of writes consumed per second before DynamoDB returns a ThrottlingException alias ¶ Alias for this table. columnCount ¶ Number of columns in this table. externalLocation ¶ External location of this table, for example: an S3 object location. externalLocationFormat ¶ Format of the external location of this table, for example: JSON, CSV, PARQUET, etc. externalLocationRegion ¶ Region of the external location of this table, for example: S3 region. icebergCatalogName ¶ iceberg table catalog name (can be any user defined name) icebergCatalogSource ¶ iceberg table catalog type (glue, polaris, snowflake) icebergCatalogTableName ¶ catalog table name (actual table name on the catalog side). icebergCatalogTableNamespace ¶ catalog table namespace (actual database name on the catalog side). icebergTableBaseLocation ¶ iceberg table base location inside the external volume. icebergTableType ¶ iceberg table type (managed vs unmanaged) isPartitioned ¶ Whether this table is partitioned (true) or not (false). isQueryPreview ¶ Whether preview queries are allowed for this table (true) or not (false). isSharded ¶ Whether this table is a sharded table (true) or not (false). isTemporary ¶ Whether this table is temporary (true) or not (false). partitionCount ¶ Number of partitions in this table. partitionList ¶ List of partitions in this table. partitionStrategy ¶ Partition strategy for this table. queryPreviewConfig ¶ Configuration for preview queries. rowCount ¶ Number of rows in this table. sizeBytes ¶ Size of this table, in bytes. tableExternalVolumeName ¶ external volume name for the table. tableRetentionTime ¶ Data retention time in days. tableType ¶ Type of the table. dynamoDBSecondaryIndexProjectionType ¶ Specifies attributes that are projected from the DynamoDB table into the index Relationships ¶ Inherited relationships These relationships are inherited from DynamoDBGlobalSecondaryIndex 's supertypes: anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos inputToAirflowTasks ( AirflowTask ) ¶ Tasks to which this asset provides input. inputToProcesses ( Process ) ¶ Processes to which this asset provides input. inputToSparkJobs ( SparkJob ) ¶ TBC modelImplementedAttributes ( ModelAttribute ) ¶ Attributes implemented by this asset. modelImplementedEntities ( ModelEntity ) ¶ Entities implemented by this asset. outputFromAirflowTasks ( AirflowTask ) ¶ Tasks from which this asset is output. outputFromProcesses ( Process ) ¶ Processes from which this asset is produced as output. outputFromSparkJobs ( SparkJob ) ¶ TBC dbtModels ( DbtModel ) ¶ TBC dbtSources ( DbtSource ) ¶ TBC dbtTests ( DbtTest ) ¶ TBC sqlDBTSources ( DbtSource ) ¶ TBC sqlDbtModels ( DbtModel ) ¶ TBC columns ( Column ) ¶ Columns that exist within this table. dimensions ( Table ) ¶ TBC facts ( Table ) ¶ TBC partitions ( TablePartition ) ¶ Partitions that exist within this table. queries ( Query ) ¶ Queries that access this table. atlanSchema ( Schema ) ¶ Schema in which this table exists. (1) Uses a different name in SDKs schema schema These relationships are specific to instances of DynamoDBGlobalSecondaryIndex (and all of its subtypes). dynamoDBTable ( DynamoDBTable ) ¶ TBC Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/dynamodbglobalsecondaryindex/",
    "scraped_at": "2025-09-15 19:54:38",
    "content_length": 24256,
    "topic": "SSO"
  },
  {
    "title": "DbtTest - Developer",
    "content": "DbtTest ¶ Instance of a dbt test in Atlan. Complete reference This is a complete reference for the DbtTest object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. DbtTest inherits its attributes and relationships from these other types: classDiagram direction RL class DbtTest link DbtTest \"../dbttest\" class Dbt { <<abstract>> } link Dbt \"../dbt\" Dbt <|-- DbtTest : extends class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- Dbt : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from DbtTest 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) dbtAccountName ¶ TBC dbtAlias ¶ TBC dbtConnectionContext ¶ TBC dbtEnvironmentDbtVersion ¶ TBC dbtEnvironmentName ¶ TBC dbtJobLastRun ¶ TBC dbtJobName ¶ TBC dbtJobNextRun ¶ TBC dbtJobNextRunHumanized ¶ TBC dbtJobRuns ¶ List of latest DBT job runs across all environments dbtJobSchedule ¶ TBC dbtJobScheduleCronHumanized ¶ TBC dbtJobStatus ¶ TBC dbtMeta ¶ TBC dbtPackageName ¶ TBC dbtProjectName ¶ TBC dbtSemanticLayerProxyUrl ¶ TBC dbtTags ¶ TBC dbtUniqueId ¶ TBC These attributes are specific to instances of DbtTest (and all of its subtypes). dbtTestCompiledCode ¶ Compiled code of the test (when the test is defined using Python). dbtTestCompiledSQL ¶ Compiled SQL of the test. dbtTestError ¶ Error message in the case of state being \"error\". dbtTestLanguage ¶ Language in which the test is written, for example: SQL or Python. dbtTestRawCode ¶ Raw code of the test (when the test is defined using Python). dbtTestRawSQL ¶ Raw SQL of the test. dbtTestState ¶ Test results. Can be one of, in order of severity, \"error\", \"fail\", \"warn\", \"pass\". dbtTestStatus ¶ Details of the results of the test. For errors, it reads \"ERROR\". Relationships ¶ Inherited relationships These relationships are inherited from DbtTest 's supertypes: anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos inputToAirflowTasks ( AirflowTask ) ¶ Tasks to which this asset provides input. inputToProcesses ( Process ) ¶ Processes to which this asset provides input. inputToSparkJobs ( SparkJob ) ¶ TBC modelImplementedAttributes ( ModelAttribute ) ¶ Attributes implemented by this asset. modelImplementedEntities ( ModelEntity ) ¶ Entities implemented by this asset. outputFromAirflowTasks ( AirflowTask ) ¶ Tasks from which this asset is output. outputFromProcesses ( Process ) ¶ Processes from which this asset is produced as output. outputFromSparkJobs ( SparkJob ) ¶ TBC These relationships are specific to instances of DbtTest (and all of its subtypes). dbtModelColumns ( DbtModelColumn ) ¶ TBC dbtModels ( DbtModel ) ¶ TBC dbtSources ( DbtSource ) ¶ TBC sqlAssets ( SQL ) ¶ TBC Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/dbttest/",
    "scraped_at": "2025-09-15 19:54:40",
    "content_length": 20024,
    "topic": "SSO"
  },
  {
    "title": "Set up cross-workspace extraction | Atlan Documentation",
    "content": "On this page Eliminate the need for separate crawler configurations by using a single service principal to crawl metadata from all workspaces within a Databricks metastore. This guide walks you through configuring the necessary permissions to enable cross-workspace extraction. Important! Cross-workspace extraction isn't supported for REST API or JDBC extraction methods. Prerequisites ​ Before you begin, make sure you have: A Unity Catalog-enabled Databricks workspace Account admin access to create and manage service principals Workspace admin access to grant permissions across all target workspaces At least one active SQL warehouse in each workspace you intend to crawl Set up Databricks authentication completed with one of the supported authentication methods System table extraction enabled for lineage and usage extraction Add service principal to all workspaces ​ You must use a single, common service principal that has been granted access to all Databricks workspaces you intend to crawl within the metastore. Log in to your Databricks account console as an account admin From the left menu, click Workspaces and select a workspace From the tabs along the top, click the Permissions tab In the upper right, click Add permissions In the Add permissions dialog: For User, group, or service principal , select your service principal For Permission , select workspace User Click Add Repeat steps 2-5 for each workspace you intend to crawl Permissions required ​ The service principal needs the following permissions on each workspace from which the you want Atlan to extract metadata and to enable cross-workspace extraction: CAN_USE on SQL warehouses in each workspace USE CATALOG on system catalog USE SCHEMA on system.access (for cross-workspace discovery) USE SCHEMA on system.information_schema SELECT on the following system tables: system.access.workspace_latest (for cross-workspace discovery) system.information_schema.catalogs system.information_schema.schemata system.information_schema.tables system.information_schema.columns system.information_schema.key_column_usage system.information_schema.table_constraints BROWSE on all catalogs you want to crawl Grant permissions ​ Configure the necessary permissions for the service principal to access and extract metadata from all workspaces within the metastore. SQL workspace permissions: The service principal must have usage permissions on at least one active SQL warehouse within each workspace . The extractor uses the smallest available warehouse to run its discovery queries. Via SQL Via UI Connect to your Databricks workspace using a SQL client or the SQL editor Run the following command for each workspace, replacing the placeholders: GRANT CAN_USE ON WAREHOUSE < warehouse_name > TO ` <service_principal_id> ` ; Replace <warehouse_name> with your actual warehouse name Replace <service_principal_id> with your service principal's application ID Example GRANT CAN_USE ON WAREHOUSE production - warehouse TO ` 12345678-1234-1234-1234-123456789012 ` ; Log in to your Databricks workspace as a workspace admin From the left menu, click SQL Warehouses On the Compute page, for each SQL warehouse, click the 3-dot icon and then click Permissions In the Manage permissions dialog: In the Type to add multiple users or groups field, search for and select your service principal Select Can use permission Click Add to assign the permission System table permissions: Access to the system schema is essential for workspace and lineage discovery. Via SQL Via UI Connect to your Databricks workspace using a SQL client or the SQL editor Grant system catalog access: GRANT USE CATALOG ON CATALOG system TO ` <service_principal_id> ` ; Grant schema-level permissions: GRANT USE SCHEMA ON SCHEMA system . access TO ` <service_principal_id> ` ; GRANT USE SCHEMA ON SCHEMA system . information_schema TO ` <service_principal_id> ` ; Grant SELECT permissions on required system tables: -- For cross-workspace discovery GRANT SELECT ON TABLE system . access . workspace_latest TO ` <service_principal_id> ` ; -- For metadata extraction GRANT SELECT ON TABLE system . information_schema . catalogs TO ` <service_principal_id> ` ; GRANT SELECT ON TABLE system . information_schema . schemata TO ` <service_principal_id> ` ; GRANT SELECT ON TABLE system . information_schema . tables TO ` <service_principal_id> ` ; GRANT SELECT ON TABLE system . information_schema . columns TO ` <service_principal_id> ` ; GRANT SELECT ON TABLE system . information_schema . key_column_usage TO ` <service_principal_id> ` ; GRANT SELECT ON TABLE system . information_schema . table_constraints TO ` <service_principal_id> ` ; Replace <service_principal_id> with your service principal's application ID Example GRANT USE CATALOG ON CATALOG system TO ` 12345678-1234-1234-1234-123456789012 ` ; GRANT USE SCHEMA ON SCHEMA system . access TO ` 12345678-1234-1234-1234-123456789012 ` ; GRANT USE SCHEMA ON SCHEMA system . information_schema TO ` 12345678-1234-1234-1234-123456789012 ` ; GRANT SELECT ON TABLE system . access . workspace_latest TO ` 12345678-1234-1234-1234-123456789012 ` ; GRANT SELECT ON TABLE system . information_schema . catalogs TO ` 12345678-1234-1234-1234-123456789012 ` ; Log in to your Databricks workspace as a workspace admin From the left menu, click Catalog In the Catalog Explorer , click on the system catalog Click the Permissions tab and then click Grant In the Grant permissions dialog: Under Principals , select your service principal Under Privileges , check USE CATALOG Click Grant to apply the permissions Navigate to system > access Click the Permissions tab and then click Grant In the Grant permissions dialog: Under Principals , select your service principal Under Privileges , check USE SCHEMA Click Grant Repeat for system > information_schema For each required system table, navigate to the table and grant SELECT permissions: system.access.workspace_latest system.information_schema.catalogs system.information_schema.schemata system.information_schema.tables system.information_schema.columns system.information_schema.key_column_usage system.information_schema.table_constraints Asset permissions: The service principal requires BROWSE permissions on all catalogs you want to crawl. BROWSE permission enables the service principal to see and read metadata for all data assets within the catalog, automatically granting access to all schemas and tables. Important! For private catalogs, grant permissions from each workspace. For public catalogs, grant from any workspace. Only visible in the system tables when the service principal has BROWSE privileges on individual catalogs. Via SQL Via UI Connect to your Databricks workspace using a SQL client or the SQL editor Grant BROWSE permissions on each catalog you want to crawl: GRANT BROWSE ON CATALOG < catalog_name > TO ` <service_principal_id> ` ; Replace <catalog_name> with your actual catalog name Replace <service_principal_id> with your service principal's application ID Example GRANT BROWSE ON CATALOG main TO ` 12345678-1234-1234-1234-123456789012 ` ; Log in to your Databricks workspace as a workspace admin From the left menu, click Catalog In the Catalog Explorer , navigate to the catalog you want to grant permissions on (for example, main ) Click the Permissions tab and then click Grant In the Grant permissions dialog: Under Principals , select your service principal Under Privileges , check BROWSE Click Grant to apply the permissions Repeat steps 3-5 for each catalog you want to crawl in Atlan Need help? ​ Check Cross-workspace extraction setup FAQ for common questions about cross-workspace extraction Check Troubleshooting cross-workspace extraction issues for common issues Contact Atlan support for help with setup or integration Next steps ​ Crawl Databricks - Set up and run a workflow to extract metadata from your Databricks instance using direct, offline, or agent extraction methods Prerequisites Add service principal to all workspaces Permissions required Grant permissions Need help? Next steps",
    "url": "https://docs.atlan.com/apps/connectors/data-warehouses/databricks/how-tos/set-up-cross-workspace-extraction",
    "scraped_at": "2025-09-15 19:54:41",
    "content_length": 8069,
    "topic": "API_SDK"
  },
  {
    "title": "DataProductVisibility - Developer",
    "content": "DataProductVisibility ¶ Visibility of a data product. Complete reference This is a complete reference for the DataProductVisibility enumeration in Atlan, showing all of its possible values. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. Valid values ¶ Private Protected Public Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/enums/dataproductvisibility/",
    "scraped_at": "2025-09-15 19:54:43",
    "content_length": 590,
    "topic": "API_SDK"
  },
  {
    "title": "13 docs tagged with \"upstream-dependencies\" | Atlan Documentation",
    "content": "Column Level Lineage Data lineage shows the upstream and downstream dependencies of an asset. For a more granular view of these dependencies, you can view column-level lineage. Data and metadata persistence Learn about data and metadata persistence. Download and export lineage Understanding the flow of data from the source to its destination is a critical need for many organizations. To help you build trust in your data assets, Atlan allows you to [view](#view-impacted-assets), [download](#download-lineage), and [export](#export-impacted-assets) your impacted assets and share it with others in your organization. Download impacted assets in Google Sheets Once you've [connected Atlan with Google Sheets](/product/integrations/collaboration/spreadsheets/how-tos/integrate-atlan-with-google-sheets), you can download impacted assets in Google Sheets. This can help you assess the downstream impact of any changes made to an upstream asset for [impact analysis](/product/capabilities/lineage/concepts/what-is-lineage#impact-analysis). How can Atlan generate upstream lineage from the data warehouse layer? Learn about how can atlan generate upstream lineage from the data warehouse layer?. How to obtain upstream lineage if I connect to a Tableau data asset? Learn about how to obtain upstream lineage if i connect to a tableau data asset?. Lineage Generator (no transformations) Learn how Atlan can generate upstream lineage from the data warehouse layer, including configuration options and behavior. Troubleshooting Amazon MSK connectivity Learn about troubleshooting amazon msk connectivity. Troubleshooting Microsoft Power BI connectivity Learn about troubleshooting microsoft power bi connectivity. Troubleshooting MongoDB connectivity Learn about troubleshooting mongodb connectivity. Troubleshooting Qlik Sense Cloud connectivity Learn about troubleshooting qlik sense cloud connectivity. Troubleshooting ThoughtSpot connectivity Learn about troubleshooting thoughtspot connectivity. What do the numbers in lineage view mean? Learn about what do the numbers in lineage view mean?.",
    "url": "https://docs.atlan.com/tags/upstream-dependencies",
    "scraped_at": "2025-09-15 19:54:44",
    "content_length": 2092,
    "topic": "SSO"
  },
  {
    "title": "Core - Developer",
    "content": "Core model ¶ Reference documentation This is reference documentation covering the entire Atlan model. It is not the best place to start when trying to understand developing with Atlan. For that, we would suggest starting with either: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. These are the core model elements in Atlan from which everything else derives. classDiagram direction RL class Referenceable { <<abstract>> } link Referenceable \"../entities/referenceable\" class Asset { <<abstract>> } link Asset \"../entities/asset\" Referenceable <|-- Asset : extends class Connection link Connection \"../entities/connection\" Asset <|-- Connection : extends class Catalog { <<abstract>> } link Catalog \"../entities/catalog\" Asset <|-- Catalog : extends class AccessControl { <<abstract>> } link AccessControl \"../accesscontrol\" Asset <|-- AccessControl : extends class Persona link Persona \"../entities/persona\" AccessControl <|-- Persona : extends class Purpose link Purpose \"../entities/purpose\" AccessControl <|-- Purpose : extends class Tag { <<abstract>> } link Tag \"../entities/tag\" Catalog <|-- Tag : extends class AuthPolicy link AuthPolicy \"../entities/authpolicy\" Asset <|-- AuthPolicy : extends class AuthService link AuthService \"../entities/authservice\" Asset <|-- AuthService : extends class WorkflowRun link WorkflowRun \"../entities/workflowrun\" Asset <|-- WorkflowRun : extends class Task link Task \"../entities/task\" Asset <|-- Task : extends Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/core/",
    "scraped_at": "2025-09-15 19:54:45",
    "content_length": 1716,
    "topic": "API_SDK"
  },
  {
    "title": "extract on-premises Databricks lineage | Atlan Documentation",
    "content": "On this page Once you have set up the databricks-extractor tool , you can extract lineage from your on-premises Databricks instances by completing the following steps. Run databricks-extractor ​ To extract lineage for a specific Databricks connection using the databricks-extractor tool: Log into the server with Docker Compose installed. Change to the directory containing the compose file. Run Docker Compose: sudo docker-compose up <connection-name> (Replace <connection-name> with the name of the connection from the services section of the compose file.) (Optional) Review generated files ​ The databricks-extractor tool will generate many folders with JSON files for each service . For example: extracted-lineage extracted-query-history (if EXTRACT_QUERY_HISTORY is set to true) You can inspect the lineage and usage metadata and make sure it is acceptable for providing metadata to Atlan. Upload generated files to S3 ​ To provide Atlan access to the extracted lineage and usage metadata, you will need to upload the metadata to an S3 bucket. Did you know? We recommend uploading to the same S3 bucket as Atlan uses to avoid access issues. Reach out to your Data Success Manager to get the details of your Atlan bucket. To create your own bucket, refer to the Create your own S3 bucket section of the dbt documentation. (The steps will be exactly the same.) To upload the metadata to S3: Ensure that all files for a particular connection have the same prefix. For example, output/databricks-lineage-example/extracted-lineage/result-0.json , output/databricks-lineage-example/extracted-query-history/result-0.json , and so on. Upload the files to the S3 bucket using your preferred method. For example, to upload all files using the AWS CLI : aws s3 cp output/databricks-lineage-example s3://my-bucket/metadata/databricks-lineage-example --recursive Extract lineage in Atlan ​ Once you have extracted lineage on-premises and uploaded the results to S3, you can extract lineage in Atlan: How to extract lineage and usage from Databricks Be sure to select Offline for the Extraction method . Run databricks-extractor (Optional) Review generated files Upload generated files to S3 Extract lineage in Atlan",
    "url": "https://docs.atlan.com/apps/connectors/data-warehouses/databricks/how-tos/extract-on-premises-databricks-lineage",
    "scraped_at": "2025-09-15 19:54:46",
    "content_length": 2208,
    "topic": "API_SDK"
  },
  {
    "title": "MCIncident - Developer",
    "content": "MCIncident ¶ Instance of a Monte Carlo incident in Atlan. Complete reference This is a complete reference for the MCIncident object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. MCIncident inherits its attributes and relationships from these other types: classDiagram direction RL class MCIncident link MCIncident \"../mcincident\" class MonteCarlo { <<abstract>> } link MonteCarlo \"../montecarlo\" MonteCarlo <|-- MCIncident : extends class DataQuality { <<abstract>> } link DataQuality \"../dataquality\" DataQuality <|-- MonteCarlo : extends class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- DataQuality : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from MCIncident 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) mcAssetQualifiedNames ¶ List of unique names of assets that are part of this Monte Carlo asset. mcLabels ¶ List of labels for this Monte Carlo asset. These attributes are specific to instances of MCIncident (and all of its subtypes). mcIncidentId ¶ Identifier of this incident, from Monte Carlo. mcIncidentPriority ¶ Priority of this incident inherited from monitor. mcIncidentSeverity ¶ Severity of this incident. mcIncidentState ¶ State of this incident. mcIncidentSubTypes ¶ Subtypes of this incident. mcIncidentType ¶ Type of this incident. mcIncidentWarehouse ¶ Name of this incident's warehouse. Relationships ¶ Inherited relationships These relationships are inherited from MCIncident 's supertypes: anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos inputToAirflowTasks ( AirflowTask ) ¶ Tasks to which this asset provides input. inputToProcesses ( Process ) ¶ Processes to which this asset provides input. inputToSparkJobs ( SparkJob ) ¶ TBC modelImplementedAttributes ( ModelAttribute ) ¶ Attributes implemented by this asset. modelImplementedEntities ( ModelEntity ) ¶ Entities implemented by this asset. outputFromAirflowTasks ( AirflowTask ) ¶ Tasks from which this asset is output. outputFromProcesses ( Process ) ¶ Processes from which this asset is produced as output. outputFromSparkJobs ( SparkJob ) ¶ TBC These relationships are specific to instances of MCIncident (and all of its subtypes). mcIncidentAssets ( Asset ) ¶ TBC mcMonitor ( MCMonitor ) ¶ Monitor in which this incident exists. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/mcincident/",
    "scraped_at": "2025-09-15 19:54:48",
    "content_length": 19657,
    "topic": "SSO"
  },
  {
    "title": "Google BigQuery | Atlan Documentation",
    "content": "On this page Overview: Catalog Google BigQuery projects, datasets, tables, and views in Atlan. Gain visibility into lineage, usage, and governance for your cloud data warehouse assets. Get started ​ Follow these steps to connect and catalog Google BigQuery assets in Atlan: Set up the connector Crawl Google BigQuery assets Guides ​ Mine Google BigQuery : Extract query history and build lineage for your BigQuery assets. Enable SSO for Google BigQuery : Set up SSO authentication for BigQuery connections. Manage Google BigQuery tags : Configure and manage tags and policy tags in BigQuery. References ​ What does Atlan crawl from Google BigQuery : Learn about the BigQuery assets and metadata that Atlan discovers and catalogs. Preflight checks for Google BigQuery : Verify prerequisites before setting up the Google BigQuery connector. Troubleshooting ​ Troubleshooting connectivity : Resolve common Google BigQuery connection issues and errors. Get started Guides References Troubleshooting",
    "url": "https://docs.atlan.com/apps/connectors/data-warehouses/google-bigquery",
    "scraped_at": "2025-09-15 19:54:49",
    "content_length": 994,
    "topic": "SSO"
  },
  {
    "title": "Microsoft Azure - Developer",
    "content": "Azure ¶ Base class for Azure assets. classDiagram direction RL class ADLS { <<abstract>> } link ADLS \"../adls\" class ObjectStore { <<abstract>> } link ObjectStore \"../entities/objectstore\" ObjectStore <|-- ADLS : extends class Catalog { <<abstract>> } link Catalog \"../entities/catalog\" Catalog <|-- ObjectStore : extends class Asset { <<abstract>> } link Asset \"../entities/asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../entities/referenceable\" Referenceable <|-- Asset : extends class Azure { <<abstract>> } link Azure \"../azure\" Azure <|-- ADLS : extends class Cloud { <<abstract>> } link Cloud \"../entities/cloud\" Cloud <|-- Azure : extends Asset <|-- Cloud : extends class ADLSAccount link ADLSAccount \"../entities/adlsaccount\" ADLS <|-- ADLSAccount : extends class ADLSContainer link ADLSContainer \"../entities/adlscontainer\" ADLS <|-- ADLSContainer : extends class ADLSObject link ADLSObject \"../entities/adlsobject\" ADLS <|-- ADLSObject : extends class Kafka { <<abstract>> } link Kafka \"../entities/kafka\" class EventStore { <<abstract>> } link EventStore \"../entities/eventstore\" EventStore <|-- Kafka : extends Catalog <|-- EventStore : extends class AzureEventHub link AzureEventHub \"../entities/azureeventhub\" class KafkaTopic link KafkaTopic \"../entities/kafkatopic\" Kafka <|-- KafkaTopic : extends KafkaTopic <|-- AzureEventHub : extends class KafkaConsumerGroup link KafkaConsumerGroup \"../entities/kafkaconsumergroup\" Kafka <|-- KafkaConsumerGroup : extends class AzureEventHubConsumerGroup link AzureEventHubConsumerGroup \"../entities/azureeventhubconsumergroup\" KafkaConsumerGroup <|-- AzureEventHubConsumerGroup : extends Properties ¶ These attributes are specific to instances of Azure (and all of its subtypes). adlsAccountSecondaryLocation ¶ Secondary location of the ADLS account. azureLocation ¶ Location of this asset in Azure. azureResourceId ¶ Resource identifier of this asset in Azure. azureTags ¶ Tags that have been applied to this asset in Azure. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/azure/",
    "scraped_at": "2025-09-15 19:54:51",
    "content_length": 2205,
    "topic": "API_SDK"
  },
  {
    "title": "KafkaConsumerGroup - Developer",
    "content": "KafkaConsumerGroup ¶ Instance of a Kafka ConsumerGroup in Atlan. These group consumers of topics in Kafka. Complete reference This is a complete reference for the KafkaConsumerGroup object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. KafkaConsumerGroup inherits its attributes and relationships from these other types: classDiagram direction RL class KafkaConsumerGroup link KafkaConsumerGroup \"../kafkaconsumergroup\" class Kafka { <<abstract>> } link Kafka \"../kafka\" Kafka <|-- KafkaConsumerGroup : extends class EventStore { <<abstract>> } link EventStore \"../eventstore\" EventStore <|-- Kafka : extends class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- EventStore : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from KafkaConsumerGroup 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) These attributes are specific to instances of KafkaConsumerGroup (and all of its subtypes). kafkaConsumerGroupMemberCount ¶ Number of members in this consumer group. kafkaConsumerGroupTopicConsumptionProperties ¶ List of consumption properties for Kafka topics, for this consumer group. kafkaTopicNames ¶ Simple names of the topics consumed by this consumer group. kafkaTopicQualifiedNames ¶ Unique names of the topics consumed by this consumer group. Relationships ¶ Inherited relationships These relationships are inherited from KafkaConsumerGroup 's supertypes: anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos inputToAirflowTasks ( AirflowTask ) ¶ Tasks to which this asset provides input. inputToProcesses ( Process ) ¶ Processes to which this asset provides input. inputToSparkJobs ( SparkJob ) ¶ TBC modelImplementedAttributes ( ModelAttribute ) ¶ Attributes implemented by this asset. modelImplementedEntities ( ModelEntity ) ¶ Entities implemented by this asset. outputFromAirflowTasks ( AirflowTask ) ¶ Tasks from which this asset is output. outputFromProcesses ( Process ) ¶ Processes from which this asset is produced as output. outputFromSparkJobs ( SparkJob ) ¶ TBC These relationships are specific to instances of KafkaConsumerGroup (and all of its subtypes). kafkaTopics ( KafkaTopic ) ¶ Topics consumed by this consumer group. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/kafkaconsumergroup/",
    "scraped_at": "2025-09-15 19:54:52",
    "content_length": 19569,
    "topic": "SSO"
  },
  {
    "title": "atlas_operation - Developer",
    "content": "atlas_operation ¶ TBC Complete reference This is a complete reference for the atlas_operation enumeration in Atlan, showing all of its possible values. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. Valid values ¶ OTHERS PURGE EXPORT IMPORT IMPORT_DELETE_REPL TYPE_DEF_CREATE TYPE_DEF_UPDATE TYPE_DEF_DELETE SERVER_START SERVER_STATE_ACTIVE Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/enums/atlas_operation/",
    "scraped_at": "2025-09-15 19:54:54",
    "content_length": 654,
    "topic": "API_SDK"
  },
  {
    "title": "AzureTag - Developer",
    "content": "AzureTag ¶ Detailed information about an Azure tag. Complete reference This is a complete reference for the AzureTag struct in Atlan, showing all of its embedded properties. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. Embedded properties ¶ These are the attributes embedded within each instance of the AzureTag struct in an asset: azureTagKey ¶ Key of the Azure tag. azureTagValue ¶ Value for the Azure tag. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/structs/azuretag/",
    "scraped_at": "2025-09-15 19:54:55",
    "content_length": 724,
    "topic": "API_SDK"
  },
  {
    "title": "Set up Sisense | Atlan Documentation",
    "content": "On this page Who can do this? You will need your Sisense administrator to complete these steps - you may not have access yourself. Atlan supports the basic authentication method for fetching metadata from Sisense. This method uses a username and password to fetch metadata. Note that the Sisense connector does not support Sisense for Cloud Data Teams, formerly Periscope Data. Create new user in Sisense ​ Did you know? Atlan does not make any API requests or queries that will update the objects in your Sisense environment. You will need to create a new user in your Sisense instance and assign the Data Admin role to the new user for integrating with Atlan. While Atlan can crawl all other Sisense asset types with the Viewer role, the Data Admin role is required to crawl and generate lineage for data model tables . Atlan uses the Datamodels API to crawl data models and data model tables from Sisense. The Viewer role does not provide access to data models. To create a new user for crawling Sisense : Log in to your Sisense instance with the Admin role. From the tabs along the top, click Admin . On the Admin page, in the System Management box, click Users . From the top right of the Users page, click + Users to add a new user. In the Add Users dialog, enter the following details: For Email , enter an email address for the new user - this will be the username for authenticating the connection in Atlan . (Optional) For First Name and Last Name , enter a first and last name for the new user - for example, Atlan_integration . For Role , click the role dropdown and then click Data Admin to assign that role to the new user. Toggle on Define Password , and for Set Password , set a password for the new user. Confirm the password in the next step. Click Save to complete new user creation. Create new user in Sisense",
    "url": "https://docs.atlan.com/apps/connectors/business-intelligence/sisense/how-tos/set-up-sisense",
    "scraped_at": "2025-09-15 19:54:57",
    "content_length": 1829,
    "topic": "API_SDK"
  },
  {
    "title": "Microsoft Azure Synapse Analytics | Atlan Documentation",
    "content": "On this page Overview: Catalog Microsoft Azure Synapse Analytics workspaces, pools, databases, and tables in Atlan. Gain visibility into lineage, usage, and governance for your Azure data warehouse assets. Get started ​ Follow these steps to connect and catalog Microsoft Azure Synapse Analytics assets in Atlan: Set up the connector Crawl Microsoft Azure Synapse Analytics assets Guides ​ Mine Microsoft Azure Synapse Analytics : Extract query history and build lineage for your Synapse Analytics assets. Set up on-premises Microsoft Azure Synapse Analytics miner access : Configure Atlan to mine query history from on-premises Synapse Analytics environments. References ​ What does Atlan crawl from Microsoft Azure Synapse Analytics : Learn about the Synapse Analytics assets and metadata that Atlan discovers and catalogs. What lineage does Atlan extract from Microsoft Azure Synapse Analytics : Learn about supported lineage extraction for Synapse Analytics assets. Preflight checks for Microsoft Azure Synapse Analytics : Verify prerequisites before setting up the Microsoft Azure Synapse Analytics connector. Get started Guides References",
    "url": "https://docs.atlan.com/apps/connectors/data-warehouses/microsoft-azure-synapse-analytics",
    "scraped_at": "2025-09-15 19:54:58",
    "content_length": 1144,
    "topic": "API_SDK"
  },
  {
    "title": "Catalog - Developer",
    "content": "Catalog ¶ Base class for catalog assets. Catalog assets include any asset that can participate in lineage. Complete reference This is a complete reference for the Catalog object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. Catalog inherits its attributes and relationships from these other types: classDiagram direction RL class Catalog { <<abstract>> } link Catalog \"../catalog\" class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from Catalog 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) Relationships ¶ Inherited relationships These relationships are inherited from Catalog 's supertypes: anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos These relationships are specific to instances of Catalog (and all of its subtypes). inputToAirflowTasks ( AirflowTask ) ¶ Tasks to which this asset provides input. inputToProcesses ( Process ) ¶ Processes to which this asset provides input. inputToSparkJobs ( SparkJob ) ¶ TBC modelImplementedAttributes ( ModelAttribute ) ¶ Attributes implemented by this asset. modelImplementedEntities ( ModelEntity ) ¶ Entities implemented by this asset. outputFromAirflowTasks ( AirflowTask ) ¶ Tasks from which this asset is output. outputFromProcesses ( Process ) ¶ Processes from which this asset is produced as output. outputFromSparkJobs ( SparkJob ) ¶ TBC Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/catalog/",
    "scraped_at": "2025-09-15 19:54:59",
    "content_length": 18697,
    "topic": "SSO"
  },
  {
    "title": "Airflow - Developer",
    "content": "Apache Airflow model ¶ Base class for Apache Airflow assets. Reference documentation This is reference documentation covering the entire Atlan model. It is not the best place to start when trying to understand developing with Atlan. For that, we would suggest starting with either: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. classDiagram direction RL class Airflow { <<abstract>> } link Airflow \"../airflow\" class Catalog { <<abstract>> } link Catalog \"../entities/catalog\" Catalog <|-- Airflow : extends class Asset { <<abstract>> } link Asset \"../entities/asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../entities/referenceable\" Referenceable <|-- Asset : extends class AirflowDag link AirflowDag \"../entities/airflowdag\" Airflow <|-- AirflowDag : extends class AirflowTask link AirflowTask \"../entities/airflowtask\" Airflow <|-- AirflowTask : extends Properties ¶ These attributes are specific to instances of Airflow (and all of its subtypes). airflowRunEndTime ¶ End time of the run. airflowRunName ¶ Name of the run. airflowRunOpenLineageState ¶ State of the run in OpenLineage. airflowRunOpenLineageVersion ¶ Version of the run in OpenLineage. airflowRunStartTime ¶ Start time of the run. airflowRunType ¶ Type of the run. airflowRunVersion ¶ Version of the run in Airflow. airflowTags ¶ Tags assigned to the asset in Airflow. Relationships ¶ The following illustrates how the various S3 objects inter-relate with each other: erDiagram Connection ||..o{ AirflowDag : \"\" AirflowDag ||--o{ AirflowTask : airflowTasks Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/airflow/",
    "scraped_at": "2025-09-15 19:55:01",
    "content_length": 1832,
    "topic": "API_SDK"
  },
  {
    "title": "Anomalo - Developer",
    "content": "Anomalo model ¶ Reference documentation This is reference documentation covering the entire Atlan model. It is not the best place to start when trying to understand how to manage Anomalo assets. These model elements all deal with Anomalo constructs. classDiagram direction RL class Anomalo { <<abstract>> } class DataQuality { <<abstract>> } link DataQuality \"../entities/dataquality\" DataQuality <|-- Anomalo : extends class Catalog { <<abstract>> } link Catalog \"../entities/catalog\" Catalog <|-- DataQuality : extends class Asset { <<abstract>> } link Asset \"../entities/asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../entities/referenceable\" Referenceable <|-- Asset : extends class AnomaloCheck link AnomaloCheck \"../entities/anomalocheck\" Anomalo <|-- AnomaloCheck : extends Relationships ¶ The following illustrates how the various Anomalo objects inter-relate with each other: erDiagram Connection ||..o{ Asset : \"\" Asset ||--o{ AnomaloCheck : anomaloCheckAsset Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/anomalo/",
    "scraped_at": "2025-09-15 19:55:02",
    "content_length": 1194,
    "topic": "API_SDK"
  },
  {
    "title": "APIField - Developer",
    "content": "APIField ¶ Instances of APIField in Atlan. Complete reference This is a complete reference for the APIField object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. APIField inherits its attributes and relationships from these other types: classDiagram direction RL class APIField link APIField \"../apifield\" class API { <<abstract>> } link API \"../api\" API <|-- APIField : extends class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- API : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from APIField 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) apiExternalDocs ¶ External documentation of the API. apiIsAuthOptional ¶ Whether authentication is optional (true) or required (false). apiIsObjectReference ¶ If this asset refers to an APIObject apiObjectQualifiedName ¶ Qualified name of the APIObject that is referred to by this asset. When apiIsObjectReference is true. apiSpecName ¶ Simple name of the API spec, if this asset is contained in an API spec. apiSpecQualifiedName ¶ Unique name of the API spec, if this asset is contained in an API spec. apiSpecType ¶ Type of API, for example: OpenAPI, GraphQL, etc. apiSpecVersion ¶ Version of the API specification. These attributes are specific to instances of APIField (and all of its subtypes). apiFieldType ¶ Type of APIField. E.g. STRING, NUMBER etc. It is free text. apiFieldTypeSecondary ¶ Secondary Type of APIField. E.g. LIST/STRING, then LIST would be the secondary type. apiQueryParamType ¶ If parent relationship type is APIQuery, then this attribute denotes if this is input or output parameter. Relationships ¶ Inherited relationships These relationships are inherited from APIField 's supertypes: anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos inputToAirflowTasks ( AirflowTask ) ¶ Tasks to which this asset provides input. inputToProcesses ( Process ) ¶ Processes to which this asset provides input. inputToSparkJobs ( SparkJob ) ¶ TBC modelImplementedAttributes ( ModelAttribute ) ¶ Attributes implemented by this asset. modelImplementedEntities ( ModelEntity ) ¶ Entities implemented by this asset. outputFromAirflowTasks ( AirflowTask ) ¶ Tasks from which this asset is output. outputFromProcesses ( Process ) ¶ Processes from which this asset is produced as output. outputFromSparkJobs ( SparkJob ) ¶ TBC These relationships are specific to instances of APIField (and all of its subtypes). apiObject ( APIObject ) ¶ APIObject asset containing this APIField. apiQuery ( APIQuery ) ¶ APIQuery asset containing this APIField. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/apifield/",
    "scraped_at": "2025-09-15 19:55:04",
    "content_length": 19925,
    "topic": "SSO"
  },
  {
    "title": "DataStudioAsset - Developer",
    "content": "DataStudioAsset ¶ Instance of a Google Data Studio asset in Atlan. Complete reference This is a complete reference for the DataStudioAsset object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. DataStudioAsset inherits its attributes and relationships from these other types: classDiagram direction RL class DataStudioAsset link DataStudioAsset \"../datastudioasset\" class DataStudio { <<abstract>> } link DataStudio \"../datastudio\" DataStudio <|-- DataStudioAsset : extends class Google { <<abstract>> } link Google \"../google\" Google <|-- DataStudio : extends class Cloud { <<abstract>> } link Cloud \"../cloud\" Cloud <|-- Google : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Cloud : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends class BI { <<abstract>> } link BI \"../bi\" BI <|-- DataStudio : extends class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- BI : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends class Google { <<abstract>> } link Google \"../google\" Google <|-- DataStudioAsset : extends class Cloud { <<abstract>> } link Cloud \"../cloud\" Cloud <|-- Google : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Cloud : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from DataStudioAsset 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) googleLabels ¶ List of labels that have been applied to the asset in Google. googleLocation ¶ Location of this asset in Google. googleLocationType ¶ Type of location of this asset in Google. googleProjectId ¶ ID of the project in which the asset exists. googleProjectName ¶ Name of the project in which the asset exists. googleProjectNumber ¶ Number of the project in which the asset exists. googleService ¶ Service in Google in which the asset exists. googleTags ¶ List of tags that have been applied to the asset in Google. These attributes are specific to instances of DataStudioAsset (and all of its subtypes). dataStudioAssetOwner ¶ Owner of the asset, from Google Data Studio. dataStudioAssetTitle ¶ Title of the Google Data Studio asset. dataStudioAssetType ¶ Type of the Google Data Studio asset, for example: REPORT or DATA_SOURCE. isTrashedDataStudioAsset ¶ Whether the Google Data Studio asset has been trashed (true) or not (false). Relationships ¶ Inherited relationships These relationships are inherited from DataStudioAsset 's supertypes: inputToAirflowTasks ( AirflowTask ) ¶ Tasks to which this asset provides input. inputToProcesses ( Process ) ¶ Processes to which this asset provides input. inputToSparkJobs ( SparkJob ) ¶ TBC modelImplementedAttributes ( ModelAttribute ) ¶ Attributes implemented by this asset. modelImplementedEntities ( ModelEntity ) ¶ Entities implemented by this asset. outputFromAirflowTasks ( AirflowTask ) ¶ Tasks from which this asset is output. outputFromProcesses ( Process ) ¶ Processes from which this asset is produced as output. outputFromSparkJobs ( SparkJob ) ¶ TBC anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/datastudioasset/",
    "scraped_at": "2025-09-15 19:55:05",
    "content_length": 20532,
    "topic": "SSO"
  },
  {
    "title": "AtlasGlossaryTerm - Developer",
    "content": "AtlasGlossaryTerm ¶ Instance of a term in Atlan. Terms define concepts in natural language that can be associated with other assets to provide meaning. Complete reference This is a complete reference for the AtlasGlossaryTerm object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. AtlasGlossaryTerm inherits its attributes and relationships from these other types: classDiagram direction RL class AtlasGlossaryTerm link AtlasGlossaryTerm \"../atlasglossaryterm\" class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- AtlasGlossaryTerm : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from AtlasGlossaryTerm 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) These attributes are specific to instances of AtlasGlossaryTerm (and all of its subtypes). abbreviation ¶ TBC additionalAttributes ¶ TBC examples ¶ TBC longDescription ¶ TBC shortDescription ¶ TBC termType ¶ TBC usage ¶ TBC Relationships ¶ Inherited relationships These relationships are inherited from AtlasGlossaryTerm 's supertypes: anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos These relationships are specific to instances of AtlasGlossaryTerm (and all of its subtypes). anchor ( AtlasGlossary ) ¶ TBC antonyms ( AtlasGlossaryTerm ) ¶ TBC assignedEntities ( Referenceable ) ¶ TBC categories ( AtlasGlossaryCategory ) ¶ TBC classifies ( AtlasGlossaryTerm ) ¶ TBC isA ( AtlasGlossaryTerm ) ¶ TBC preferredTerms ( AtlasGlossaryTerm ) ¶ TBC preferredToTerms ( AtlasGlossaryTerm ) ¶ TBC replacedBy ( AtlasGlossaryTerm ) ¶ TBC replacementTerms ( AtlasGlossaryTerm ) ¶ TBC seeAlso ( AtlasGlossaryTerm ) ¶ TBC synonyms ( AtlasGlossaryTerm ) ¶ TBC translatedTerms ( AtlasGlossaryTerm ) ¶ TBC translationTerms ( AtlasGlossaryTerm ) ¶ TBC validValues ( AtlasGlossaryTerm ) ¶ TBC validValuesFor ( AtlasGlossaryTerm ) ¶ TBC Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/atlasglossaryterm/",
    "scraped_at": "2025-09-15 19:55:07",
    "content_length": 19113,
    "topic": "SSO"
  },
  {
    "title": "Manage Insights assets - Developer",
    "content": "Manage Insights assets (Collection, Folder, Query) ¶ In general, these should be: Created in top-down order (collection, folder, query) Deleted in bottom-up order (query, folder, collection) 1 erDiagram Collection ||--o{ Folder : contains Folder ||--o{ Query : contains Collection ¶ 3.1.2 4.0.0 To create a Collection : Java Python Kotlin Raw REST API Create a collection 1 2 3 4 AtlanCollection collection = AtlanCollection . creator ( client , \"MyCollection\" ) . adminGroup ( \"admins\" ) . build (); // (1) AssetMutationResponse response = collection . save ( client ); // (2) Build the minimum request to create a collection. provide an instance of AtlanClient . specify a human-readable name for your collection. (optional) specify the name of the group that can administer this collection. You can use also use adminUsers , viewerUsers , ownerUsers , etc to manage different levels of access control for the collection. Actually call Atlan to create the collection. Because this operation will persist the asset in Atlan, you must provide it an AtlanClient through which to connect to the tenant. Create a collection 1 2 3 4 5 6 7 8 from pyatlan.client.atlan import AtlanClient from pyatlan.model.assets import Collection client = AtlanClient () collection = Collection . creator ( client = client , name = \"my-collection\" ) # (1) collection . admin_groups = [ \"admins\" ] # (2) response = client . asset . save ( collection ) # (3) Build the minimum request to create a collection provide an instance of AtlanClient . specify a human-readable name for your collection. (optional) Specify the name of the group that can administer this collection. You can use also use adminUsers , viewerUsers , ownerUsers , etc to manage different levels of access control for the collection. Actually call Atlan to create the collection. Create a collection 1 2 3 4 val collection = AtlanCollection . creator ( client , \"MyCollection\" ) . adminGroup ( \"admins\" ) . build () // (1) val response = collection . save ( client ) // (2) Build the minimum request to create a collection. provide an instance of AtlanClient . specify a human-readable name for your collection. (optional) specify the name of the group that can administer this collection. You can use also use adminUsers , viewerUsers , ownerUsers , etc to manage different levels of access control for the collection. Actually call Atlan to create the collection. Because this operation will persist the asset in Atlan, you must provide it an AtlanClient through which to connect to the tenant. POST /api/meta/entity/bulk 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { \"entities\" : [ { \"typeName\" : \"Collection\" , \"attributes\" : { \"qualifiedName\" : \"default/collection/service-account-apikey-9468b3e4-d30d-98ba-87d2-f080841a99ef/a08e5dcb-38bd-47d2-b2ea-e439cd0bbe22\" , // (1) \"name\" : \"MyCollection\" , // (2) \"adminGroups\" : [ // (3) \"admins\" ] } } ] } When creating a collection through API tokens, make sure your qualified name follows this convention: default/collection/<api-token-username-here>/<some-uuid4-string> . Specify a human-readable name for your collection. (optional) Specify the name of the group that can administer this collection. You can use also use adminUsers , viewerUsers , ownerUsers , etc to manage different levels of access control for the collection. Folder ¶ 3.1.2 4.0.0 To create a Folder : Java Python Kotlin Raw REST API Create a folder 5 6 Folder folder = Folder . creator ( \"MyFolder\" , collection ). build (); // (1) AssetMutationResponse response = folder . save ( client ); // (2) Build the minimum request to create a folder. specify a human-readable name for your folder. provide an instance of Collection , or if you want to create a sub-folder, provide an instance of Folder . Actually call Atlan to create the folder. Because this operation will persist the asset in Atlan, you must provide it an AtlanClient through which to connect to the tenant. Create a folder 9 10 11 12 13 14 15 16 17 18 19 from pyatlan.client.atlan import AtlanClient from pyatlan.model.assets import Folder client = AtlanClient () folder = Folder . creator ( name = \"my-folder\" , collection_qualified_name = \"default/collection/user/abcdxyz\" , ) # (1) response = client . asset . save ( folder ) # (2) Build the minimum request to create a folder. specify a human-readable name for your folder. provide the qualifiedName of the Collection , or if you want to create a sub-folder, provide the parent_folder_qualified_name . Actually call Atlan to create the folder. Create a folder 5 6 val folder = Folder . creator ( \"MyFolder\" , collection ). build () // (1) val response = folder . save ( client ) // (2) Build the minimum request to create a folder. specify a human-readable name for your folder. provide an instance of Collection , or if you want to create a sub-folder, provide an instance of Folder . Actually call Atlan to create the folder. Because this operation will persist the asset in Atlan, you must provide it an AtlanClient through which to connect to the tenant. POST /api/meta/entity/bulk 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 { \"entities\" : [ { \"typeName\" : \"Folder\" , \"attributes\" : { \"qualifiedName\" : \"default/collection/service-account-apikey-d468b3e4-d30d-48ba-87d2-f080841a59ef/5zNMTC3MUzvfTS4L5QuRi/MyFolder\" , // (1) \"name\" : \"MyFolder\" , // (2) \"parentQualifiedName\" : \"default/collection/service-account-apikey-d468b3e4-d30d-48ba-87d2-f080841a59ef/5zNMTC3MUzvfTS4L5QuRi\" , // (3) \"collectionQualifiedName\" : \"default/collection/service-account-apikey-d468b3e4-d30d-48ba-87d2-f080841a59ef/5zNMTC3MUzvfTS4L5QuRi\" , // (4) \"parent\" : { \"typeName\" : \"Collection\" , // (5) \"uniqueAttributes\" : { \"qualifiedName\" : \"default/collection/service-account-apikey-d468b3e4-d30d-48ba-87d2-f080841a59ef/5zNMTC3MUzvfTS4L5QuRi\" } } } } ] } When creating a folder through API tokens, make sure your qualified name follows this convention: <parent-qualified-name>/<folder-name> . Specify a human-readable name for your folder. In this example, we're creating a folder inside an existing collection; therefore, we specify the qualifiedName of the collection here. If you're creating a sub-folder, you should provide the qualifiedName of the parent Folder . Specify the qualifiedName of the collection. In this example, we're creating a folder inside an existing collection; therefore, we specify the qualifiedName of the collection here. If you're creating a sub-folder, you should provide the qualifiedName of the parent Folder . Query ¶ 3.1.2 4.0.0 To create a Query : Java Python Kotlin Raw REST API Create a query 7 8 9 10 11 String schemaQualifiedName = \"default/snowflake/1735591234/DB/SCHEMA\" ; AtlanQuery query = AtlanQuery . creator ( \"MyQuery\" , folder ) // (1) . withRawQuery ( schemaQualifiedName , \"SELECT * FROM CUSTOMERS;\" ) // (2) . build (); AssetMutationResponse response = query . save ( client ); // (3) Build the minimum request to create a query. specify a human-readable name for your query. provide an instance of Folder , or if you want to create a query inside a collectin, provide an instance of Collection . In this example, we're creating a query for an existing Snowflake schema. Actually call Atlan to create the folder. Because this operation will persist the asset in Atlan, you must provide it an AtlanClient through which to connect to the tenant. Create a query 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from pyatlan.client.atlan import AtlanClient from pyatlan.model.assets import Query client = AtlanClient () schema_qualified_name = \"default/snowflake/1735591234/DB/SCHEMA\" query = Query . creator ( name = \"my-query\" , parent_folder_qualified_name = \"default/collection/user/abc/folder/user/xyz\" ) # (1) query . with_raw_query ( schema_qualified_name = schema_qualified_name , query = \"SELECT * FROM CUSTOMERS;\" ) # (2) response = client . asset . save ( query ) # (3) Build the minimum request to create a query. specify a human-readable name for your query. provide the qualifedName of the Folder , or if you want to create a query inside a collection, provide the collection_qualified_name . In this example, we're creating a query for an existing Snowflake schema. Actually call Atlan to create the folder. Create a query 7 8 9 10 11 val schemaQualifiedName = \"default/snowflake/1735591234/DB/SCHEMA\" val query = AtlanQuery . creator ( \"MyQuery\" , folder ) // (1) . withRawQuery ( schemaQualifiedName , \"SELECT * FROM CUSTOMERS;\" ) // (2) . build () val response = query . save ( client ) // (3) Build the minimum request to create a query. specify a human-readable name for your query. provide an instance of Folder , or if you want to create a query inside a collectin, provide an instance of Collection . In this example, we're creating a query for an existing Snowflake schema. Actually call Atlan to create the folder. Because this operation will persist the asset in Atlan, you must provide it an AtlanClient through which to connect to the tenant. POST /api/meta/entity/bulk 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 { \"entities\" : [ { \"typeName\" : \"Query\" , \"attributes\" : { \"qualifiedName\" : \"default/collection/service-account-apikey-d468b3e4-d30d-48ba-87d2-f080841a59ef/5zNMTC3MUzvfTS4L5QuRi/folder/service-account-apikey-d468b3e4-d30d-48ba-87d2-f080841a59ef/V2ddMTTMJItUy1aV6biSh/MyQuery\" , // (1) \"name\" : \"MyQuery\" , // (2) \"connectionName\" : \"snowflake\" , // (3) \"connectionQualifiedName\" : \"default/snowflake/1735591234\" , // (4) \"rawQueryText\" : \"SELECT * FROM CUSTOMERS;\" , // (5) \"defaultSchemaQualifiedName\" : \"default/snowflake/1735591234/DB/SCHEMA\" , // (6) \"defaultDatabaseQualifiedName\" : \"default/snowflake/1735591234/DB\" , // (7) \"variablesSchemaBase64\" : \"eyJjdXN0b212YXJpYWJsZXNEYXRlVGltZUZvcm1hdCI6IHsiZGVmYXVsdERhdGVGb3JtYXQiOiAiWVlZWS1NTS1ERCIsICJkZWZhdWx0VGltZUZvcm1hdCI6ICJISDptbSJ9LCAiY3VzdG9tVmFyaWFibGVzIjogW119\" , \"parentQualifiedName\" : \"default/collection/service-account-apikey-d468b3e4-d30d-48ba-87d2-f080841a59ef/5zNMTC3MUzvfTS4L5QuRi/folder/service-account-apikey-d468b3e4-d30d-48ba-87d2-f080841a59ef/V2ddMTTMJItUy1aV6biSh\" , // (8) \"collectionQualifiedName\" : \"default/collection/service-account-apikey-d468b3e4-d30d-48ba-87d2-f080841a59ef/5zNMTC3MUzvfTS4L5QuRi\" , // (9) \"isVisualQuery\" : false , // (10) \"parent\" : { \"typeName\" : \"Folder\" , // (11) \"uniqueAttributes\" : { \"qualifiedName\" : \"default/collection/service-account-apikey-d468b3e4-d30d-48ba-87d2-f080841a59ef/5zNMTC3MUzvfTS4L5QuRi/folder/service-account-apikey-d468b3e4-d30d-48ba-87d2-f080841a59ef/V2ddMTTMJItUy1aV6biSh\" } } } } ] } When creating a query through API tokens, ensure that your qualifiedName follows this convention: <parent-qualified-name>/<query-name> . Specify a human-readable name for your query. Since we're creating a query for a Snowflake schema. Provide the qualifiedName of the Snowflake connection. Specify the raw SQL query. Provide the qualifiedName of the Snowflake schema. Provide the qualifiedName of the Snowflake database. In this example, we're creating a folder inside an existing collection; therefore, we specify the qualifiedName of the collection here. If you're creating a sub-folder, you should provide the qualifiedName of the parent folder. Specify the qualifiedName of the collection. Since this is a non-visual query, ensure it is appropriately marked as such. In this example, we're creating a query inside an existing folder; therefore, we specify the qualifiedName of the folder here. If you're creating a query inside a collection, you should provide the qualifiedName of the collection. Although if you want to delete everything in a connection, your better avenue is the packaged connection delete utility in the UI. ↩ Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/patterns/create/insight/",
    "scraped_at": "2025-09-15 19:55:10",
    "content_length": 11905,
    "topic": "API_SDK"
  },
  {
    "title": "Azure Data Factory - Developer",
    "content": "Azure Data Factory model ¶ Reference documentation This is reference documentation covering the entire Atlan model. It is not the best place to start when trying to understand how to manage Azure Data Factory assets in Atlan. These model elements all deal with Azure Data Factory constructs. classDiagram direction RL class ADF { <<abstract>> } class Catalog { <<abstract>> } link Catalog \"../entities/catalog\" Catalog <|-- ADF : extends class Asset { <<abstract>> } link Asset \"../entities/asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../entities/referenceable\" Referenceable <|-- Asset : extends class AdfActivity link AdfActivity \"../entities/adfactivity\" ADF <|-- AdfActivity : extends class AdfDataflow link AdfDataflow \"../entities/adfdataflow\" ADF <|-- AdfDataflow : extends class AdfDataset link AdfDataset \"../entities/adfdataset\" ADF <|-- AdfDataset : extends class AdfLinkedservice link AdfLinkedservice \"../entities/adflinkedservice\" ADF <|-- AdfLinkedservice : extends class AdfPipeline link AdfPipeline \"../entities/adfpipeline\" ADF <|-- AdfPipeline : extends Properties ¶ These attributes are unique to instances of ADF (and all of its subtypes). adfAssetFolderPath ¶ Defines the folder path in which this ADF asset exists. adfFactoryName ¶ Defines the name of the factory in which this asset exists. Relationships ¶ The following illustrates how the various Azure Data Factory objects inter-relate with each other: erDiagram Connection ||..o{ AdfPipeline : \"\" AdfPipeline ||--o{ AdfActivity : \"adfActivities\" AdfPipeline }o--o{ AdfDataflow : \"adfDataflows\" AdfPipeline }o--o{ AdfDataset : \"adfDatasets\" AdfPipeline }o--o{ AdfLinkedservice : \"adfLinkedservices\" AdfDataflow ||--o{ AdfActivity : \"adfActivities\" AdfDataflow }o--o{ AdfDataset : \"adfDatasets\" AdfDataflow }o--o{ AdfLinkedservice : \"adfLinkedservices\" AdfLinkedservice }o--o{ AdfActivity : \"adfActivities\" AdfLinkedservice ||--o{ AdfDataset : \"adfDatasets\" AdfActivity }o--o{ AdfDataset : \"adfDatasets\" Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/adf/",
    "scraped_at": "2025-09-15 19:55:12",
    "content_length": 2205,
    "topic": "API_SDK"
  },
  {
    "title": "SalesforceOrganization - Developer",
    "content": "SalesforceOrganization ¶ Instance of a Salesforce organization in Atlan. Complete reference This is a complete reference for the SalesforceOrganization object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. SalesforceOrganization inherits its attributes and relationships from these other types: classDiagram direction RL class SalesforceOrganization link SalesforceOrganization \"../salesforceorganization\" class Salesforce { <<abstract>> } link Salesforce \"../salesforce\" Salesforce <|-- SalesforceOrganization : extends class SaaS { <<abstract>> } link SaaS \"../saas\" SaaS <|-- Salesforce : extends class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- SaaS : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from SalesforceOrganization 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) apiName ¶ Name of this asset in the Salesforce API. organizationQualifiedName ¶ Fully-qualified name of the organization in Salesforce. These attributes are specific to instances of SalesforceOrganization (and all of its subtypes). sourceId ¶ Identifier of the organization in Salesforce. Relationships ¶ Inherited relationships These relationships are inherited from SalesforceOrganization 's supertypes: anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos inputToAirflowTasks ( AirflowTask ) ¶ Tasks to which this asset provides input. inputToProcesses ( Process ) ¶ Processes to which this asset provides input. inputToSparkJobs ( SparkJob ) ¶ TBC modelImplementedAttributes ( ModelAttribute ) ¶ Attributes implemented by this asset. modelImplementedEntities ( ModelEntity ) ¶ Entities implemented by this asset. outputFromAirflowTasks ( AirflowTask ) ¶ Tasks from which this asset is output. outputFromProcesses ( Process ) ¶ Processes from which this asset is produced as output. outputFromSparkJobs ( SparkJob ) ¶ TBC These relationships are specific to instances of SalesforceOrganization (and all of its subtypes). dashboards ( SalesforceDashboard ) ¶ Dashboards that exist within this organization. objects ( SalesforceObject ) ¶ Objects that exist within this organization. reports ( SalesforceReport ) ¶ Reports that exist within this organization. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/salesforceorganization/",
    "scraped_at": "2025-09-15 19:55:13",
    "content_length": 19571,
    "topic": "SSO"
  },
  {
    "title": "ENTITY_UPDATE - Developer",
    "content": "ENTITY_UPDATE event type ¶ ENTITY_UPDATE events are emitted whenever an asset is changed in Atlan. This includes: Changes to any of the asset's attributes (like description, owner, certificate, announcement, and so on) Changes to any of the asset's relationships (like the addition or removal of a term) One ENTITY_UPDATE event is emitted for each asset that is updated So, for example, if you remove a term from an asset Atlan will emit 2 ENTITY_UPDATE events: 1 for the asset that was changed (that the term was removed from) 1 for the term that was changed (since it is no longer attached to that asset) The details of the updated asset will be in the message.entity portion of the event payload. In addition, the event payload shows what specifically was changed in the message.mutatedDetails portion of the event payload. Example ENTITY_UPDATE event{ \"source\" : {}, \"version\" : { \"version\" : \"1.0.0\" , \"versionParts\" : [ 1 ] }, \"msgCompressionKind\" : \"NONE\" , \"msgSplitIdx\" : 1 , \"msgSplitCount\" : 1 , \"msgSourceIP\" : \"10.110.55.19\" , \"msgCreatedBy\" : \"\" , \"msgCreationTime\" : 1655265623268 , \"spooled\" : false , \"message\" : { \"type\" : \"ENTITY_NOTIFICATION_V2\" , \"entity\" : { \"typeName\" : \"Table\" , \"attributes\" : { \"popularityScore\" : 1.17549435e-38 , \"lastSyncWorkflowName\" : \"suman1-crawler\" , \"lastSyncRunAt\" : 1653533865845 , \"certificateStatus\" : \"VERIFIED\" , \"databaseName\" : \"demo_db\" , \"connectionQualifiedName\" : \"default/postgres/1653533778\" , \"queryCount\" : 0 , \"isTemporary\" : false , \"lastSyncRun\" : \"atlan-postgres-default-postgres-1653533778-xhtgk\" , \"isPartitioned\" : false , \"schemaName\" : \"demo\" , \"adminUsers\" : [], \"partitionCount\" : 0 , \"queryUserCount\" : 0 , \"ownerGroups\" : [], \"isEditable\" : true , \"sourceUpdatedAt\" : 0 , \"certificateUpdatedBy\" : \"suman\" , \"announcementUpdatedAt\" : 0 , \"isDiscoverable\" : true , \"isQueryPreview\" : true , \"rowCount\" : 1318656 , \"schemaQualifiedName\" : \"default/postgres/1653533778/demo_db/demo\" , \"sourceCreatedAt\" : 0 , \"viewerUsers\" : [], \"userDescription\" : \"Short description\" , \"adminRoles\" : [], \"adminGroups\" : [], \"qualifiedName\" : \"default/postgres/1653533778/demo_db/demo/dqtest73\" , \"databaseQualifiedName\" : \"default/postgres/1653533778/demo_db\" , \"columnCount\" : 7 , \"sizeBytes\" : 0 , \"name\" : \"dqtest73\" , \"certificateUpdatedAt\" : 1655265622993 , \"connectorName\" : \"postgres\" , \"viewerGroups\" : [], \"ownerUsers\" : [ \"anshul.mehta\" , \"suman\" ] }, \"guid\" : \"2eb68562-3849-4861-8f4c-527a02da4e27\" , \"displayText\" : \"dqtest73\" , \"classificationNames\" : [ \"Zz3SHQcKFJGVb4ZCaqtZoX\" , \"gxTVzFBOOkNfiCOBYUHgWw\" , \"Zz3SHQcKFJGVb4ZCaqtZoX\" , \"Zz3SHQcKFJGVb4ZCaqtZoX\" , \"gxTVzFBOOkNfiCOBYUHgWw\" , \"gxTVzFBOOkNfiCOBYUHgWw\" , \"gxTVzFBOOkNfiCOBYUHgWw\" ], \"classifications\" : [ { \"typeName\" : \"Zz3SHQcKFJGVb4ZCaqtZoX\" , \"entityGuid\" : \"2eb68562-3849-4861-8f4c-527a02da4e27\" , \"entityStatus\" : \"ACTIVE\" , \"propagate\" : true , \"removePropagationsOnEntityDelete\" : true }, { \"typeName\" : \"gxTVzFBOOkNfiCOBYUHgWw\" , \"entityGuid\" : \"2eb68562-3849-4861-8f4c-527a02da4e27\" , \"entityStatus\" : \"ACTIVE\" , \"propagate\" : false , \"removePropagationsOnEntityDelete\" : true }, { \"typeName\" : \"Zz3SHQcKFJGVb4ZCaqtZoX\" , \"entityGuid\" : \"2eb68562-3849-4861-8f4c-527a02da4e27\" , \"entityStatus\" : \"ACTIVE\" , \"propagate\" : true , \"removePropagationsOnEntityDelete\" : true }, { \"typeName\" : \"Zz3SHQcKFJGVb4ZCaqtZoX\" , \"entityGuid\" : \"2eb68562-3849-4861-8f4c-527a02da4e27\" , \"entityStatus\" : \"ACTIVE\" , \"propagate\" : true , \"removePropagationsOnEntityDelete\" : true }, { \"typeName\" : \"gxTVzFBOOkNfiCOBYUHgWw\" , \"entityGuid\" : \"2eb68562-3849-4861-8f4c-527a02da4e27\" , \"entityStatus\" : \"ACTIVE\" , \"propagate\" : true , \"removePropagationsOnEntityDelete\" : true }, { \"typeName\" : \"gxTVzFBOOkNfiCOBYUHgWw\" , \"entityGuid\" : \"2eb68562-3849-4861-8f4c-527a02da4e27\" , \"entityStatus\" : \"ACTIVE\" , \"propagate\" : true , \"removePropagationsOnEntityDelete\" : true }, { \"typeName\" : \"gxTVzFBOOkNfiCOBYUHgWw\" , \"entityGuid\" : \"2eb68562-3849-4861-8f4c-527a02da4e27\" , \"entityStatus\" : \"ACTIVE\" , \"propagate\" : false , \"removePropagationsOnEntityDelete\" : true } ], \"isIncomplete\" : false , \"createdBy\" : \"suman\" , \"updatedBy\" : \"suman\" , \"createTime\" : 1653533980608 , \"updateTime\" : 1655265622993 }, \"operationType\" : \"ENTITY_UPDATE\" , \"eventTime\" : 1655265622993 , \"mutatedDetails\" : { \"typeName\" : \"Table\" , \"attributes\" : { \"certificateStatus\" : \"VERIFIED\" , \"userDescription\" : \"Short description\" , \"tenantId\" : \"default\" , \"ownerUsers\" : [ \"anshul.mehta\" , \"suman\" ] }, \"guid\" : \"2eb68562-3849-4861-8f4c-527a02da4e27\" , \"isIncomplete\" : false , \"provenanceType\" : 0 , \"updatedBy\" : \"suman\" , \"updateTime\" : 1655265622993 , \"version\" : 0 , \"relationshipAttributes\" : { \"meanings\" : [ { \"guid\" : \"012c5684-a526-4fe4-99c5-3fd65e31988e\" , \"typeName\" : \"AtlasGlossaryTerm\" }, { \"guid\" : \"bd2defdb-4d3f-48cc-9a7b-775354926245\" , \"typeName\" : \"AtlasGlossaryTerm\" }, { \"guid\" : \"cc1d0a01-6174-4d63-8f26-7aa41551ca89\" , \"typeName\" : \"AtlasGlossaryTerm\" } ] }, \"proxy\" : false } } } Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/events/types/entity_update/",
    "scraped_at": "2025-09-15 19:55:15",
    "content_length": 5746,
    "topic": "API_SDK"
  },
  {
    "title": "DomoDataset - Developer",
    "content": "DomoDataset ¶ Instance of a Domo Dataset in Atlan. Complete reference This is a complete reference for the DomoDataset object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. DomoDataset inherits its attributes and relationships from these other types: classDiagram direction RL class DomoDataset link DomoDataset \"../domodataset\" class Domo { <<abstract>> } link Domo \"../domo\" Domo <|-- DomoDataset : extends class BI { <<abstract>> } link BI \"../bi\" BI <|-- Domo : extends class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- BI : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from DomoDataset 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) domoId ¶ Id of the Domo dataset. domoOwnerId ¶ Id of the owner of the Domo dataset. These attributes are specific to instances of DomoDataset (and all of its subtypes). domoDatasetCardCount ¶ Number of cards linked to the Domo dataset. domoDatasetColumnCount ¶ Number of columns in the Domo dataset. domoDatasetLastRun ¶ An ISO-8601 representation of the time the DataSet was last run. domoDatasetRowCount ¶ Number of rows in the Domo dataset. Relationships ¶ Inherited relationships These relationships are inherited from DomoDataset 's supertypes: anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos inputToAirflowTasks ( AirflowTask ) ¶ Tasks to which this asset provides input. inputToProcesses ( Process ) ¶ Processes to which this asset provides input. inputToSparkJobs ( SparkJob ) ¶ TBC modelImplementedAttributes ( ModelAttribute ) ¶ Attributes implemented by this asset. modelImplementedEntities ( ModelEntity ) ¶ Entities implemented by this asset. outputFromAirflowTasks ( AirflowTask ) ¶ Tasks from which this asset is output. outputFromProcesses ( Process ) ¶ Processes from which this asset is produced as output. outputFromSparkJobs ( SparkJob ) ¶ TBC These relationships are specific to instances of DomoDataset (and all of its subtypes). domoCards ( DomoCard ) ¶ TBC domoDatasetColumns ( DomoDatasetColumn ) ¶ TBC Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/domodataset/",
    "scraped_at": "2025-09-15 19:55:16",
    "content_length": 19404,
    "topic": "SSO"
  },
  {
    "title": "MicroStrategyProject - Developer",
    "content": "MicroStrategyProject ¶ Instance of a MicroStrategy project in Atlan. Complete reference This is a complete reference for the MicroStrategyProject object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. MicroStrategyProject inherits its attributes and relationships from these other types: classDiagram direction RL class MicroStrategyProject link MicroStrategyProject \"../microstrategyproject\" class MicroStrategy { <<abstract>> } link MicroStrategy \"../microstrategy\" MicroStrategy <|-- MicroStrategyProject : extends class BI { <<abstract>> } link BI \"../bi\" BI <|-- MicroStrategy : extends class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- BI : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from MicroStrategyProject 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) microStrategyCertifiedAt ¶ Time (epoch) this asset was certified in MicroStrategy, in milliseconds. microStrategyCertifiedBy ¶ User who certified this asset, in MicroStrategy. microStrategyCubeNames ¶ Simple names of the cubes related to this asset. microStrategyCubeQualifiedNames ¶ Unique names of the cubes related to this asset. microStrategyIsCertified ¶ Whether the asset is certified in MicroStrategy (true) or not (false). microStrategyLocation ¶ Location of this asset in MicroStrategy. microStrategyProjectName ¶ Simple name of the project in which this asset exists. microStrategyProjectQualifiedName ¶ Unique name of the project in which this asset exists. microStrategyReportNames ¶ Simple names of the reports related to this asset. microStrategyReportQualifiedNames ¶ Unique names of the reports related to this asset. Relationships ¶ Inherited relationships These relationships are inherited from MicroStrategyProject 's supertypes: anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos inputToAirflowTasks ( AirflowTask ) ¶ Tasks to which this asset provides input. inputToProcesses ( Process ) ¶ Processes to which this asset provides input. inputToSparkJobs ( SparkJob ) ¶ TBC modelImplementedAttributes ( ModelAttribute ) ¶ Attributes implemented by this asset. modelImplementedEntities ( ModelEntity ) ¶ Entities implemented by this asset. outputFromAirflowTasks ( AirflowTask ) ¶ Tasks from which this asset is output. outputFromProcesses ( Process ) ¶ Processes from which this asset is produced as output. outputFromSparkJobs ( SparkJob ) ¶ TBC These relationships are specific to instances of MicroStrategyProject (and all of its subtypes). microStrategyAttributes ( MicroStrategyAttribute ) ¶ Attributes that exist within this project. microStrategyCubes ( MicroStrategyCube ) ¶ Cubes that exist within this project. microStrategyDocuments ( MicroStrategyDocument ) ¶ Documents that exist within this project. microStrategyDossiers ( MicroStrategyDossier ) ¶ Dossiers that exist within this project. microStrategyFacts ( MicroStrategyFact ) ¶ Facts that exist within this project. microStrategyMetrics ( MicroStrategyMetric ) ¶ Metrics that exist within this project. microStrategyReports ( MicroStrategyReport ) ¶ Reports that exist within this project. microStrategyVisualizations ( MicroStrategyVisualization ) ¶ Visualizations that exist within this project. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/microstrategyproject/",
    "scraped_at": "2025-09-15 19:55:18",
    "content_length": 20585,
    "topic": "SSO"
  },
  {
    "title": "AnaplanWorkspace - Developer",
    "content": "AnaplanWorkspace ¶ Instances of an AnaplanWorkspace in Atlan. Complete reference This is a complete reference for the AnaplanWorkspace object in Atlan, showing every possible property and relationship that can exist for these objects. For an introduction, you probably want to start with: Snippets — small, atomic examples of single-step use cases. Patterns — walkthroughs of common multi-step implementation patterns. AnaplanWorkspace inherits its attributes and relationships from these other types: classDiagram direction RL class AnaplanWorkspace link AnaplanWorkspace \"../anaplanworkspace\" class Anaplan { <<abstract>> } link Anaplan \"../anaplan\" Anaplan <|-- AnaplanWorkspace : extends class BI { <<abstract>> } link BI \"../bi\" BI <|-- Anaplan : extends class Catalog { <<abstract>> } link Catalog \"../catalog\" Catalog <|-- BI : extends class Asset { <<abstract>> } link Asset \"../asset\" Asset <|-- Catalog : extends class Referenceable { <<abstract>> } link Referenceable \"../referenceable\" Referenceable <|-- Asset : extends Properties ¶ Inherited properties These attributes are inherited from AnaplanWorkspace 's supertypes (shown above): typeName ¶ Type of this asset. guid ¶ Globally-unique identifier for this asset. classifications ¶ Tags assigned to the asset. (1) Uses a different name in SDKs atlanTags atlan_tags For more information, see the tag assets snippets. businessAttributes ¶ Map of custom metadata attributes and values defined on the asset. (1) Uses a different name in SDKs customMetadataSets custom_metadata For more information, see the change custom metadata snippets. status ¶ Status of the asset. (1) Treat as read-only You should not try to set status on an asset. Instead, see the asset CRUD snippets on deleting and restoring assets. createdBy ¶ User or account that created the asset. updatedBy ¶ User or account that last updated the asset. createTime ¶ Time (epoch) at which the asset was created, in milliseconds. updateTime ¶ Time (epoch) at which the asset was last updated, in milliseconds. deleteHandler ¶ Details on the handler used for deletion of the asset. (1) Treat as read-only You should not try to set deleteHandler on an asset. Instead, see the asset CRUD snippets on deleting assets. classificationNames ¶ Hashed-string names of the Atlan tags that exist on the asset. (1) Uses a different name in SDKs atlanTagNames atlan_tag_names Use classifications to make changes to tags. isIncomplete ¶ Unused. meaningNames ¶ Human-readable names of terms that have been linked to this asset. meanings ¶ Details of terms that have been linked to this asset. (1) Do not use These should not be used, as they can be inconsistent. Instead, see the link terms and assets snippets. pendingTasks ¶ Unique identifiers (GUIDs) for any background tasks that are yet to operate on this asset. qualifiedName ¶ Unique name for this asset. This is typically a concatenation of the asset's name onto its parent's qualifiedName. This must be unique across all assets of the same type. adminGroups ¶ List of groups who administer this asset. (This is only used for certain asset types.) adminRoles ¶ List of roles who administer this asset. (This is only used for Connection assets.) adminUsers ¶ List of users who administer this asset. (This is only used for certain asset types.) announcementMessage ¶ Detailed message to include in the announcement on this asset. announcementTitle ¶ Brief title for the announcement on this asset. Required when announcementType is specified. announcementType ¶ Type of announcement on this asset. announcementUpdatedAt ¶ Time (epoch) at which the announcement was last updated, in milliseconds. announcementUpdatedBy ¶ Name of the user who last updated the announcement. applicationFieldQualifiedName ¶ Qualified name of the ApplicationField that contains this asset. applicationQualifiedName ¶ Qualified name of the Application that contains this asset. assetAnomaloAppliedCheckTypes ¶ All associated Anomalo check types. assetAnomaloCheckCount ¶ Total number of checks present in Anomalo for this asset. assetAnomaloCheckStatuses ¶ Stringified JSON object containing status of all Anomalo checks associated to this asset. assetAnomaloDQStatus ¶ Status of data quality from Anomalo. assetAnomaloFailedCheckCount ¶ Total number of checks failed in Anomalo for this asset. assetAnomaloFailedCheckTypes ¶ All associated Anomalo failed check types. assetAnomaloLastCheckRunAt ¶ Time (epoch) at which the last check was run via Anomalo. assetAnomaloSourceUrl ¶ URL of the source in Anomalo. assetCoverImage ¶ TBC assetDbtAccountName ¶ Name of the account in which this asset exists in dbt. assetDbtAlias ¶ Alias of this asset in dbt. assetDbtEnvironmentDbtVersion ¶ Version of the environment in which this asset is materialized in dbt. assetDbtEnvironmentName ¶ Name of the environment in which this asset is materialized in dbt. assetDbtJobLastRun ¶ Time (epoch) at which the job that materialized this asset in dbt last ran, in milliseconds. assetDbtJobLastRunArtifactS3Path ¶ Path in S3 to the artifacts saved from the last run of the job that materialized this asset in dbt. assetDbtJobLastRunArtifactsSaved ¶ Whether artifacts were saved from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunCreatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last created, in milliseconds. assetDbtJobLastRunDequedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was dequeued, in milliseconds. assetDbtJobLastRunExecutedByThreadId ¶ Thread ID of the user who executed the last run of the job that materialized this asset in dbt. assetDbtJobLastRunGitBranch ¶ Branch in git from which the last run of the job that materialized this asset in dbt ran. assetDbtJobLastRunGitSha ¶ SHA hash in git for the last run of the job that materialized this asset in dbt. assetDbtJobLastRunHasDocsGenerated ¶ Whether docs were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunHasSourcesGenerated ¶ Whether sources were generated from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunNotificationsSent ¶ Whether notifications were sent from the last run of the job that materialized this asset in dbt (true) or not (false). assetDbtJobLastRunOwnerThreadId ¶ Thread ID of the owner of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunQueuedDuration ¶ Total duration the job that materialized this asset in dbt spent being queued. assetDbtJobLastRunQueuedDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt spend being queued. assetDbtJobLastRunRunDuration ¶ Run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunRunDurationHumanized ¶ Human-readable run duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunStartedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was started running, in milliseconds. assetDbtJobLastRunStatusMessage ¶ Status message of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDuration ¶ Total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunTotalDurationHumanized ¶ Human-readable total duration of the last run of the job that materialized this asset in dbt. assetDbtJobLastRunUpdatedAt ¶ Time (epoch) at which the job that materialized this asset in dbt was last updated, in milliseconds. assetDbtJobLastRunUrl ¶ URL of the last run of the job that materialized this asset in dbt. assetDbtJobName ¶ Name of the job that materialized this asset in dbt. assetDbtJobNextRun ¶ Time (epoch) when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobNextRunHumanized ¶ Human-readable time when the next run of the job that materializes this asset in dbt is scheduled. assetDbtJobSchedule ¶ Schedule of the job that materialized this asset in dbt. assetDbtJobScheduleCronHumanized ¶ Human-readable cron schedule of the job that materialized this asset in dbt. assetDbtJobStatus ¶ Status of the job that materialized this asset in dbt. assetDbtMeta ¶ Metadata for this asset in dbt, specifically everything under the 'meta' key in the dbt object. assetDbtPackageName ¶ Name of the package in which this asset exists in dbt. assetDbtProjectName ¶ Name of the project in which this asset exists in dbt. assetDbtSemanticLayerProxyUrl ¶ URL of the semantic layer proxy for this asset in dbt. assetDbtSourceFreshnessCriteria ¶ Freshness criteria for the source of this asset in dbt. assetDbtTags ¶ List of tags attached to this asset in dbt. assetDbtTestStatus ¶ All associated dbt test statuses. assetDbtUniqueId ¶ Unique identifier of this asset in dbt. assetDbtWorkflowLastUpdated ¶ Name of the DBT workflow in Atlan that last updated the asset. assetIcon ¶ Name of the icon to use for this asset. (Only applies to glossaries, currently.) assetMcAlertQualifiedNames ¶ List of unique Monte Carlo alert names attached to this asset. assetMcIncidentNames ¶ List of Monte Carlo incident names attached to this asset. assetMcIncidentPriorities ¶ List of Monte Carlo incident priorities associated with this asset. assetMcIncidentQualifiedNames ¶ List of unique Monte Carlo incident names attached to this asset. assetMcIncidentSeverities ¶ List of Monte Carlo incident severities associated with this asset. assetMcIncidentStates ¶ List of Monte Carlo incident states associated with this asset. assetMcIncidentSubTypes ¶ List of Monte Carlo incident sub-types associated with this asset. assetMcIncidentTypes ¶ List of Monte Carlo incident types associated with this asset. assetMcIsMonitored ¶ Tracks whether this asset is monitored by MC or not assetMcLastSyncRunAt ¶ Time (epoch) at which this asset was last synced from Monte Carlo. assetMcMonitorNames ¶ List of Monte Carlo monitor names attached to this asset. assetMcMonitorQualifiedNames ¶ List of unique Monte Carlo monitor names attached to this asset. assetMcMonitorScheduleTypes ¶ Schedules of all associated Monte Carlo monitors. assetMcMonitorStatuses ¶ Statuses of all associated Monte Carlo monitors. assetMcMonitorTypes ¶ Types of all associated Monte Carlo monitors. assetPoliciesCount ¶ Count of policies inside the asset assetPolicyGUIDs ¶ Array of policy ids governing this asset assetSodaCheckCount ¶ Number of checks done via Soda. assetSodaCheckStatuses ¶ All associated Soda check statuses. assetSodaDQStatus ¶ Status of data quality from Soda. assetSodaLastScanAt ¶ TBC assetSodaLastSyncRunAt ¶ TBC assetSodaSourceURL ¶ TBC assetTags ¶ List of tags attached to this asset. assetThemeHex ¶ Color (in hexadecimal RGB) to use to represent this asset. certificateStatus ¶ Status of this asset's certification. certificateStatusMessage ¶ Human-readable descriptive message used to provide further detail to certificateStatus. certificateUpdatedAt ¶ Time (epoch) at which the certification was last updated, in milliseconds. certificateUpdatedBy ¶ Name of the user who last updated the certification of this asset. connectionName ¶ Simple name of the connection through which this asset is accessible. connectionQualifiedName ¶ Unique name of the connection through which this asset is accessible. connectorName ¶ Type of the connector through which this asset is accessible. (1) Uses a different name in SDKs connectorType connector_type dbtQualifiedName ¶ Unique name of this asset in dbt. description ¶ Description of this asset, for example as crawled from a source. Fallback for display purposes, if userDescription is empty. displayName ¶ Human-readable name of this asset used for display purposes (in user interface). domainGUIDs ¶ Array of domain guids linked to this asset hasContract ¶ Whether this asset has contract (true) or not (false). __hasLineage ¶ Whether this asset has lineage (true) or not (false). (1) Uses a different name in SDKs hasLineage has_lineage isAIGenerated ¶ TBC isDiscoverable ¶ Whether this asset is discoverable through the UI (true) or not (false). isEditable ¶ Whether this asset can be edited in the UI (true) or not (false). isPartial ¶ TBC lastRowChangedAt ¶ Time (epoch) of the last operation that inserted, updated, or deleted rows, in milliseconds. lastSyncRun ¶ Name of the last run of the crawler that last synchronized this asset. lastSyncRunAt ¶ Time (epoch) at which this asset was last crawled, in milliseconds. lastSyncWorkflowName ¶ Name of the crawler that last synchronized this asset. lexicographicalSortOrder ¶ Custom order for sorting purpose, managed by client name ¶ Name of this asset. Fallback for display purposes, if displayName is empty. nonCompliantAssetPolicyGUIDs ¶ Array of policy ids non-compliant to this asset ownerGroups ¶ List of groups who own this asset. ownerUsers ¶ List of users who own this asset. popularityScore ¶ Popularity score for this asset. sampleDataUrl ¶ URL for sample data for this asset. sourceCostUnit ¶ The unit of measure for sourceTotalCost. sourceCreatedAt ¶ Time (epoch) at which this asset was created in the source system, in milliseconds. sourceCreatedBy ¶ Name of the user who created this asset, in the source system. sourceEmbedURL ¶ URL to create an embed for a resource (for example, an image of a dashboard) within Atlan. sourceLastReadAt ¶ Timestamp of most recent read operation. sourceOwners ¶ List of owners of this asset, in the source system. sourceQueryComputeCostRecordList ¶ List of most expensive warehouses with extra insights. (1) Uses a different name in SDKs sourceQueryComputeCostRecords source_query_compute_cost_records sourceQueryComputeCostList ¶ List of most expensive warehouse names. (1) Uses a different name in SDKs sourceQueryComputeCosts source_query_compute_costs sourceReadCount ¶ Total count of all read operations at source. sourceReadExpensiveQueryRecordList ¶ List of the most expensive queries that accessed this asset. (1) Uses a different name in SDKs sourceReadExpensiveQueryRecords source_read_expensive_query_records sourceReadPopularQueryRecordList ¶ List of the most popular queries that accessed this asset. (1) Uses a different name in SDKs sourceReadPopularQueryRecords source_read_popular_query_records sourceReadQueryCost ¶ Total cost of read queries at source. sourceReadRecentUserRecordList ¶ List of usernames with extra insights for the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUserRecords source_read_recent_user_records sourceReadRecentUserList ¶ List of usernames of the most recent users who read this asset. (1) Uses a different name in SDKs sourceReadRecentUsers source_read_recent_users sourceReadSlowQueryRecordList ¶ List of the slowest queries that accessed this asset. (1) Uses a different name in SDKs sourceReadSlowQueryRecords source_read_slow_query_records sourceReadTopUserRecordList ¶ List of usernames with extra insights for the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUserRecords source_read_top_user_records sourceReadTopUserList ¶ List of usernames of the users who read this asset the most. (1) Uses a different name in SDKs sourceReadTopUsers source_read_top_users sourceReadUserCount ¶ Total number of unique users that read data from asset. sourceTotalCost ¶ Total cost of all operations at source. sourceURL ¶ URL to the resource within the source application, used to create a button to view this asset in the source application. sourceUpdatedAt ¶ Time (epoch) at which this asset was last updated in the source system, in milliseconds. sourceUpdatedBy ¶ Name of the user who last updated this asset, in the source system. starredBy ¶ Users who have starred this asset. starredCount ¶ Number of users who have starred this asset. starredDetailsList ¶ List of usernames with extra information of the users who have starred an asset. (1) Uses a different name in SDKs starredDetails starred_details subType ¶ Subtype of this asset. tenantId ¶ Name of the Atlan workspace in which this asset exists. userDescription ¶ Description of this asset, as provided by a user. If present, this will be used for the description in user interface. viewScore ¶ View score for this asset. viewerGroups ¶ List of groups who can view assets contained in a collection. (This is only used for certain asset types.) viewerUsers ¶ List of users who can view assets contained in a collection. (This is only used for certain asset types.) anaplanModelName ¶ Simple name of the AnaplanModel asset that contains this asset(AnaplanModule and everthing under it's hierarchy). anaplanModelQualifiedName ¶ Unique name of the AnaplanModel asset that contains this asset(AnaplanModule and everthing under it's hierarchy). anaplanModuleName ¶ Simple name of the AnaplanModule asset that contains this asset(AnaplanLineItem, AnaplanList, AnaplanView and everthing under their hierarchy). anaplanModuleQualifiedName ¶ Unique name of the AnaplanModule asset that contains this asset(AnaplanLineItem, AnaplanList, AnaplanView and everthing under their hierarchy). anaplanSourceId ¶ Id/Guid of the Anaplan asset in the source system. anaplanWorkspaceName ¶ Simple name of the AnaplanWorkspace asset that contains this asset(AnaplanModel and everthing under it's hierarchy). anaplanWorkspaceQualifiedName ¶ Unique name of the AnaplanWorkspace asset that contains this asset(AnaplanModel and everthing under it's hierarchy). These attributes are specific to instances of AnaplanWorkspace (and all of its subtypes). anaplanWorkspaceAllowanceSize ¶ Alloted Size quota for the AnaplanWorkspace from the source system, estimated in MB. anaplanWorkspaceCurrentSize ¶ Current Size of the AnaplanWorkspace from the source system, estimated in MB. Relationships ¶ Inherited relationships These relationships are inherited from AnaplanWorkspace 's supertypes: anomaloChecks ( AnomaloCheck ) ¶ Checks that run on this asset. application ( Application ) ¶ Application asset containing this Asset. applicationField ( ApplicationField ) ¶ ApplicationField asset containing this Asset. meanings ( AtlasGlossaryTerm ) ¶ Glossary terms that are linked to this asset. (1) Uses a different name in SDKs assignedTerms assigned_terms dataContractLatest ( DataContract ) ¶ Latest version of the data contract (in any status) for this asset. dataContractLatestCertified ( DataContract ) ¶ Latest certified version of the data contract for this asset. files ( File ) ¶ TBC inputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an input port. links ( Link ) ¶ Links that are attached to this asset. mcIncidents ( MCIncident ) ¶ TBC mcMonitors ( MCMonitor ) ¶ Monitors that observe this asset. metrics ( Metric ) ¶ TBC outputPortDataProducts ( DataProduct ) ¶ Data products for which this asset is an output port. readme ( Readme ) ¶ README that is linked to this asset. schemaRegistrySubjects ( SchemaRegistrySubject ) ¶ TBC sodaChecks ( SodaCheck ) ¶ TBC userDefRelationshipFrom ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipFroms user_def_relationship_froms userDefRelationshipTo ( Referenceable ) ¶ TBC (1) Uses a different name in SDKs userDefRelationshipTos user_def_relationship_tos inputToAirflowTasks ( AirflowTask ) ¶ Tasks to which this asset provides input. inputToProcesses ( Process ) ¶ Processes to which this asset provides input. inputToSparkJobs ( SparkJob ) ¶ TBC modelImplementedAttributes ( ModelAttribute ) ¶ Attributes implemented by this asset. modelImplementedEntities ( ModelEntity ) ¶ Entities implemented by this asset. outputFromAirflowTasks ( AirflowTask ) ¶ Tasks from which this asset is output. outputFromProcesses ( Process ) ¶ Processes from which this asset is produced as output. outputFromSparkJobs ( SparkJob ) ¶ TBC These relationships are specific to instances of AnaplanWorkspace (and all of its subtypes). anaplanModels ( AnaplanModel ) ¶ AnaplanModel assets contained within this AnaplanWorkspace. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by using our feedback form to provide us with more information. Back to top",
    "url": "https://developer.atlan.com/models/entities/anaplanworkspace/",
    "scraped_at": "2025-09-15 19:55:20",
    "content_length": 20333,
    "topic": "SSO"
  },
  {
    "title": "2 docs tagged with \"service-principal\" | Atlan Documentation",
    "content": "Cross-workspace extraction Frequently asked questions about Databricks cross-workspace extraction setup and configuration. Cross-workspace extraction issues Troubleshoot common issues in Databricks cross-workspace extraction with error, cause, and solution guidance.",
    "url": "https://docs.atlan.com/tags/service-principal",
    "scraped_at": "2025-09-15 19:55:32",
    "content_length": 266,
    "topic": "HOW_TO"
  },
  {
    "title": "2 docs tagged with \"cross-workspace\" | Atlan Documentation",
    "content": "Cross-workspace extraction Frequently asked questions about Databricks cross-workspace extraction setup and configuration. Cross-workspace extraction issues Troubleshoot common issues in Databricks cross-workspace extraction with error, cause, and solution guidance.",
    "url": "https://docs.atlan.com/tags/cross-workspace",
    "scraped_at": "2025-09-15 19:55:44",
    "content_length": 266,
    "topic": "HOW_TO"
  },
  {
    "title": "What does Atlan crawl from Metabase? | Atlan Documentation",
    "content": "On this page Atlan crawls and maps the following assets and properties from Metabase. danger Currently Atlan only represents the assets marked with 🔀 in lineage. Collections ​ Atlan maps collections from Metabase to its MetabaseCollection asset type. Source property Atlan property name name slug metabaseSlug color metabaseColor namespace metabaseNamespace personal_owner_id metabaseIsPersonalCollection Dashboards 🔀 ​ Atlan maps dashboards from Metabase to its MetabaseDashboard asset type. Source property Atlan property name name collection metabaseCollectionName created_at sourceCreatedAt updated_at sourceUpdatedAt last-edit-info sourceUpdatedBy ordered_cards metabaseQuestionCount collection ( Official ) certificateStatus (VERIFIED) Questions 🔀 ​ Atlan maps questions from Metabase to its MetabaseQuestion asset type. Source property Atlan property name name collection metabaseCollectionName created_at sourceCreatedAt updated_at sourceUpdatedAt last-edit-info sourceUpdatedBy ordered_cards metabaseDashboardCount query_type metabaseQueryType query metabaseQuery collection ( Official ) certificateStatus (VERIFIED) invalid non-native queries certificateStatus (DEPRECATED) Collections Dashboards 🔀 Questions 🔀",
    "url": "https://docs.atlan.com/apps/connectors/business-intelligence/metabase/references/what-does-atlan-crawl-from-metabase",
    "scraped_at": "2025-09-15 19:55:49",
    "content_length": 1220,
    "topic": "HOW_TO"
  },
  {
    "title": "What does Atlan crawl from Amazon QuickSight? | Atlan Documentation",
    "content": "On this page Atlan currently supports lineage for the Amazon QuickSight connector to the following data sources: Amazon Athena Amazon Redshift Microsoft SQL Server MySQL PostgreSQL Salesforce Snowflake Atlan crawls and maps the following assets and properties from Amazon QuickSight. Analyses ​ Atlan maps analyses from Amazon QuickSight to its QuickSightAnalysis asset type. Source property Atlan property name name createdAt sourceCreatedAt updatedAt sourceUpdatedAt status quickSightAnalysisStatus calculatedFields quickSightAnalysisCalculatedFields parameterDeclarations quickSightAnalysisParameterDeclarations filterGroups quickSightAnalysisFilterGroups Dashboards ​ Atlan maps dashboards from Amazon QuickSight to its QuickSightDashboard asset type. Source property Atlan property name name createdAt sourceCreatedAt updatedAt sourceUpdatedAt publishedVersionNumber quickSightDashboardPublishedVersionNumber lastPublishedTime quickSightDashboardLastPublishedTime analysisName quickSightAnalysisQualifiedName Datasets ​ Atlan maps datasets from Amazon QuickSight to its QuickSightDataset asset type. Source property Atlan property name name createdAt sourceCreatedAt updatedAt sourceUpdatedAt ImportMode quickSightDatasetImportMode outputColumnCount quickSightDatasetColumnCount Folders ​ Atlan maps folders from Amazon QuickSight to its QuickSightFolder asset type. Source property Atlan property name name createdAt sourceCreatedAt updatedAt sourceUpdatedAt FolderType quickSightFolderType SharingModel quickSightFolderSharingModel folderHierarchy quickSightFolderHierarchy Dataset fields ​ Atlan maps dataset fields from Amazon QuickSight to its QuickSightDatasetField asset type. Source property Atlan property name name createdAt sourceCreatedAt updatedAt sourceUpdatedAt type quickSightDatasetFieldType datasetQualifiedName quickSightDatasetQualifiedName Analysis visuals ​ Atlan maps analysis visuals from Amazon QuickSight to its QuickSightAnalysisVisual asset type. Source property Atlan property name name createdAt sourceCreatedAt updatedAt sourceUpdatedAt Id quickSightId analysisQualifiedName quickSightAnalysisQualifiedName sheetId quickSightSheetId sheetName quickSightSheetName Dashboard visuals ​ Atlan maps dashboard visuals from Amazon QuickSight to its QuickSightDashboardVisual asset type. Source property Atlan property name name createdAt sourceCreatedAt updatedAt sourceUpdatedAt Id quickSightId dashboardQualifiedName quickSightDashboardQualifiedName sheetId quickSightSheetId sheetName quickSightSheetName Analyses Dashboards Datasets Folders Dataset fields Analysis visuals Dashboard visuals",
    "url": "https://docs.atlan.com/apps/connectors/business-intelligence/amazon-quicksight/references/what-does-atlan-crawl-from-amazon-quicksight",
    "scraped_at": "2025-09-15 19:55:53",
    "content_length": 2623,
    "topic": "HOW_TO"
  },
  {
    "title": "What does Atlan crawl from Redash? | Atlan Documentation",
    "content": "On this page Atlan crawls and maps the following assets and properties from Redash. Once you've crawled Redash , you can use connector-specific filters for quick asset discovery. The following filters are currently supported for these assets: Queries - Schedule, Is Published, and Redash tags filters Visualizations - Type filter Dashboards - Redash tags filter danger Currently, Atlan only represents the assets marked with 🔀 in lineage. Queries 🔀 ​ Atlan maps queries from Redash to its RedashQuery asset type. Source property Atlan property name name created_at sourceCreatedAt updated_at sourceUpdatedAt query query Dashboards 🔀 ​ Atlan maps dashboards from Redash to its RedashDashboard asset type. Source property Atlan property widgets widget_count Visualizations 🔀 ​ Atlan maps visualization elements from Redash to its RedashVisualization asset type. Source property Atlan property name name type type Queries 🔀 Dashboards 🔀 Visualizations 🔀",
    "url": "https://docs.atlan.com/apps/connectors/business-intelligence/redash/references/what-does-atlan-crawl-from-redash",
    "scraped_at": "2025-09-15 19:56:03",
    "content_length": 950,
    "topic": "HOW_TO"
  },
  {
    "title": "Preflight checks for Qlik Sense Cloud | Atlan Documentation",
    "content": "On this page Before running the Qlik Sense Cloud crawler , you can run preflight checks to perform the necessary technical validations. The following preflight checks will be completed: Spaces ​ ✅ Check successful ❌ Source returned error - for example, 401 authorization required Apps ​ ✅ Check successful ❌ Source returned error - for example, 401 authorization required Items ​ This check tests for access to datasets and other Qlik objects. ✅ Check successful ❌ Source returned error - for example, 401 authorization required Connections ​ ✅ Check successful ❌ Source returned error - for example, 401 authorization required Spaces Apps Items Connections",
    "url": "https://docs.atlan.com/apps/connectors/business-intelligence/qlik-sense-cloud/references/preflight-checks-for-qlik-sense-cloud",
    "scraped_at": "2025-09-15 19:56:14",
    "content_length": 657,
    "topic": "HOW_TO"
  },
  {
    "title": "Troubleshooting on-premises Looker connectivity | Atlan Documentation",
    "content": "On this page How do I disable cloning Looker projects from git? ​ The looker-extractor tool clones your Looker git project to parse field-level lineage. By default, the extractor needs the looker_git_private_key and looker_git_private_key_passphrase secrets. To disable this behavior, you need to set the USE_FIELD_LEVEL_LINEAGE parameter to \"false\" . For example: services: # Example Looker connection looker-example: <<: *extract environment: <<: *looker-defaults INCLUDE_PROJECTS: \"project-1,project-2\" USE_FIELD_LEVEL_LINEAGE: \"false\" volumes: - ./output/looker-example:/output/process secrets: - looker_config secrets: looker_config: file: ./looker.ini Note that we refer to only the looker-config secret in this looker-example service. This is possible because the USE_FIELD_LEVEL_LINEAGE environment variable is set to \"false\" . How do I use different credentials for different connections? ​ You may define as many Looker connections under the services section as you want. As mentioned before, by default each connection requires the following secrets: looker_config looker_git_private_key looker_git_private_key_passphrase You may want to define many connections with different credentials. For example, you may want to extract field-level lineage for some projects and not for others. To do this, you need to define and refer to those secrets separately for each connection. For example: services: # The first-connection uses secrets with default names, # so no need to specify its own `secrets` section first-connection: <<: *extract environment: <<: *looker-defaults INCLUDE_PROJECTS: \"project-1\" USE_FIELD_LEVEL_LINEAGE: \"true\" volumes: - ./output/first-connection:/output/process # The second-connection uses alternative secrets, # so it defines its own `secrets` section to refer to them second-connection: <<: *extract environment: <<: *looker-defaults INCLUDE_PROJECTS: \"project-2\" USE_FIELD_LEVEL_LINEAGE: \"true\" volumes: - ./output/first-connection:/output/process secrets: - target: looker_config source: alternative_config - target: looker_git_private_key source: alternative_private_key - target: looker_git_private_key_passphrase source: alternative_key_passphrase secrets: # Credentials for the first-connection (default names) looker_config: file: ./looker.ini looker_git_private_key: file: ./id_rsa looker_git_private_key_passphrase: file: ./passphrase.txt # Credentials for the second-connection alternative_config: file: ./path/to/alternative/looker.ini alternative_private_key: file: ./path/to/alternative/id_rsa alternative_key_passphrase: file: ./path/to/alternative/passphrase.txt In the second-connection secrets list, note that: the target attribute gives the default name of the secret the extractor expects the source attribute gives the alternative secret name",
    "url": "https://docs.atlan.com/apps/connectors/business-intelligence/looker/troubleshooting/troubleshooting-on-premises-looker-connectivity",
    "scraped_at": "2025-09-15 19:56:31",
    "content_length": 2798,
    "topic": "HOW_TO"
  },
  {
    "title": "2 docs tagged with \"metastore\" | Atlan Documentation",
    "content": "Cross-workspace extraction Frequently asked questions about Databricks cross-workspace extraction setup and configuration. Cross-workspace extraction issues Troubleshoot common issues in Databricks cross-workspace extraction with error, cause, and solution guidance.",
    "url": "https://docs.atlan.com/tags/metastore",
    "scraped_at": "2025-09-15 19:56:33",
    "content_length": 266,
    "topic": "HOW_TO"
  },
  {
    "title": "2 docs tagged with \"AI\" | Atlan Documentation",
    "content": "Atlan AI Integrate and leverage Atlan AI capabilities for enhanced data documentation, and lineage analysis. Atlan MCP Overview Learn what the Atlan MCP server is, what it enables, and how to connect using Remote or Local setup.",
    "url": "https://docs.atlan.com/tags/ai",
    "scraped_at": "2025-09-15 19:56:39",
    "content_length": 228,
    "topic": "HOW_TO"
  },
  {
    "title": "2 docs tagged with \"roles\" | Atlan Documentation",
    "content": "Automatically assign roles based on group names Learn how to automatically assign roles and sub-roles to users in Atlan based on their group memberships using the group-role sync app. User Role Sync Complete configuration reference for the User Role Sync app properties and settings.",
    "url": "https://docs.atlan.com/tags/roles",
    "scraped_at": "2025-09-15 19:56:42",
    "content_length": 283,
    "topic": "HOW_TO"
  },
  {
    "title": "What is the difference between a Power BI data source and dataflow? | Atlan Documentation",
    "content": "In Microsoft Power BI: Data source - a data source is any source that fuels a dataset. You can connect to different types of data sources, such as databases, files, Microsoft Fabric, and more, to fetch data directly into Microsoft Power BI for creating reports and dashboards. For a full list, refer to Microsoft Power BI documentation . Dataflows - data flows help you encode the process of extracting and transforming data from a data source to produce a dataset. These have a refresh frequency that keeps the dataset in sync with the data source. To learn more, refer to Microsoft Power BI documentation .",
    "url": "https://docs.atlan.com/apps/connectors/business-intelligence/microsoft-power-bi/faq/power-bi-dataflow-datasource",
    "scraped_at": "2025-09-15 19:56:44",
    "content_length": 608,
    "topic": "HOW_TO"
  },
  {
    "title": "What does Atlan crawl from Amazon DynamoDB? | Atlan Documentation",
    "content": "On this page Atlan crawls and maps the following assets and properties from Amazon DynamoDB. Atlan also currently supports lineage between Amazon DynamoDB as a source to supported data warehouses as destinations, as enriched by Fivetran. Tables ​ Atlan maps tables from Amazon DynamoDB to its DynamoDBTable asset type. Source property Atlan property Where in Atlan TableName name asset profile and overview sidebar ItemCount rowCount asset preview and profile, overview sidebar TableSizeBytes sizeBytes asset filter and overview sidebar AttributeDefinitions noSQLSchemaDefinition asset profile HASH key in KeySchema dynamoDBPartitionKey asset profile and overview sidebar RANGE key in KeySchema dynamoDBSortKey asset profile and overview sidebar TableStatus dynamoDBStatus asset profile and overview sidebar CreationDateTime sourceCreatedAt asset profile and overview sidebar ProvisionedThroughput.ReadCapacityUnits dynamoDBReadCapacityUnits asset profile and overview sidebar ProvisionedThroughput.WriteCapacityUnits dynamoDBWriteCapacityUnits asset profile and overview sidebar Global secondary indexes ​ Atlan maps global secondary indexes (GSI) from Amazon Dynamo DB to its DynamoDBGlobalSecondaryIndex asset type. Source property Atlan property Where in Atlan ItemName name asset profile and overview sidebar IndexCount rowCount asset preview and profile, overview sidebar IndexSizeBytes sizeBytes asset filter and overview sidebar IndexStatus dynamoDBStatus asset profile and overview sidebar HASH key in KeySchema dynamoDBPartitionKey asset profile and overview sidebar RANGE key in KeySchema dynamoDBSortKey asset profile and overview sidebar Projection.ProjectionType dynamoDBSecondaryIndexProjectionType asset profile and overview sidebar ProvisionedThroughput.ReadCapacityUnits dynamoDBReadCapacityUnits asset profile and overview sidebar ProvisionedThroughput.WriteCapacityUnits dynamoDBWriteCapacityUnits asset profile and overview sidebar Local secondary indexes ​ Atlan maps local secondary indexes (LSI) from Amazon Dynamo DB to its DynamoDBLocalSecondaryIndex asset type. Source property Atlan property Where in Atlan IndexName name asset profile and overview sidebar ItemCount rowCount asset preview and profile, overview sidebar IndexSizeBytes sizeBytes asset filter and overview sidebar HASH key in KeySchema dynamoDBPartitionKey asset profile and overview sidebar RANGE key in KeySchema dynamoDBSortKey asset profile and overview sidebar Projection.ProjectionType dynamoDBSecondaryIndexProjectionType asset profile and overview sidebar Tables Global secondary indexes Local secondary indexes",
    "url": "https://docs.atlan.com/apps/connectors/database/amazon-dynamodb/references/what-does-atlan-crawl-from-amazon-dynamodb",
    "scraped_at": "2025-09-15 19:56:52",
    "content_length": 2612,
    "topic": "HOW_TO"
  },
  {
    "title": "2 docs tagged with \"temporal\" | Atlan Documentation",
    "content": "Build custom app Create a local file extraction application from scratch using the patterns and tools you learned Run your first sample app Download and run the Hello World sample application to see an Atlan app in action",
    "url": "https://docs.atlan.com/tags/temporal",
    "scraped_at": "2025-09-15 19:56:53",
    "content_length": 221,
    "topic": "HOW_TO"
  },
  {
    "title": "2 docs tagged with \"faq-platform\" | Atlan Documentation",
    "content": "Basic Platform Usage Essential information about using Atlan's core features, from browser requirements to data querying and asset management. Getting Started and Onboarding Everything you need to know when starting with Atlan - from trials and demos to deployment options and implementation requirements.",
    "url": "https://docs.atlan.com/tags/faq-platform",
    "scraped_at": "2025-09-15 19:57:05",
    "content_length": 305,
    "topic": "HOW_TO"
  },
  {
    "title": "2 docs tagged with \"faq-administration\" | Atlan Documentation",
    "content": "Administration and Configuration Complete guide to administering and configuring your Atlan workspace, from basic settings to advanced customization. User Management and Access Control Complete guide to managing users, configuring access controls, and understanding permissions in Atlan.",
    "url": "https://docs.atlan.com/tags/faq-administration",
    "scraped_at": "2025-09-15 19:57:11",
    "content_length": 287,
    "topic": "HOW_TO"
  },
  {
    "title": "2 docs tagged with \"auto-re-attachment\" | Atlan Documentation",
    "content": "Enable auto re-attachment of rules Learn how to enable automatic re-attachment of data quality rules to Snowflake tables and views. What's auto re-attachment Understand automatic re-attachment of data quality rules to assets that are dropped and recreated.",
    "url": "https://docs.atlan.com/tags/auto-re-attachment",
    "scraped_at": "2025-09-15 19:57:24",
    "content_length": 256,
    "topic": "HOW_TO"
  },
  {
    "title": "5 docs tagged with \"schema-monitoring\" | Atlan Documentation",
    "content": "Preflight Checks for Cloudera Impala Learn about preflight checks for cloudera impala. Troubleshooting Apache Spark/OpenLineage connectivity Learn about troubleshooting apache spark/openlineage connectivity. What does Atlan crawl from Cloudera Impala? Learn about what does atlan crawl from cloudera impala?. What does Atlan crawl from Confluent Schema Registry? Atlan crawls and maps the following assets and properties from Confluent Schema Registry. What does Atlan crawl from SAP HANA? Atlan crawls and maps the following assets and properties from SAP HANA.",
    "url": "https://docs.atlan.com/tags/schema-monitoring",
    "scraped_at": "2025-09-15 19:57:29",
    "content_length": 562,
    "topic": "HOW_TO"
  },
  {
    "title": "5 docs tagged with \"deployment\" | Atlan Documentation",
    "content": "Architecture Architecture overview and core components of Secure Agent 2.0 Customer environment security Customer environment security best practices for deploying and operating Secure Agent 2.0 Deployment and security Frequently asked questions about Secure Agent 2.0 deployment and security Deployment options Understand how Secure Agent 2.0 deploys across different container environments. Development and Deployment Questions about developing, deploying, and managing apps through the Atlan App Marketplace.",
    "url": "https://docs.atlan.com/tags/deployment",
    "scraped_at": "2025-09-15 19:57:33",
    "content_length": 511,
    "topic": "BEST_PRACTICES"
  },
  {
    "title": "Snowflake warehouse configuration | Atlan Documentation",
    "content": "On this page Configure your Snowflake warehouses following these best practices to achieve optimal performance and reliability for Atlan data workflows. These recommendations establish predictable resource allocation and maximize workflow efficiency. Configure warehouse allocation ​ Use a dedicated warehouse for Atlan workflows : Assign a dedicated warehouse exclusively for Atlan operations. This approach separates warehouse performance from other workloads, enables precise cost tracking for Atlan operations, and provides consistent workflow performance. One warehouse per connection : Provision one Snowflake warehouse for each Atlan connection to maintain scoped capacity and predictable resource allocation. Configure statement timeout ​ Set appropriate timeout values : If your account enforces timeouts, configure both STATEMENT_TIMEOUT_IN_SECONDS and STATEMENT_QUEUED_TIMEOUT_IN_SECONDS to at least 6 hours (21,600 seconds) for the Atlan user to accommodate comprehensive data cataloging workflows. Default values work well : By default, both parameters are set to 0 (no limit), which is optimal for Atlan operations. Only adjust if your organization requires specific timeout enforcement. Apply at user level : Configure timeouts at the user level for consistent behavior across all Atlan sessions rather than at warehouse or session level. Configure warehouse allocation Configure statement timeout",
    "url": "https://docs.atlan.com/apps/connectors/data-warehouses/snowflake/best-practices/snowflake-warehouse-configuration",
    "scraped_at": "2025-09-15 19:57:38",
    "content_length": 1412,
    "topic": "HOW_TO"
  },
  {
    "title": "2 docs tagged with \"user groups\" | Atlan Documentation",
    "content": "Automatically assign roles based on group names Learn how to automatically assign roles and sub-roles to users in Atlan based on their group memberships using the group-role sync app. User Role Sync Complete configuration reference for the User Role Sync app properties and settings.",
    "url": "https://docs.atlan.com/tags/user-groups",
    "scraped_at": "2025-09-15 19:57:52",
    "content_length": 283,
    "topic": "HOW_TO"
  },
  {
    "title": "Troubleshooting Amazon Redshift connectivity | Atlan Documentation",
    "content": "On this page What are the known limitations of the Amazon Redshift connector? ​ If you run the miner for an Amazon Redshift connection with Serverless deployment type, lineage will be missing for queries with comments included. This is a limitation of AWS - queries with comments do not include line breaks when fetched from query history. Why do I get an error when querying an external schema in Amazon Redshift? ​ Atlan currently does not support search paths for external schemas and tables in Amazon Redshift. If you would like to query an external schema in Amazon Redshift from Atlan, you will need to write the query in Insights with the fully qualified name and keep the editor context empty - for example, select * db.schema.table and as shown here: Does Atlan support connecting to Amazon Redshift via SSL? ​ Yes, Atlan supports connecting to Amazon Redshift over the Secure Sockets Layer (SSL) protocol. If your Amazon Redshift cluster is configured to require an SSL connection, with the require_SSL parameter set to true , Atlan will be able to connect to your cluster.",
    "url": "https://docs.atlan.com/apps/connectors/data-warehouses/amazon-redshift/troubleshooting/troubleshooting-amazon-redshift-connectivity",
    "scraped_at": "2025-09-15 19:58:05",
    "content_length": 1083,
    "topic": "HOW_TO"
  },
  {
    "title": "4 docs tagged with \"amazon-s3\" | Atlan Documentation",
    "content": "Crawl S3 assets Configure and run the S3 crawler to catalog your Amazon S3 buckets and objects in Atlan. Set up Amazon S3 Create AWS IAM permissions and credentials for Atlan to access and catalog your S3 buckets and objects. Set up Inventory reports Create Inventory report for Amazon S3 in case of inventory based ingestion through the crawler. What does Atlan crawl from Amazon S3 Complete reference for the S3 assets and properties that Atlan crawls and maps during S3 cataloging.",
    "url": "https://docs.atlan.com/tags/amazon-s-3",
    "scraped_at": "2025-09-15 19:58:14",
    "content_length": 484,
    "topic": "HOW_TO"
  },
  {
    "title": "Preflight Checks for Cloudera Impala | Atlan Documentation",
    "content": "Before running the Cloudera Impala you can run preflight checks to perform the necessary technical validations. The following preflight checks will be completed: Assets Schema Permission ✅ Check successful ❌ Check failed. Failed to connect to the Impala cluster.",
    "url": "https://docs.atlan.com/apps/connectors/database/cloudera-impala/references/preflight-checks-for-cloudera-impala",
    "scraped_at": "2025-09-15 19:58:18",
    "content_length": 262,
    "topic": "HOW_TO"
  },
  {
    "title": "13 docs tagged with \"model\" | Atlan Documentation",
    "content": "Add impact analysis in GitHub Learn about add impact analysis in github. Add impact analysis in GitLab Learn about add impact analysis in gitlab. Atlan AI security Atlan uses [Azure OpenAI Service](https://azure.microsoft.com/en-in/products/cognitive-services/openai-service) to power Atlan AI. Specifically, Atlan uses GPT-4o, a large, pretrained AI model. Data Models Data models provide a framework to describe how data is structured, organized, and related within a system. It acts as a blueprint for organizations to design their business applications and processes. Data models can be of different types: relational, hierarchical, entity relationship, and network. Migrate from dbt to Atlan action The dbt-action is a custom action designed to perform impact analysis on changes to your dbt models in a [GitHub](/apps/connectors/etl-tools/dbt/how-tos/. Set up dbt Cloud :::warning Who can do this? You will probably need your dbt Cloud administrator to complete these steps - you may not have access yourself. Set up Local MCP Server The Atlan Model Context Protocol (MCP) server enables seamless interaction between external tools and Atlan services. It defines the data structures and conventions used to prepare and transmit context for model execution, making it easier to integrate Atlan into your existing workflows. Troubleshooting data models What are the known limitations of data models in Atlan? view data models Once you have [ingested your ER model assets in Atlan](/product/capabilities/data-models/concepts/what-are-data-models), you can:. What does Atlan crawl from Looker? Atlan crawls and maps the following assets and properties from Looker. What does Atlan crawl from Sisense? Atlan crawls and maps the following assets and properties from Sisense. What is the difference between a Power BI data source and dataflow? Learn about what is the difference between a power bi data source and dataflow?. Why is the SQL query visible only in Snowflake process and not in dbt process nodes? Atlan displays SQL queries for dbt process nodes between SQL tables and also on dbt models. However, Atlan does not display dbt process nodes between two dbt assets - for example, between two models. This is because Atlan does not use any SQL query to generate this type of lineage.",
    "url": "https://docs.atlan.com/tags/model",
    "scraped_at": "2025-09-15 19:58:23",
    "content_length": 2291,
    "topic": "HOW_TO"
  },
  {
    "title": "2 docs tagged with \"rules\" | Atlan Documentation",
    "content": "Rules and dimensions Reference for available data quality rules and classification dimensions in Snowflake data quality. What's Data Quality Studio Understand Atlan's Data Quality Studio and how it enables business and data teams to collaborate on defining, monitoring, and enforcing data quality expectations",
    "url": "https://docs.atlan.com/tags/rules",
    "scraped_at": "2025-09-15 19:58:45",
    "content_length": 309,
    "topic": "HOW_TO"
  },
  {
    "title": "5 docs tagged with \"schema-drift\" | Atlan Documentation",
    "content": "Preflight Checks for Cloudera Impala Learn about preflight checks for cloudera impala. Troubleshooting Apache Spark/OpenLineage connectivity Learn about troubleshooting apache spark/openlineage connectivity. What does Atlan crawl from Cloudera Impala? Learn about what does atlan crawl from cloudera impala?. What does Atlan crawl from Confluent Schema Registry? Atlan crawls and maps the following assets and properties from Confluent Schema Registry. What does Atlan crawl from SAP HANA? Atlan crawls and maps the following assets and properties from SAP HANA.",
    "url": "https://docs.atlan.com/tags/schema-drift",
    "scraped_at": "2025-09-15 19:59:31",
    "content_length": 562,
    "topic": "HOW_TO"
  },
  {
    "title": "What does Atlan crawl from Sigma? | Atlan Documentation",
    "content": "On this page Atlan crawls and maps the following assets and properties from Sigma. danger Currently, Atlan only represents the assets marked with 🔀 in lineage. For your Sigma workbooks , Atlan also provides asset previews to help with quick discovery and give you the context you need. Workbooks 🔀 ​ Atlan maps workbooks from Sigma to its SigmaWorkbook asset type. Source property Atlan property Where in Atlan name name asset profile and overview sidebar createdAt sourceCreatedAt asset profile and properties sidebar updatedAt sourceUpdatedAt asset profile and properties sidebar url sourceURL overview sidebar Pages 🔀 ​ Atlan maps pages from Sigma to its SigmaPage asset type. Source property Atlan property Where in Atlan title name asset profile and overview sidebar Data elements 🔀 ​ Atlan maps table, pivot table, and visualization elements from Sigma to its SigmaDataElement asset type. Source property Atlan property Where in Atlan displayName name asset profile and overview sidebar type type overview sidebar Data element fields 🔀 ​ Atlan maps table, pivot table, and visualization element fields from Sigma to its SigmaDataElementField asset type. Source property Atlan property Where in Atlan displayName name asset profile and overview sidebar Datasets ​ Atlan maps datasets from Sigma to its SigmaDataset asset type. Source property Atlan property Where in Atlan name name asset profile and overview sidebar createdAt sourceCreatedAt asset profile and properties sidebar updatedAt sourceUpdatedAt asset profile and properties sidebar url sourceURL overview sidebar Workbooks 🔀 Pages 🔀 Data elements 🔀 Data element fields 🔀 Datasets",
    "url": "https://docs.atlan.com/apps/connectors/business-intelligence/sigma/references/what-does-atlan-crawl-from-sigma",
    "scraped_at": "2025-09-15 19:59:45",
    "content_length": 1646,
    "topic": "HOW_TO"
  },
  {
    "title": "Troubleshooting ThoughtSpot connectivity | Atlan Documentation",
    "content": "On this page What are the known limitations of the ThoughtSpot connector? ​ Atlan currently does not support the following: Column-level lineage between ThoughSpot tables and views. Upstream lineage to source assets for ThoughtSpot views",
    "url": "https://docs.atlan.com/apps/connectors/business-intelligence/thoughtspot/troubleshooting/troubleshooting-thoughtspot-connectivity",
    "scraped_at": "2025-09-15 20:00:10",
    "content_length": 237,
    "topic": "HOW_TO"
  },
  {
    "title": "Preflight checks for Metabase | Atlan Documentation",
    "content": "On this page Before running the Metabase crawler , you can run preflight checks to perform the necessary technical validations. The following preflight checks will be completed: Collection count ​ ✅ Collection count check passed. Total collections: <collection count> ❌ Total collections: 0 or source returned error Dashboard count ​ ✅ Dashboard count check passed. Total dashboards: <dashboard count> ❌ Total dashboards: 0 or source returned error Question count ​ ✅ Question count check passed. Total questions: <question count> ❌ Total questions: 0 or source returned error Native query editing permission ​ ✅ Check successful ❌ Check failed. Missing native query editing permission on the following databases: <database list> Collection count Dashboard count Question count Native query editing permission",
    "url": "https://docs.atlan.com/apps/connectors/business-intelligence/metabase/references/preflight-checks-for-metabase",
    "scraped_at": "2025-09-15 20:00:30",
    "content_length": 809,
    "topic": "HOW_TO"
  },
  {
    "title": "2 docs tagged with \"search\" | Atlan Documentation",
    "content": "Discovery Find, understand, and use data assets across your organization with powerful search, filtering, and browsing features. Discovery FAQs Frequently asked questions about Atlan's Discovery capabilities.",
    "url": "https://docs.atlan.com/tags/search",
    "scraped_at": "2025-09-15 20:00:43",
    "content_length": 208,
    "topic": "PRODUCT"
  },
  {
    "title": "Troubleshooting Redash connectivity | Atlan Documentation",
    "content": "On this page Does Atlan crawl unpublished dashboards? ​ Atlan does not support crawling unpublished dashboards. Unlike unpublished queries, unpublished dashboards are only visible to the users who created them in Redash. Why don't I see Redash alerts? ​ Atlan currently does not support Redash alerts as assets.",
    "url": "https://docs.atlan.com/apps/connectors/business-intelligence/redash/troubleshooting/troubleshooting-redash-connectivity",
    "scraped_at": "2025-09-15 20:00:51",
    "content_length": 311,
    "topic": "HOW_TO"
  }
]